// Reading Obj file
#define  _CRT_SECURE_NO_WARNINGS


#include "shader.h"
#include "objRead.h"
#include <stdio.h>
#include <Windows.h>
#include <mmsystem.h>
#pragma comment(lib, "winmm.lib")
#include <conio.h>
#define STB_IMAGE_IMPLEMENTATION
#include "stb_image.h"
#include <chrono>
#include <Digitalv.h>;

MCI_OPEN_PARMS m_mciOpenParms;
MCI_PLAY_PARMS m_mciPlayParms;
DWORD m_dwDeviceID;
MCI_OPEN_PARMS mciOpen;
MCI_PLAY_PARMS mciPlay;

int dwID;




using namespace std;
int update = 0;
int COUNT = 0;
int hflag = 1;
int SH_COUNT = 2;
GLuint g_window_w = 960;
GLuint g_window_h = 960;

GLfloat TX = 0.0f;
GLfloat TY = 0.0f;
GLfloat TZ = 0.0f;

GLuint VAO[10];
GLuint VBO[4];
GLuint VBO1[4];
GLuint VBO2[4];
GLuint VBO3[4];
GLuint VBO4[4];
GLuint VBO5[4];


int timer_flag = 0;
int Second = 0;

int Down_flag = 0;
int CUBE_flag = 0;
int Camera_flag = 1;
int polygon_mode = 1;


GLfloat xPos = 0.0f;
GLfloat yPos = 1.7f;
GLfloat zPos = 0.7f;

//----------------일반 함수들------------------------------
void Display();
void Display_Camera();
void Reshape(int w, int h);
void Keyboard(unsigned char key, int x, int y);
void InitBuffer();
void InitTexture();
void moveup();						//플레이어가 위로 움직이는 함수
void movedown();					//플레이어가 밑으로 움직이는 함수
void moveleft();					//플레이어가 왼쪽으로 움직이는 함수
void moveright();					//플레이어가 오른쪽으로 움직이는 함수
void timer_repeat(int value);		//1초마다 시간을 세는 함수
void Play_game(int value);			//각 시간마다 게임이 진행되는 함수 <- 사실상 main함수
void Down_block(int Sec);			//UpdownCube가 위에서 떨어지게 하는 함수
void Stage_Clear();					//Clear시 명령창에 print하는 함수
void depeat();						//블럭들과 충돌해서 탈락하면 명령창에 print하는 함수

//-----------------------충돌함수-------------------
void collision_Updown1();
void collision_Updown2();
void collision_Updown3();
void collision_Updown4();
void collision_Updown5();
void collision_sideleft1();
void collision_sideleft2();
void collision_sideup1();
void collision_sideup2();
void collision_yellow1();
void collision_yellow2();
void collision_yellow3();
void collision_yellow4();
void collision_yellow5();
void collision_yellow6();
//----------------------------------------------



GLfloat RectUv[720][2]
{
	{0,1},{0,0},{1,0},
	{0,1},{1,0},{1,1},
	{1,0},{1,1},{0,1},
	{1,0},{0,1},{0,0},
	{1,0},{1,1},{0,0},
	{1,1},{0,1},{0,0},
	{1,0},{1,1},{0,0},
	{1,1},{0,1},{0,0},
	{1,1},{0,1},{1,0},
	{0,1},{0,0},{1,0},
	{0,1},{0,0},{1,0},
	{0,1},{1,0},{1,1},

		{0,1},{0,0},{1,0},
	{0,1},{1,0},{1,1},
	{1,0},{1,1},{0,1},
	{1,0},{0,1},{0,0},
	{1,0},{1,1},{0,0},
	{1,1},{0,1},{0,0},
	{1,0},{1,1},{0,0},
	{1,1},{0,1},{0,0},
	{1,1},{0,1},{1,0},
	{0,1},{0,0},{1,0},
	{0,1},{0,0},{1,0},
	{0,1},{1,0},{1,1},

		{0,1},{0,0},{1,0},
	{0,1},{1,0},{1,1},
	{1,0},{1,1},{0,1},
	{1,0},{0,1},{0,0},
	{1,0},{1,1},{0,0},
	{1,1},{0,1},{0,0},
	{1,0},{1,1},{0,0},
	{1,1},{0,1},{0,0},
	{1,1},{0,1},{1,0},
	{0,1},{0,0},{1,0},
	{0,1},{0,0},{1,0},
	{0,1},{1,0},{1,1},

		{0,1},{0,0},{1,0},
	{0,1},{1,0},{1,1},
	{1,0},{1,1},{0,1},
	{1,0},{0,1},{0,0},
	{1,0},{1,1},{0,0},
	{1,1},{0,1},{0,0},
	{1,0},{1,1},{0,0},
	{1,1},{0,1},{0,0},
	{1,1},{0,1},{1,0},
	{0,1},{0,0},{1,0},
	{0,1},{0,0},{1,0},
	{0,1},{1,0},{1,1},

		{0,1},{0,0},{1,0},
	{0,1},{1,0},{1,1},
	{1,0},{1,1},{0,1},
	{1,0},{0,1},{0,0},
	{1,0},{1,1},{0,0},
	{1,1},{0,1},{0,0},
	{1,0},{1,1},{0,0},
	{1,1},{0,1},{0,0},
	{1,1},{0,1},{1,0},
	{0,1},{0,0},{1,0},
	{0,1},{0,0},{1,0},
	{0,1},{1,0},{1,1},

		{0,1},{0,0},{1,0},
	{0,1},{1,0},{1,1},
	{1,0},{1,1},{0,1},
	{1,0},{0,1},{0,0},
	{1,0},{1,1},{0,0},
	{1,1},{0,1},{0,0},
	{1,0},{1,1},{0,0},
	{1,1},{0,1},{0,0},
	{1,1},{0,1},{1,0},
	{0,1},{0,0},{1,0},
	{0,1},{0,0},{1,0},
	{0,1},{1,0},{1,1},

		{0,1},{0,0},{1,0},
	{0,1},{1,0},{1,1},
	{1,0},{1,1},{0,1},
	{1,0},{0,1},{0,0},
	{1,0},{1,1},{0,0},
	{1,1},{0,1},{0,0},
	{1,0},{1,1},{0,0},
	{1,1},{0,1},{0,0},
	{1,1},{0,1},{1,0},
	{0,1},{0,0},{1,0},
	{0,1},{0,0},{1,0},
	{0,1},{1,0},{1,1},

		{0,1},{0,0},{1,0},
	{0,1},{1,0},{1,1},
	{1,0},{1,1},{0,1},
	{1,0},{0,1},{0,0},
	{1,0},{1,1},{0,0},
	{1,1},{0,1},{0,0},
	{1,0},{1,1},{0,0},
	{1,1},{0,1},{0,0},
	{1,1},{0,1},{1,0},
	{0,1},{0,0},{1,0},
	{0,1},{0,0},{1,0},
	{0,1},{1,0},{1,1},

	{ 0,1 }, { 0,0 }, { 1,0 },
	{ 0,1 }, { 1,0 }, { 1,1 },
	{ 1,0 }, { 1,1 }, { 0,1 },
	{ 1,0 }, { 0,1 }, { 0,0 },
	{ 1,0 }, { 1,1 }, { 0,0 },
	{ 1,1 }, { 0,1 }, { 0,0 },
	{ 1,0 }, { 1,1 }, { 0,0 },
	{ 1,1 }, { 0,1 }, { 0,0 },
	{ 1,1 }, { 0,1 }, { 1,0 },
	{ 0,1 }, { 0,0 }, { 1,0 },
	{ 0,1 }, { 0,0 }, { 1,0 },
	{ 0,1 }, { 1,0 }, { 1,1 },

	{ 0,1 }, { 0,0 }, { 1,0 },
	{ 0,1 }, { 1,0 }, { 1,1 },
	{ 1,0 }, { 1,1 }, { 0,1 },
	{ 1,0 }, { 0,1 }, { 0,0 },
	{ 1,0 }, { 1,1 }, { 0,0 },
	{ 1,1 }, { 0,1 }, { 0,0 },
	{ 1,0 }, { 1,1 }, { 0,0 },
	{ 1,1 }, { 0,1 }, { 0,0 },
	{ 1,1 }, { 0,1 }, { 1,0 },
	{ 0,1 }, { 0,0 }, { 1,0 },
	{ 0,1 }, { 0,0 }, { 1,0 },
	{ 0,1 }, { 1,0 }, { 1,1 },

	{ 0,1 }, { 0,0 }, { 1,0 },
	{ 0,1 }, { 1,0 }, { 1,1 },
	{ 1,0 }, { 1,1 }, { 0,1 },
	{ 1,0 }, { 0,1 }, { 0,0 },
	{ 1,0 }, { 1,1 }, { 0,0 },
	{ 1,1 }, { 0,1 }, { 0,0 },
	{ 1,0 }, { 1,1 }, { 0,0 },
	{ 1,1 }, { 0,1 }, { 0,0 },
	{ 1,1 }, { 0,1 }, { 1,0 },
	{ 0,1 }, { 0,0 }, { 1,0 },
	{ 0,1 }, { 0,0 }, { 1,0 },
	{ 0,1 }, { 1,0 }, { 1,1 },

	{ 0,1 }, { 0,0 }, { 1,0 },
	{ 0,1 }, { 1,0 }, { 1,1 },
	{ 1,0 }, { 1,1 }, { 0,1 },
	{ 1,0 }, { 0,1 }, { 0,0 },
	{ 1,0 }, { 1,1 }, { 0,0 },
	{ 1,1 }, { 0,1 }, { 0,0 },
	{ 1,0 }, { 1,1 }, { 0,0 },
	{ 1,1 }, { 0,1 }, { 0,0 },
	{ 1,1 }, { 0,1 }, { 1,0 },
	{ 0,1 }, { 0,0 }, { 1,0 },
	{ 0,1 }, { 0,0 }, { 1,0 },
	{ 0,1 }, { 1,0 }, { 1,1 },

	{ 0,1 }, { 0,0 }, { 1,0 },
	{ 0,1 }, { 1,0 }, { 1,1 },
	{ 1,0 }, { 1,1 }, { 0,1 },
	{ 1,0 }, { 0,1 }, { 0,0 },
	{ 1,0 }, { 1,1 }, { 0,0 },
	{ 1,1 }, { 0,1 }, { 0,0 },
	{ 1,0 }, { 1,1 }, { 0,0 },
	{ 1,1 }, { 0,1 }, { 0,0 },
	{ 1,1 }, { 0,1 }, { 1,0 },
	{ 0,1 }, { 0,0 }, { 1,0 },
	{ 0,1 }, { 0,0 }, { 1,0 },
	{ 0,1 }, { 1,0 }, { 1,1 },

	{ 0,1 }, { 0,0 }, { 1,0 },
	{ 0,1 }, { 1,0 }, { 1,1 },
	{ 1,0 }, { 1,1 }, { 0,1 },
	{ 1,0 }, { 0,1 }, { 0,0 },
	{ 1,0 }, { 1,1 }, { 0,0 },
	{ 1,1 }, { 0,1 }, { 0,0 },
	{ 1,0 }, { 1,1 }, { 0,0 },
	{ 1,1 }, { 0,1 }, { 0,0 },
	{ 1,1 }, { 0,1 }, { 1,0 },
	{ 0,1 }, { 0,0 }, { 1,0 },
	{ 0,1 }, { 0,0 }, { 1,0 },
	{ 0,1 }, { 1,0 }, { 1,1 },

	{ 0,1 }, { 0,0 }, { 1,0 },
	{ 0,1 }, { 1,0 }, { 1,1 },
	{ 1,0 }, { 1,1 }, { 0,1 },
	{ 1,0 }, { 0,1 }, { 0,0 },
	{ 1,0 }, { 1,1 }, { 0,0 },
	{ 1,1 }, { 0,1 }, { 0,0 },
	{ 1,0 }, { 1,1 }, { 0,0 },
	{ 1,1 }, { 0,1 }, { 0,0 },
	{ 1,1 }, { 0,1 }, { 1,0 },
	{ 0,1 }, { 0,0 }, { 1,0 },
	{ 0,1 }, { 0,0 }, { 1,0 },
	{ 0,1 }, { 1,0 }, { 1,1 },

	{ 0,1 }, { 0,0 }, { 1,0 },
	{ 0,1 }, { 1,0 }, { 1,1 },
	{ 1,0 }, { 1,1 }, { 0,1 },
	{ 1,0 }, { 0,1 }, { 0,0 },
	{ 1,0 }, { 1,1 }, { 0,0 },
	{ 1,1 }, { 0,1 }, { 0,0 },
	{ 1,0 }, { 1,1 }, { 0,0 },
	{ 1,1 }, { 0,1 }, { 0,0 },
	{ 1,1 }, { 0,1 }, { 1,0 },
	{ 0,1 }, { 0,0 }, { 1,0 },
	{ 0,1 }, { 0,0 }, { 1,0 },
	{ 0,1 }, { 1,0 }, { 1,1 },

	{ 0,1 }, { 0,0 }, { 1,0 },
	{ 0,1 }, { 1,0 }, { 1,1 },
	{ 1,0 }, { 1,1 }, { 0,1 },
	{ 1,0 }, { 0,1 }, { 0,0 },
	{ 1,0 }, { 1,1 }, { 0,0 },
	{ 1,1 }, { 0,1 }, { 0,0 },
	{ 1,0 }, { 1,1 }, { 0,0 },
	{ 1,1 }, { 0,1 }, { 0,0 },
	{ 1,1 }, { 0,1 }, { 1,0 },
	{ 0,1 }, { 0,0 }, { 1,0 },
	{ 0,1 }, { 0,0 }, { 1,0 },
	{ 0,1 }, { 1,0 }, { 1,1 },

	{ 0,1 }, { 0,0 }, { 1,0 },
	{ 0,1 }, { 1,0 }, { 1,1 },
	{ 1,0 }, { 1,1 }, { 0,1 },
	{ 1,0 }, { 0,1 }, { 0,0 },
	{ 1,0 }, { 1,1 }, { 0,0 },
	{ 1,1 }, { 0,1 }, { 0,0 },
	{ 1,0 }, { 1,1 }, { 0,0 },
	{ 1,1 }, { 0,1 }, { 0,0 },
	{ 1,1 }, { 0,1 }, { 1,0 },
	{ 0,1 }, { 0,0 }, { 1,0 },
	{ 0,1 }, { 0,0 }, { 1,0 },
	{ 0,1 }, { 1,0 }, { 1,1 },

	{ 0,1 }, { 0,0 }, { 1,0 },
	{ 0,1 }, { 1,0 }, { 1,1 },
	{ 1,0 }, { 1,1 }, { 0,1 },
	{ 1,0 }, { 0,1 }, { 0,0 },
	{ 1,0 }, { 1,1 }, { 0,0 },
	{ 1,1 }, { 0,1 }, { 0,0 },
	{ 1,0 }, { 1,1 }, { 0,0 },
	{ 1,1 }, { 0,1 }, { 0,0 },
	{ 1,1 }, { 0,1 }, { 1,0 },
	{ 0,1 }, { 0,0 }, { 1,0 },
	{ 0,1 }, { 0,0 }, { 1,0 },
	{ 0,1 }, { 1,0 }, { 1,1 },

	{ 0,1 }, { 0,0 }, { 1,0 },
	{ 0,1 }, { 1,0 }, { 1,1 },
	{ 1,0 }, { 1,1 }, { 0,1 },
	{ 1,0 }, { 0,1 }, { 0,0 },
	{ 1,0 }, { 1,1 }, { 0,0 },
	{ 1,1 }, { 0,1 }, { 0,0 },
	{ 1,0 }, { 1,1 }, { 0,0 },
	{ 1,1 }, { 0,1 }, { 0,0 },
	{ 1,1 }, { 0,1 }, { 1,0 },
	{ 0,1 }, { 0,0 }, { 1,0 },
	{ 0,1 }, { 0,0 }, { 1,0 },
	{ 0,1 }, { 1,0 }, { 1,1 },
};


GLfloat playerCUBE[36][3] = {
	//0x0
	{0.5,1,-0.5},
	{0.5,0,-0.5},
	{-0.5,0,-0.5},
	{0.5,1,-0.5},
	{-0.5,0,-0.5},
	{-0.5,1,-0.5},
	{0.5,0,-0.5},
	{0.5,0,0.5},
	{-0.5,0,0.5},
	{0.5,0,-0.5},
	{-0.5,0,0.5},
	{-0.5,0,-0.5},
	{-0.5,0,0.5},
	{-0.5,1,0.5},
	{-0.5,1,-0.5},
	{-0.5,0,0.5},
	{-0.5,1,-0.5},
	{-0.5,0,-0.5},
	{0.5,0,-0.5},
	{0.5,1,-0.5},
	{0.5,0,0.5},
	{0.5,1,-0.5},
	{0.5,1,0.5},
	{0.5,0,0.5},
	{0.5,0,0.5},
	{0.5,1,0.5},
	{-0.5,0,0.5},
	{0.5,1,0.5},
	{-0.5,1,0.5},
	{-0.5,0,0.5},
	{0.5,1,-0.5},
	{-0.5,1,-0.5},
	{0.5,1,0.5},
	{-0.5,1,-0.5},
	{-0.5,1,0.5},
	{0.5,1,0.5},
};
GLfloat playerColor[36][3] = {

	{0,0,1}, //5
	{1,0,0}, //1
	{0,1,0}, //4
	{0,0,1}, //5
	{0,1,0}, //4
	{1,0.4,0}, //8
	{1,0,0},  //1
	{1,1,0},  //2
	{0.62,0.12,0.94},  //3
	{1,0,0},//1
	{0.62,0.12,0.94}, //3
	{0,1,0}, //4
	{0.62,0.12,0.94}, //3
	{1,0.75,0.8}, //7
	{1,0.4,0},//8
	{0.62,0.12,0.94}, //3
	{1,0.4,0},//8
	{0.62,0.12,0.94},//3
	{1,0,0},//1
	{0,0,1},//5
	{1,1,0},  //2
	{0,0,1},//5
	{0.5,0.8,0.9}, //6
	{0,1,0}, //4
	{0,0.5,0.5}, //2
	{0.5,0.8,0.9}, //6
	{0.62,0.12,0.94}, //3
	{0.5,0.8,0.9},//6
	{1,0.75,0.8},//7

	{1,1,0},  //2
	{0,0,1},//5
	{1,0.4,0},//8
	{0.5,0.8,0.9},//6
	{1,0.4,0},//8
	{1,0.75,0.8},//7
	{0.5,1,0.5},//6
};



GLfloat UpdownCUBE1[36][3] = {
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},

	//{1,1,-1},
	//{1,0,-1},
	//{-1,0,-1},
	//{1,1,-1},
	//{-1,0,-1},
	//{-1,1,-1},
	//{1,0,-1},
	//{1,0,1},
	//{-1,0,1},
	//{1,0,-1},
	//{-1,0,1},
	//{-1,0,-1},
	//{-1,0,1},
	//{-1,1,1},
	//{-1,1,-1},
	//{-1,0,1},
	//{-1,1,-1},
	//{-1,0,-1},
	//{1,0,-1},
	//{1,1,-1},
	//{1,0,1},
	//{1,1,-1},
	//{1,1,1},
	//{1,0,1},
	//{1,0,1},
	//{1,1,1},
	//{-1,0,1},
	//{1,1,1},
	//{-1,1,1},
	//{-1,0,1},
	//{1,1,-1},
	//{-1,1,-1},
	//{1,1,1},
	//{-1,1,-1},
	//{-1,1,1},
	//{1,1,1},
};

GLfloat GasterColor[720][3] = { //노란색의 보색 넣어야 할듯? // 
	
		{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
		{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
		{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 }





};

GLfloat UpdownColor1[180][3] = {
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
		{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
		{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },



};

GLfloat sideColor1[144][3] = {
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
		{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
		{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },
	{ 1,0.98,0.98 },



};

GLfloat UpdownCUBE2[36][3] = {
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},

	//{1,2,-1},
	//{1,1,-1},
	//{-1,1,-1},
	//{1,2,-1},
	//{-1,1,-1},
	//{-1,2,-1},
	//{1,1,-1},
	//{1,1,1},
	//{-1,1,1},
	//{1,1,-1},
	//{-1,1,1},
	//{-1,1,-1},
	//{-1,1,1},
	//{-1,2,1},
	//{-1,2,-1},
	//{-1,1,1},
	//{-1,2,-1},
	//{-1,1,-1},
	//{1,1,-1},
	//{1,2,-1},
	//{1,1,1},
	//{1,2,-1},
	//{1,2,1},
	//{1,1,1},
	//{1,1,1},
	//{1,2,1},
	//{-1,1,1},
	//{1,2,1},
	//{-1,2,1},
	//{-1,1,1},
	//{1,2,-1},
	//{-1,2,-1},
	//{1,2,1},
	//{-1,2,-1},
	//{-1,2,1},
	//{1,2,1},
};

GLfloat UpdownCUBE3[36][3] = {
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},

	//{1,3,-1},
	//{1,2,-1},
	//{-1,2,-1},
	//{1,3,-1},
	//{-1,2,-1},
	//{-1,3,-1},
	//{1,2,-1},
	//{1,2,1},
	//{-1,2,1},
	//{1,2,-1},
	//{-1,2,1},
	//{-1,2,-1},
	//{-1,2,1},
	//{-1,3,1},
	//{-1,3,-1},
	//{-1,2,1},
	//{-1,3,-1},
	//{-1,2,-1},
	//{1,2,-1},
	//{1,3,-1},
	//{1,2,1},
	//{1,3,-1},
	//{1,3,1},
	//{1,2,1},
	//{1,2,1},
	//{1,3,1},
	//{-1,2,1},
	//{1,3,1},
	//{-1,3,1},
	//{-1,2,1},
	//{1,3,-1},
	//{-1,3,-1},
	//{1,3,1},
	//{-1,3,-1},
	//{-1,3,1},
	//{1,3,1},
};


GLfloat UpdownCUBE4[36][3] = {
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},

	
	//{1,4,-1},
	//{1,3,-1},
	//{-1,3,-1},
	//{1,4,-1},
	//{-1,3,-1},
	//{-1,4,-1},
	//{1,3,-1},
	//{1,3,1},
	//{-1,3,1},
	//{1,3,-1},
	//{-1,3,1},
	//{-1,3,-1},
	//{-1,3,1},
	//{-1,4,1},
	//{-1,4,-1},
	//{-1,3,1},
	//{-1,4,-1},
	//{-1,3,-1},
	//{1,3,-1},
	//{1,4,-1},
	//{1,3,1},
	//{1,4,-1},
	//{1,4,1},
	//{1,3,1},
	//{1,3,1},
	//{1,4,1},
	//{-1,3,1},
	//{1,4,1},
	//{-1,4,1},
	//{-1,3,1},
	//{1,4,-1},
	//{-1,4,-1},
	//{1,4,1},
	//{-1,4,-1},
	//{-1,4,1},
	//{1,4,1},
};


GLfloat UpdownCUBE5[36][3] = {
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	
	//{1,5,-1},
	//{1,4,-1},
	//{-1,4,-1},
	//{1,5,-1},
	//{-1,4,-1},
	//{-1,5,-1},
	//{1,4,-1},
	//{1,4,1},
	//{-1,4,1},
	//{1,4,-1},
	//{-1,4,1},
	//{-1,4,-1},
	//{-1,4,1},
	//{-1,5,1},
	//{-1,5,-1},
	//{-1,4,1},
	//{-1,5,-1},
	//{-1,4,-1},
	//{1,4,-1},
	//{1,5,-1},
	//{1,4,1},
	//{1,5,-1},
	//{1,5,1},
	//{1,4,1},
	//{1,4,1},
	//{1,5,1},
	//{-1,4,1},
	//{1,5,1},
	//{-1,5,1},
	//{-1,4,1},
	//{1,5,-1},
	//{-1,5,-1},
	//{1,5,1},
	//{-1,5,-1},
	//{-1,5,1},
	//{1,5,1},
};

GLfloat sideupCUBE1[36][3] = {
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	// 예시
	//{-3,2,-5},
	//{-3,0,-5},
	//{-5,0,-5},
	//{-3,2,-5},
	//{-5,0,-5},
	//{-5,2,-5},
	//{-3,0,-5},
	//{-3,0,5},
	//{-5,0,5},
	//{-3,0,-5},
	//{-5,0,5},
	//{-5,0,-5},
	//{-5,0,5},
	//{-5,2,5},
	//{-5,2,-5},
	//{-5,0,5},
	//{-5,2,-5},
	//{-5,0,-5},
	//{-3,0,-5},
	//{-3,2,-5},
	//{-3,0,5},
	//{-3,2,-5},
	//{-3,2,5},
	//{-3,0,5},
	//{-3,0,5},
	//{-3,2,5},
	//{-5,0,5},
	//{-3,2,5},
	//{-5,2,5},
	//{-5,0,5},
	//{-3,2,-5},
	//{-5,2,-5},
	//{-3,2,5},
	//{-5,2,-5},
	//{-5,2,5},
	//{-3,2,5},
};

GLfloat sideupCUBE2[36][3] = {
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	//{3,2,-5},
	//{3,0,-5},
	//{1,0,-5},
	//{3,2,-5},
	//{1,0,-5},
	//{1,2,-5},
	//{3,0,-5},
	//{3,0,5},
	//{1,0,5},
	//{3,0,-5},
	//{1,0,5},
	//{1,0,-5},
	//{1,0,5},
	//{1,2,5},
	//{1,2,-5},
	//{1,0,5},
	//{1,2,-5},
	//{1,0,-5},
	//{3,0,-5},
	//{3,2,-5},
	//{3,0,5},
	//{3,2,-5},
	//{3,2,5},
	//{3,0,5},
	//{3,0,5},
	//{3,2,5},
	//{1,0,5},
	//{3,2,5},
	//{1,2,5},
	//{1,0,5},
	//{3,2,-5},
	//{1,2,-5},
	//{3,2,5},
	//{1,2,-5},
	//{1,2,5},
	//{3,2,5},
};

GLfloat sideleftCUBE1[36][3] = {
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	//{5,2,-5},
	//{5,0,-5},
	//{-5,0,-5},
	//{5,2,-5},
	//{-5,0,-5},
	//{-5,2,-5},
	//{5,0,-5},
	//{5,0,-3},
	//{-5,0,-3},
	//{5,0,-5},
	//{-5,0,-3},
	//{5,0,-5},
	//{-5,0,-3},
	//{-5,2,-3},
	//{-5,2,-5},
	//{-5,0,-3},
	//{-5,2,-5},
	//{-5,0,-5},
	//{5,0,-5},
	//{5,2,-5},
	//{5,0,-3},
	//{5,2,-5},
	//{5,2,-3},
	//{5,0,-3},
	//{5,0,-3},
	//{5,2,-3},
	//{-5,0,-3},
	//{5,2,-3},
	//{-5,2,-3},
	//{-5,0,-3},
	//{5,2,-5},
	//{-5,2,-5},
	//{5,2,-3},
	//{-5,2,-5},
	//{-5,2,-3},
	//{5,2,-3},
};


GLfloat sideleftCUBE2[36][3] = {
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},

	//{5,2,-1},
	//{5,0,-1},
	//{-5,0,-1},
	//{5,2,-1},
	//{-5,0,-1},
	//{-5,2,-1},
	//{5,0,-1},
	//{5,0,1},
	//{-5,0,1},
	//{5,0,-1},
	//{-5,0,1},
	//{5,0,-1},
	//{-5,0,1},
	//{-5,2,1},
	//{-5,2,-1},
	//{-5,0,1},
	//{-5,2,-1},
	//{-5,0,-1},
	//{5,0,-1},
	//{5,2,-1},
	//{5,0,1},
	//{5,2,-1},
	//{5,2,1},
	//{5,0,1},
	//{5,0,1},
	//{5,2,1},
	//{-5,0,1},
	//{5,2,1},
	//{-5,2,1},
	//{-5,0,1},
	//{5,2,-1},
	//{-5,2,-1},
	//{5,2,1},
	//{-5,2,-1},
	//{-5,2,1},
	//{5,2,1},
};

GLfloat sideset[36][3] = {
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
};
//바닥
GLfloat Floor[150][3] = {


	//{-5,0,5},{5,0,-5},{-5,0,-5},
	//{-5,0,5},{5,0,5},{5,0,-5},
	// 첫째 줄
	{-5,0,-3},{-3,0,-5},{-5,0,-5},
	{-5,0,-3},{-3,0,-3},{-3,0,-5},
	{-3,0,-3},{-1,0,-5},{-3,0,-5},
	{-3,0,-3},{-1,0,-3},{-1,0,-5},
	{-1,0,-3},{1,0,-5},{-1,0,-5},
	{-1,0,-3},{1,0,-3},{1,0,-5},
	{1,0,-3},{3,0,-5},{1,0,-5},
	{1,0,-3},{3,0,-3},{3,0,-5},
	{3,0,-3},{5,0,-5},{3,0,-5},
	{3,0,-3},{5,0,-3},{5,0,-5},

	// 두번째 줄
	{-5,0,-1},{-3,0,-3},{-5,0,-3},
	{-5,0,-1},{-3,0,-1},{-3,0,-3},
	{-3,0,-1},{-1,0,-3},{-3,0,-3},
	{-3,0,-1},{-1,0,-1},{-1,0,-3},
	{-1,0,-1},{1,0,-3},{-1,0,-3},
	{-1,0,-1},{1,0,-1},{1,0,-3},
	{1,0,-1},{3,0,-3},{1,0,-3},
	{1,0,-1},{3,0,-1},{3,0,-3},
	{3,0,-1},{5,0,-3},{3,0,-3},
	{3,0,-1},{5,0,-1},{5,0,-3},

	// 세번째 줄
	{-5,0,1},{-3,0,-1},{-5,0,-1},
	{-5,0,1},{-3,0,1},{-3,0,-1},
	{-3,0,1},{-1,0,-1},{-3,0,-1},
	{-3,0,1},{-1,0,1},{-1,0,-1},
	{-1,0,1},{1,0,-1},{-1,0,-1},
	{-1,0,1},{1,0,1},{1,0,-1},
	{1,0,1},{3,0,-1},{1,0,-1},
	{1,0,1},{3,0,1},{3,0,-1},
	{3,0,1},{5,0,-1},{3,0,-1},
	{3,0,1},{5,0,1},{5,0,-1},

	// 네번째 줄
	{-5,0,3},{-3,0,1},{-5,0,1},
	{-5,0,3},{-3,0,3},{-3,0,1},
	{-3,0,3},{-1,0,1},{-3,0,1},
	{-3,0,3},{-1,0,3},{-1,0,1},
	{-1,0,3},{1,0,1},{-1,0,1},
	{-1,0,3},{1,0,3},{1,0,1},
	{1,0,3},{3,0,1},{1,0,1},
	{1,0,3},{3,0,3},{3,0,1},
	{3,0,3},{5,0,1},{3,0,1},
	{3,0,3},{5,0,3},{5,0,1},



	// 다섯번째 줄
	{-5,0,5},{-3,0,3},{-5,0,3},
	{-5,0,5},{-3,0,5},{-3,0,3},
	{-3,0,5},{-1,0,3},{-3,0,3},
	{-3,0,5},{-1,0,5},{-1,0,3},
	{-1,0,5},{1,0,3},{-1,0,3},
	{-1,0,5},{1,0,5},{1,0,3},
	{1,0,5},{3,0,3},{1,0,3},
	{1,0,5},{3,0,5},{3,0,3},
	{3,0,5},{5,0,3},{3,0,3},
	{3,0,5},{5,0,5},{5,0,3},



};
//바닥 색깔
GLfloat Floor_Color[150][3] = {

	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
		{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
		{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},


	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
		{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},


		{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
		{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
		{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},


	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{ 0.82,0.82,0.82 },
	{ 0.82,0.82,0.82 },
	{ 0.82,0.82,0.82 },
	{ 0.82,0.82,0.82 },
	{ 0.82,0.82,0.82 },
	{ 0.82,0.82,0.82 },
		{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{ 0.82,0.82,0.82 },
	{ 0.82,0.82,0.82 },
	{ 0.82,0.82,0.82 },
	{ 0.82,0.82,0.82 },
	{ 0.82,0.82,0.82 },
	{ 0.82,0.82,0.82 },


			{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{ 0.82,0.82,0.82 },
	{ 0.82,0.82,0.82 },
	{ 0.82,0.82,0.82 },
	{ 0.82,0.82,0.82 },
	{ 0.82,0.82,0.82 },
	{ 0.82,0.82,0.82 },
		{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
		{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},


};

//바닥 색깔 Copy
GLfloat Floor_Color_Copy[150][3] = {

	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
		{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
		{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},


	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
		{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},


		{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
		{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
		{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},


	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{ 0.82,0.82,0.82 },
	{ 0.82,0.82,0.82 },
	{ 0.82,0.82,0.82 },
	{ 0.82,0.82,0.82 },
	{ 0.82,0.82,0.82 },
	{ 0.82,0.82,0.82 },
		{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{ 0.82,0.82,0.82 },
	{ 0.82,0.82,0.82 },
	{ 0.82,0.82,0.82 },
	{ 0.82,0.82,0.82 },
	{ 0.82,0.82,0.82 },
	{ 0.82,0.82,0.82 },


			{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{ 0.82,0.82,0.82 },
	{ 0.82,0.82,0.82 },
	{ 0.82,0.82,0.82 },
	{ 0.82,0.82,0.82 },
	{ 0.82,0.82,0.82 },
	{ 0.82,0.82,0.82 },
		{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
		{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},


};
GLfloat Floor_Color_Copy2[150][3] = {

	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
		{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
		{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},


	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
		{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},


		{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
		{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
		{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},


	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{ 0.82,0.82,0.82 },
	{ 0.82,0.82,0.82 },
	{ 0.82,0.82,0.82 },
	{ 0.82,0.82,0.82 },
	{ 0.82,0.82,0.82 },
	{ 0.82,0.82,0.82 },
		{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{ 0.82,0.82,0.82 },
	{ 0.82,0.82,0.82 },
	{ 0.82,0.82,0.82 },
	{ 0.82,0.82,0.82 },
	{ 0.82,0.82,0.82 },
	{ 0.82,0.82,0.82 },


			{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{ 0.82,0.82,0.82 },
	{ 0.82,0.82,0.82 },
	{ 0.82,0.82,0.82 },
	{ 0.82,0.82,0.82 },
	{ 0.82,0.82,0.82 },
	{ 0.82,0.82,0.82 },
		{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
	{0.82,0.82,0.82},
		{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},
	{1,0.98,0.98},


};
GLfloat yellowCUBE1[36][3] = {
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
};
GLfloat yellowCUBE2[36][3] = {
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
};
GLfloat yellowCUBE3[36][3] = {
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
};
GLfloat yellowCUBE4[36][3] = {
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
};
GLfloat yellowCUBE5[36][3] = {
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
};

GLfloat yellowCUBE6[36][3] = { // 가운데에서 움직이는 큐브
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
		{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
	{20,20,20},
};

GLfloat yellowCUBE_Color[216][3] = {
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
		{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
		{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{1.0,1.0,0.0},
	{ 1.0,1.0,0.0 },
	{ 1.0,1.0,0.0 },
	{ 1.0,1.0,0.0 },
	{ 1.0,1.0,0.0 },
	{ 1.0,1.0,0.0 },
	{ 1.0,1.0,0.0 },
	{ 1.0,1.0,0.0 },
	{ 1.0,1.0,0.0 },
	{ 1.0,1.0,0.0 },
	{ 1.0,1.0,0.0 },
	{ 1.0,1.0,0.0 },
	{ 1.0,1.0,0.0 },
	{ 1.0,1.0,0.0 },
	{ 1.0,1.0,0.0 },
	{ 1.0,1.0,0.0 },
	{ 1.0,1.0,0.0 },
	{ 1.0,1.0,0.0 },
	{ 1.0,1.0,0.0 },
	{ 1.0,1.0,0.0 },
	{ 1.0,1.0,0.0 },
	{ 1.0,1.0,0.0 },
	{ 1.0,1.0,0.0 },
	{ 1.0,1.0,0.0 },
	{ 1.0,1.0,0.0 },
	{ 1.0,1.0,0.0 },
	{ 1.0,1.0,0.0 },
	{ 1.0,1.0,0.0 },
	{ 1.0,1.0,0.0 },
	{ 1.0,1.0,0.0 },
	{ 1.0,1.0,0.0 },
	{ 1.0,1.0,0.0 },
	{ 1.0,1.0,0.0 },
	{ 1.0,1.0,0.0 },
	{ 1.0,1.0,0.0 },
	{ 1.0,1.0,0.0 },
	{ 1.0,1.0,0.0 },
	{ 1.0,1.0,0.0 },
	{ 1.0,1.0,0.0 },
	{ 1.0,1.0,0.0 },
	{ 1.0,1.0,0.0 },
	{ 1.0,1.0,0.0 },
	{ 1.0,1.0,0.0 },
	{ 1.0,1.0,0.0 },
	{ 1.0,1.0,0.0 },
	{ 1.0,1.0,0.0 },
	{ 1.0,1.0,0.0 },
	{ 1.0,1.0,0.0 },
	{ 1.0,1.0,0.0 },
	{ 1.0,1.0,0.0 },
	{ 1.0,1.0,0.0 },
	{ 1.0,1.0,0.0 },
	{ 1.0,1.0,0.0 },
	{ 1.0,1.0,0.0 },
	{ 1.0,1.0,0.0 },
	{ 1.0,1.0,0.0 },
	{ 1.0,1.0,0.0 },
	{ 1.0,1.0,0.0 },
	{ 1.0,1.0,0.0 },
	{ 1.0,1.0,0.0 },
	{ 1.0,1.0,0.0 },
	{ 1.0,1.0,0.0 },
	{ 1.0,1.0,0.0 },
	{ 1.0,1.0,0.0 },
	{ 1.0,1.0,0.0 },
	{ 1.0,1.0,0.0 },
	{ 1.0,1.0,0.0 },
	{ 1.0,1.0,0.0 },
	{ 1.0,1.0,0.0 },
	{ 1.0,1.0,0.0 },
	{ 1.0,1.0,0.0 },
	{ 1.0,1.0,0.0 },
	{ 1.0,1.0,0.0 },
			{1.0,0.84,0.0},
	{1.0,0.84,0.0},
	{1.0,0.84,0.0},
	{1.0,0.84,0.0},
	{1.0,0.84,0.0},
	{1.0,0.84,0.0},
	{ 1.0,0.84,0.0 },
	{ 1.0,0.84,0.0 },
	{ 1.0,0.84,0.0 },
	{ 1.0,0.84,0.0 },
	{ 1.0,0.84,0.0 },
	{ 1.0,0.84,0.0 },
	{ 1.0,0.84,0.0 },
	{ 1.0,0.84,0.0 },
	{ 1.0,0.84,0.0 },
	{ 1.0,0.84,0.0 },
	{ 1.0,0.84,0.0 },
	{ 1.0,0.84,0.0 },
	{ 1.0,0.84,0.0 },
	{ 1.0,0.84,0.0 },
	{ 1.0,0.84,0.0 },
	{ 1.0,0.84,0.0 },
	{ 1.0,0.84,0.0 },
	{ 1.0,0.84,0.0 },
	{ 1.0,0.84,0.0 },
	{ 1.0,0.84,0.0 },
	{ 1.0,0.84,0.0 },
	{ 1.0,0.84,0.0 },
	{ 1.0,0.84,0.0 },
	{ 1.0,0.84,0.0 },
	{ 1.0,0.84,0.0 },
	{ 1.0,0.84,0.0 },
	{ 1.0,0.84,0.0 },
	{ 1.0,0.84,0.0 },
	{ 1.0,0.84,0.0 },
	{ 1.0,0.84,0.0 },


};

//--------------------------------------------------------------------------------
// 미리 위치 만들어놓는 것

          //(행)x(열)
GLfloat array5x1[36][3] = {
	{-3,6,-5},
	{-3,4,-5},
	{-5,4,-5},
	{-3,6,-5},
	{-5,4,-5},
	{-5,6,-5},
	{-3,4,-5},
	{-3,4,5},
	{-5,4,5},
	{-3,4,-5},
	{-5,4,5},
	{-5,4,-5},
	{-5,4,5},
	{-5,6,5},
	{-5,6,-5},
	{-5,4,5},
	{-5,6,-5},
	{-5,4,-5},
	{-3,4,-5},
	{-3,6,-5},
	{-3,4,5},
	{-3,6,-5},
	{-3,6,5},
	{-3,4,5},
	{-3,4,5},
	{-3,6,5},
	{-5,4,5},
	{-3,6,5},
	{-5,6,5},
	{-5,4,5},
	{-3,6,-5},
	{-5,6,-5},
	{-3,6,5},
	{-5,6,-5},
	{-5,6,5},
	{-3,6,5},
};
GLfloat array5x2[36][3] = {
	{-1,6,-5},
	{-1,4,-5},
	{-3,4,-5},
	{-1,6,-5},
	{-3,4,-5},
	{-3,6,-5},
	{-1,4,-5},
	{-1,4,5},
	{-3,4,5},
	{-1,4,-5},
	{-3,4,5},
	{-3,4,-5},
	{-3,4,5},
	{-3,6,5},
	{-3,6,-5},
	{-3,4,5},
	{-3,6,-5},
	{-3,4,-5},
	{-1,4,-5},
	{-1,6,-5},
	{-1,4,5},
	{-1,6,-5},
	{-1,6,5},
	{-1,4,5},
	{-1,4,5},
	{-1,6,5},
	{-3,4,5},
	{-1,6,5},
	{-3,6,5},
	{-3,4,5},
	{-1,6,-5},
	{-3,6,-5},
	{-1,6,5},
	{-3,6,-5},
	{-3,6,5},
	{-1,6,5},
};
GLfloat array5x3[36][3] = {
	{1,6,-5},
	{1,4,-5},
	{-1,4,-5},
	{1,6,-5},
	{-1,4,-5},
	{-1,6,-5},
	{1,4,-5},
	{1,4,5},
	{-1,4,5},
	{1,4,-5},
	{-1,4,5},
	{-1,4,-5},
	{-1,4,5},
	{-1,6,5},
	{-1,6,-5},
	{-1,4,5},
	{-1,6,-5},
	{-1,4,-5},
	{1,4,-5},
	{1,6,-5},
	{1,4,5},
	{1,6,-5},
	{1,6,5},
	{1,4,5},
	{1,4,5},
	{1,6,5},
	{-1,4,5},
	{1,6,5},
	{-1,6,5},
	{-1,4,5},
	{1,6,-5},
	{-1,6,-5},
	{1,6,5},
	{-1,6,-5},
	{-1,6,5},
	{1,6,5},
};
GLfloat array5x4[36][3] = {
	{3,6,-5},
	{3,4,-5},
	{1,4,-5},
	{3,6,-5},
	{1,4,-5},
	{1,6,-5},
	{3,4,-5},
	{3,4,5},
	{1,4,5},
	{3,4,-5},
	{1,4,5},
	{1,4,-5},
	{1,4,5},
	{1,6,5},
	{1,6,-5},
	{1,4,5},
	{1,6,-5},
	{1,4,-5},
	{3,4,-5},
	{3,6,-5},
	{3,4,5},
	{3,6,-5},
	{3,6,5},
	{3,4,5},
	{3,4,5},
	{3,6,5},
	{1,4,5},
	{3,6,5},
	{1,6,5},
	{1,4,5},
	{3,6,-5},
	{1,6,-5},
	{3,6,5},
	{1,6,-5},
	{1,6,5},
	{3,6,5},
};
GLfloat array5x5[36][3] = {
	{5,6,-5},
	{5,4,-5},
	{3,4,-5},
	{5,6,-5},
	{3,4,-5},
	{3,6,-5},
	{5,4,-5},
	{5,4,5},
	{3,4,5},
	{5,4,-5},
	{3,4,5},
	{3,4,-5},
	{3,4,5},
	{3,6,5},
	{3,6,-5},
	{3,4,5},
	{3,6,-5},
	{3,4,-5},
	{5,4,-5},
	{5,6,-5},
	{5,4,5},
	{5,6,-5},
	{5,6,5},
	{5,4,5},
	{5,4,5},
	{5,6,5},
	{3,4,5},
	{5,6,5},
	{3,6,5},
	{3,4,5},
	{5,6,-5},
	{3,6,-5},
	{5,6,5},
	{3,6,-5},
	{3,6,5},
	{5,6,5},
};


GLfloat Go1[36][3] = {
	{5,6,-5},
	{5,4,-5},
	{-5,4,-5},
	{5,6,-5},
	{-5,4,-5},
	{-5,6,-5},
	{5,4,-5},
	{5,4,-3},
	{-5,4,-3},
	{5,4,-5},
	{-5,4,-3},
	{-5,4,-5},
	{-5,4,-3},
	{-5,6,-3},
	{-5,6,-5},
	{-5,4,-3},
	{-5,6,-5},
	{-5,4,-5},
	{5,4,-5},
	{5,6,-5},
	{5,4,-3},
	{5,6,-5},
	{5,6,-3},
	{5,4,-3},
	{5,4,-3},
	{5,6,-3},
	{-5,4,-3},
	{5,6,-3},
	{-5,6,-3},
	{-5,4,-3},
	{5,6,-5},
	{-5,6,-5},
	{5,6,-3},
	{-5,6,-5},
	{-5,6,-3},
	{5,6,-3},
};

GLfloat Good_D1[36][3] = {
	{3,6,-5},
	{3,4,-5},
	{-5,4,-5},
	{3,6,-5},
	{-5,4,-5},
	{-5,6,-5},
	{3,4,-5},
	{3,4,-3},
	{-5,4,-3},
	{3,4,-5},
	{-5,4,-3},
	{-5,4,-5},
	{-5,4,-3},
	{-5,6,-3},
	{-5,6,-5},
	{-5,4,-3},
	{-5,6,-5},
	{-5,4,-5},
	{3,4,-5},
	{3,6,-5},
	{3,4,-3},
	{3,6,-5},
	{3,6,-3},
	{3,4,-3},
	{3,4,-3},
	{3,6,-3},
	{-5,4,-3},
	{3,6,-3},
	{-5,6,-3},
	{-5,4,-3},
	{3,6,-5},
	{-5,6,-5},
	{3,6,-3},
	{-5,6,-5},
	{-5,6,-3},
	{3,6,-3},
};

GLfloat Good_D3[36][3] = {
	{3,6,3},
	{3,4,3},
	{-5,4,3},
	{3,6,3},
	{-5,4,3},
	{-5,6,3},
	{3,4,3},
	{3,4,5},
	{-5,4,5},
	{3,4,3},
	{-5,4,5},
	{-5,4,3},
	{-5,4,5},
	{-5,6,5},
	{-5,6,3},
	{-5,4,5},
	{-5,6,3},
	{-5,4,3},
	{3,4,3},
	{3,6,3},
	{3,4,5},
	{3,6,3},
	{3,6,5},
	{3,4,5},
	{3,4,5},
	{3,6,5},
	{-5,4,5},
	{3,6,5},
	{-5,6,5},
	{-5,4,5},
	{3,6,3},
	{-5,6,3},
	{3,6,5},
	{-5,6,3},
	{-5,6,5},
	{3,6,5},
};

GLfloat Good_D4[36][3] = {
	{5,6,-3},
	{5,4,-3},
	{3,4,-3},
	{5,6,-3},
	{3,4,-3},
	{3,6,-3},
	{5,4,-3},
	{5,4,3},
	{3,4,3},
	{5,4,-3},
	{3,4,3},
	{3,4,-3},
	{3,4,3},
	{3,6,3},
	{3,6,-3},
	{3,4,3},
	{3,6,-3},
	{3,4,-3},
	{5,4,-3},
	{5,6,-3},
	{5,4,3},
	{5,6,-3},
	{5,6,3},
	{5,4,3},
	{5,4,3},
	{5,6,3},
	{3,4,3},
	{5,6,3},
	{3,6,3},
	{3,4,3},
	{5,6,-3},
	{3,6,-3},
	{5,6,3},
	{3,6,-3},
	{3,6,3},
	{5,6,3},
};

GLfloat Go3[36][3] = {
	{5,6,3},
	{5,4,3},
	{-5,4,3},
	{5,6,3},
	{-5,4,3},
	{-5,6,3},
	{5,4,3},
	{5,4,5},
	{-5,4,5},
	{5,4,3},
	{-5,4,5},
	{-5,4,3},
	{-5,4,5},
	{-5,6,5},
	{-5,6,3},
	{-5,4,5},
	{-5,6,3},
	{-5,4,3},
	{5,4,3},
	{5,6,3},
	{5,4,5},
	{5,6,3},
	{5,6,5},
	{5,4,5},
	{5,4,5},
	{5,6,5},
	{-5,4,5},
	{5,6,5},
	{-5,6,5},
	{-5,4,5},
	{5,6,3},
	{-5,6,3},
	{5,6,5},
	{-5,6,3},
	{-5,6,5},
	{5,6,5},
};
GLfloat Go4[36][3] = {
	{5,6,1},
	{5,4,1},
	{3,4,1},
	{5,6,1},
	{3,4,1},
	{3,6,1},
	{5,4,1},
	{5,4,5},
	{3,4,5},
	{5,4,1},
	{3,4,5},
	{3,4,1},
	{3,4,5},
	{3,6,5},
	{3,6,1},
	{3,4,5},
	{3,6,1},
	{3,4,1},
	{5,4,1},
	{5,6,1},
	{5,4,5},
	{5,6,1},
	{5,6,5},
	{5,4,5},
	{5,4,5},
	{5,6,5},
	{3,4,5},
	{5,6,5},
	{3,6,5},
	{3,4,5},
	{5,6,1},
	{3,6,1},
	{5,6,5},
	{3,6,1},
	{3,6,5},
	{5,6,5},
};
GLfloat Go5[36][3] = {
	{5,6,-1},
	{5,4,-1},
	{-1,4,-1},
	{5,6,-1},
	{-1,4,-1},
	{-1,6,-1},
	{5,4,-1},
	{5,4,1},
	{-1,4,1},
	{5,4,-1},
	{-1,4,1},
	{-1,4,-1},
	{-1,4,1},
	{-1,6,1},
	{-1,6,-1},
	{-1,4,1},
	{-1,6,-1},
	{-1,4,-1},
	{5,4,-1},
	{5,6,-1},
	{5,4,1},
	{5,6,-1},
	{5,6,1},
	{5,4,1},
	{5,4,1},
	{5,6,1},
	{-1,4,1},
	{5,6,1},
	{-1,6,1},
	{-1,4,1},
	{5,6,-1},
	{-1,6,-1},
	{5,6,1},
	{-1,6,-1},
	{-1,6,1},
	{5,6,1},
};

GLfloat One_block3x3[36][3] = {
	{1,6,-1},
	{1,4,-1},
	{-1,4,-1},
	{1,6,-1},
	{-1,4,-1},
	{-1,6,-1},
	{1,4,-1},
	{1,4,1},
	{-1,4,1},
	{1,4,-1},
	{-1,4,1},
	{-1,4,-1},
	{-1,4,1},
	{-1,6,1},
	{-1,6,-1},
	{-1,4,1},
	{-1,6,-1},
	{-1,4,-1},
	{1,4,-1},
	{1,6,-1},
	{1,4,1},
	{1,6,-1},
	{1,6,1},
	{1,4,1},
	{1,4,1},
	{1,6,1},
	{-1,4,1},
	{1,6,1},
	{-1,6,1},
	{-1,4,1},
	{1,6,-1},
	{-1,6,-1},
	{1,6,1},
	{-1,6,-1},
	{-1,6,1},
	{1,6,1},
};

GLfloat One_block5x3[36][3] = {
	{1,6,3},
	{1,4,3},
	{-1,4,3},
	{1,6,3},
	{-1,4,3},
	{-1,6,3},
	{1,4,3},
	{1,4,5},
	{-1,4,5},
	{1,4,3},
	{-1,4,5},
	{-1,4,3},
	{-1,4,5},
	{-1,6,5},
	{-1,6,3},
	{-1,4,5},
	{-1,6,3},
	{-1,4,3},
	{1,4,3},
	{1,6,3},
	{1,4,5},
	{1,6,3},
	{1,6,5},
	{1,4,5},
	{1,4,5},
	{1,6,5},
	{-1,4,5},
	{1,6,5},
	{-1,6,5},
	{-1,4,5},
	{1,6,3},
	{-1,6,3},
	{1,6,5},
	{-1,6,3},
	{-1,6,5},
	{1,6,5},
};

GLfloat One_block5x13[36][3] = {
	{1,6,-5},
	{1,4,-5},
	{-1,4,-5},
	{1,6,-5},
	{-1,4,-5},
	{-1,6,-5},
	{1,4,-5},
	{1,4,1},
	{-1,4,1},
	{1,4,-5},
	{-1,4,5},
	{-1,4,-5},
	{-1,4,1},
	{-1,6,1},
	{-1,6,-5},
	{-1,4,1},
	{-1,6,-5},
	{-1,4,-5},
	{1,4,-5},
	{1,6,-5},
	{1,4,1},
	{1,6,-5},
	{1,6,1},
	{1,4,1},
	{1,4,1},
	{1,6,1},
	{-1,4,1},
	{1,6,1},
	{-1,6,1},
	{-1,4,1},
	{1,6,-5},
	{-1,6,-5},
	{1,6,1},
	{-1,6,-5},
	{-1,6,1},
	{1,6,1},
};


GLfloat side_left5x1x2[36][3] = {
	{5,2,-5},
	{5,0,-5},
	{-5,0,-5},
	{5,2,-5},
	{-5,0,-5},
	{-5,2,-5},
	{5,0,-5},
	{5,0,-1},
	{-5,0,-1},
	{5,0,-5},
	{-5,0,-1},
	{-5,0,-5},
	{-5,0,-1},
	{-5,2,-1},
	{-5,2,-5},
	{-5,0,-1},
	{-5,2,-5},
	{-5,0,-5},
	{5,0,-5},
	{5,2,-5},
	{5,0,-1},
	{5,2,-5},
	{5,2,-1},
	{5,0,-1},
	{5,0,-1},
	{5,2,-1},
	{-5,0,-1},
	{5,2,-1},
	{-5,2,-1},
	{-5,0,-1},
	{5,2,-5},
	{-5,2,-5},
	{5,2,-1},
	{-5,2,-5},
	{-5,2,-1},
	{5,2,-1},
};
GLfloat side_left5x4x5[36][3] = {
	{5,2,1},
	{5,0,1},
	{-5,0,1},
	{5,2,1},
	{-5,0,1},
	{-5,2,1},
	{5,0,1},
	{5,0,5},
	{-5,0,5},
	{5,0,1},
	{-5,0,5},
	{-5,0,1},
	{-5,0,5},
	{-5,2,5},
	{-5,2,1},
	{-5,0,5},
	{-5,2,1},
	{-5,0,1},
	{5,0,1},
	{5,2,1},
	{5,0,5},
	{5,2,1},
	{5,2,5},
	{5,0,5},
	{5,0,5},
	{5,2,5},
	{-5,0,5},
	{5,2,5},
	{-5,2,5},
	{-5,0,5},
	{5,2,1},
	{-5,2,1},
	{5,2,5},
	{-5,2,1},
	{-5,2,5},
	{5,2,5},
};

GLfloat side_up5x1x2[36][3] = {
	{-1,2,-5},
	{-1,0,-5},
	{-5,0,-5},
	{-1,2,-5},
	{-5,0,-5},
	{-5,2,-5},
	{-1,0,-5},
	{-1,0,5},
	{-5,0,5},
	{-1,0,-5},
	{-5,0,5},
	{-5,0,-5},
	{-5,0,5},
	{-5,2,5},
	{-5,2,-5},
	{-5,0,5},
	{-5,2,-5},
	{-5,0,-5},
	{-1,0,-5},
	{-1,2,-5},
	{-1,0,5},
	{-1,2,-5},
	{-1,2,5},
	{-1,0,5},
	{-1,0,5},
	{-1,2,5},
	{-5,0,5},
	{-1,2,5},
	{-5,2,5},
	{-5,0,5},
	{-1,2,-5},
	{-5,2,-5},
	{-1,2,5},
	{-5,2,-5},
	{-5,2,5},
	{-1,2,5},
};
GLfloat side_up5x4x5[36][3] = 
{
	{5, 2, -5},
	{ 5,0,-5 },
	{ 1,0,-5 },
	{ 5,2,-5 },
	{ 1,0,-5 },
	{ 1,2,-5 },
	{ 5,0,-5 },
	{ 5,0,5 },
	{ 1,0,5 },
	{ 5,0,-5 },
	{ 1,0,5 },
	{ 1,0,-5 },
	{ 1,0,5 },
	{ 1,2,5 },
	{ 1,2,-5 },
	{ 1,0,5 },
	{ 1,2,-5 },
	{ 1,0,-5 },
	{ 5,0,-5 },
	{ 5,2,-5 },
	{ 5,0,5 },
	{ 5,2,-5 },
	{ 5,2,5 },
	{ 5,0,5 },
	{ 5,0,5 },
	{ 5,2,5 },
	{ 1,0,5 },
	{ 5,2,5 },
	{ 1,2,5 },
	{ 1,0,5 },
	{ 5,2,-5 },
	{ 1,2,-5 },
	{ 5,2,5 },
	{ 1,2,-5 },
	{ 1,2,5 },
	{ 5,2,5 },
};

GLfloat side_left5x1[36][3] = {
	{5,2,-5},
	{5,0,-5},
	{-5,0,-5},
	{5,2,-5},
	{-5,0,-5},
	{-5,2,-5},
	{5,0,-5},
	{5,0,-3},
	{-5,0,-3},
	{5,0,-5},
	{-5,0,-3},
	{-5,0,-5},
	{-5,0,-3},
	{-5,2,-3},
	{-5,2,-5},
	{-5,0,-3},
	{-5,2,-5},
	{-5,0,-5},
	{5,0,-5},
	{5,2,-5},
	{5,0,-3},
	{5,2,-5},
	{5,2,-3},
	{5,0,-3},
	{5,0,-3},
	{5,2,-3},
	{-5,0,-3},
	{5,2,-3},
	{-5,2,-3},
	{-5,0,-3},
	{5,2,-5},
	{-5,2,-5},
	{5,2,-3},
	{-5,2,-5},
	{-5,2,-3},
	{5,2,-3},
};
GLfloat side_left5x2[36][3] = {
	{5,2,-3},
	{5,0,-3},
	{-5,0,-3},
	{5,2,-3},
	{-5,0,-3},
	{-5,2,-3},
	{5,0,-3},
	{5,0,-1},
	{-5,0,-1},
	{5,0,-3},
	{-5,0,-1},
	{-5,0,-3},
	{-5,0,-1},
	{-5,2,-1},
	{-5,2,-3},
	{-5,0,-1},
	{-5,2,-3},
	{-5,0,-3},
	{5,0,-3},
	{5,2,-3},
	{5,0,-1},
	{5,2,-3},
	{5,2,-1},
	{5,0,-1},
	{5,0,-1},
	{5,2,-1},
	{-5,0,-1},
	{5,2,-1},
	{-5,2,-1},
	{-5,0,-1},
	{5,2,-3},
	{-5,2,-3},
	{5,2,-1},
	{-5,2,-3},
	{-5,2,-1},
	{5,2,-1},
};

GLfloat side_left5x3[36][3] = {
	{5,2,-1},
	{5,0,-1},
	{-5,0,-1},
	{5,2,-1},
	{-5,0,-1},
	{-5,2,-1},
	{5,0,-1},
	{5,0,1},
	{-5,0,1},
	{5,0,-1},
	{-5,0,1},
	{-5,0,-1},
	{-5,0,1},
	{-5,2,1},
	{-5,2,-1},
	{-5,0,1},
	{-5,2,-1},
	{-5,0,-1},
	{5,0,-1},
	{5,2,-1},
	{5,0,1},
	{5,2,-1},
	{5,2,1},
	{5,0,1},
	{5,0,1},
	{5,2,1},
	{-5,0,1},
	{5,2,1},
	{-5,2,1},
	{-5,0,1},
	{5,2,-1},
	{-5,2,-1},
	{5,2,1},
	{-5,2,-1},
	{-5,2,1},
	{5,2,1},
};

GLfloat side_left5x4[36][3] = {
	{5,2,1},
	{5,0,1},
	{-5,0,1},
	{5,2,1},
	{-5,0,1},
	{-5,2,1},
	{5,0,1},
	{5,0,3},
	{-5,0,3},
	{5,0,1},
	{-5,0,3},
	{-5,0,1},
	{-5,0,3},
	{-5,2,3},
	{-5,2,1},
	{-5,0,3},
	{-5,2,1},
	{-5,0,1},
	{5,0,1},
	{5,2,1},
	{5,0,3},
	{5,2,1},
	{5,2,3},
	{5,0,3},
	{5,0,3},
	{5,2,3},
	{-5,0,3},
	{5,2,3},
	{-5,2,3},
	{-5,0,3},
	{5,2,1},
	{-5,2,1},
	{5,2,3},
	{-5,2,1},
	{-5,2,3},
	{5,2,3},
};

GLfloat side_left5x5[36][3] = {
	{5,2,3},
	{5,0,3},
	{-5,0,3},
	{5,2,3},
	{-5,0,3},
	{-5,2,3},
	{5,0,3},
	{5,0,5},
	{-5,0,5},
	{5,0,3},
	{-5,0,5},
	{-5,0,3},
	{-5,0,5},
	{-5,2,5},
	{-5,2,3},
	{-5,0,5},
	{-5,2,3},
	{-5,0,3},
	{5,0,3},
	{5,2,3},
	{5,0,5},
	{5,2,3},
	{5,2,5},
	{5,0,5},
	{5,0,5},
	{5,2,5},
	{-5,0,5},
	{5,2,5},
	{-5,2,5},
	{-5,0,5},
	{5,2,3},
	{-5,2,3},
	{5,2,5},
	{-5,2,3},
	{-5,2,5},
	{5,2,5},
};

GLfloat side_up5x1[36][3] =
{
	{-3,2,-5},
	{-3,0.1,-5},
	{-5,0.1,-5},
	{-3,2,-5},
	{-5,0.1,-5},
	{-5,2,-5},
	{-3,0.1,-5},
	{-3,0.1,5},
	{-5,0.1,5},
	{-3,0.1,-5},
	{-5,0.1,5},
	{-5,0.1,-5},
	{-5,0.1,5},
	{-5,2,5},
	{-5,2,-5},
	{-5,0.1,5},
	{-5,2,-5},
	{-5,0.1,-5},
	{-3,0.1,-5},
	{-3,2,-5},
	{-3,0.1,5},
	{-3,2,-5},
	{-3,2,5},
	{-3,0.1,5},
	{-3,0.1,5},
	{-3,2,5},
	{-5,0.1,5},
	{-3,2,5},
	{-5,2,5},
	{-5,0.1,5},
	{-3,2,-5},
	{-5,2,-5},
	{-3,2,5},
	{-5,2,-5},
	{-5,2,5},
	{-3,2,5},
};

GLfloat side_up5x2[36][3] =
{
	{-1,2,-5},
	{-1,0.1,-5},
	{-3,0.1,-5},
	{-1,2,-5},
	{-3,0.1,-5},
	{-3,2,-5},
	{-1,0,-5},
	{-1,0.1,5},
	{-3,0.1,5},
	{-1,0.1,-5},
	{-3,0.1,5},
	{-3,0.1,-5},
	{-3,0.1,5},
	{-3,2,5},
	{-3,2,-5},
	{-3,0.1,5},
	{-3,2,-5},
	{-3,0.1,-5},
	{-1,0.1,-5},
	{-1,2,-5},
	{-1,0.1,5},
	{-1,2,-5},
	{-1,2,5},
	{-1,0.1,5},
	{-1,0,5},
	{-1,2,5},
	{-3,0.1,5},
	{-1,2,5},
	{-3,2,5},
	{-3,0.1,5},
	{-1,2,-5},
	{-3,2,-5},
	{-1,2,5},
	{-3,2,-5},
	{-3,2,5},
	{-3,2,5},
};
GLfloat side_up5x3[36][3] =
{
	{1,2,-5},
	{1,0.1,-5},
	{-1,0.1,-5},
	{1,2,-5},
	{-1,0.1,-5},
	{-1,2,-5},
	{1,0.1,-5},
	{1,0.1,5},
	{-1,0.1,5},
	{1,0.1,-5},
	{-1,0.1,5},
	{-1,0.1,-5},
	{-1,0.1,5},
	{-1,2,5},
	{-1,2,-5},
	{-1,0.1,5},
	{-1,2,-5},
	{-1,0.1,-5},
	{1,0.1,-5},
	{1,2,-5},
	{1,0.1,5},
	{1,2,-5},
	{1,2,5},
	{1,0.1,5},
	{1,0.1,5},
	{1,2,5},
	{-1,0.1,5},
	{1,2,5},
	{-1,2,5},
	{-1,0.1,5},
	{1,2,-5},
	{-1,2,-5},
	{1,2,5},
	{-1,2,-5},
	{-1,2,5},
	{-1,2,5},
};

GLfloat side_up5x4[36][3] =
{
	{3,2,-5},
	{3,0.1,-5},
	{1,0.1,-5},
	{3,2,-5},
	{1,0.1,-5},
	{1,2,-5},
	{3,0.1,-5},
	{3,0.1,5},
	{1,0.1,5},
	{3,0.1,-5},
	{1,0.1,5},
	{1,0.1,-5},
	{1,0.1,5},
	{1,2,5},
	{1,2,-5},
	{1,0.1,5},
	{1,2,-5},
	{1,0.1,-5},
	{3,0.1,-5},
	{3,2,-5},
	{3,0.1,5},
	{3,2,-5},
	{3,2,5},
	{3,0.1,5},
	{3,0.1,5},
	{3,2,5},
	{1,0.1,5},
	{3,2,5},
	{1,2,5},
	{1,0.1,5},
	{3,2,-5},
	{1,2,-5},
	{3,2,5},
	{1,2,-5},
	{1,2,5},
	{1,2,5},
};

GLfloat side_up5x5[36][3] =
{
	{5,2,-5},
	{5,0.1,-5},
	{3,0.1,-5},
	{5,2,-5},
	{3,0.1,5},
	{3,2,-5},
	{5,0.1,-5},
	{5,0.1,5},
	{3,0.1,5},
	{5,0.1,-5},
	{3,0.1,5},
	{3,0.1,-5},
	{3,0.1,5},
	{3,2,5},
	{3,2,-5},
	{3,0.1,5},
	{3,2,-5},
	{3,0.1,-5},
	{5,0.1,-5},
	{5,2,-5},
	{5,0.1,5},
	{5,2,-5},
	{5,2,5},
	{5,0.1,5},
	{5,0.1,5},
	{5,2,5},
	{3,0.1,5},
	{5,2,5},
	{3,2,5},
	{3,0.1,5},
	{5,2,-5},
	{3,2,-5},
	{5,2,5},
	{3,2,-5},
	{3,2,5},
	{3,2,5},
};

GLfloat yellowcube1x1[36][3] =
{
	{-3,2,3},
	{-3,0.1,3},
	{-5,0.1,3},
	{-3,2,3},
	{-5,0.1,5},
	{-5,2,3},
	{-3,0.1,3},
	{-3,0.1,5},
	{-5,0.1,5},
	{-3,0.1,3},
	{-5,0.1,5},
	{-5,0.1,3},
	{-5,0.1,5},
	{-5,2,5},
	{-5,2,3},
	{-5,0.1,5},
	{-5,2,3},
	{-5,0.1,3},
	{-3,0.1,3},
	{-3,2,3},
	{-3,0.1,5},
	{-3,2,3},
	{-3,2,5},
	{-3,0.1,5},
	{-3,0.1,5},
	{-3,2,5},
	{-5,0.1,5},
	{-3,2,5},
	{-5,2,5},
	{-5,0.1,5},
	{-3,2,3},
	{-5,2,3},
	{-3,2,5},
	{-5,2,3},
	{-5,2,5},
	{-5,2,5},
};

GLfloat yellowcube1x2[36][3] =
{
	{-1,2,3},
	{-1,0.1,3},
	{-3,0.1,3},
	{-1,2,3},
	{-3,0.1,5},
	{-3,2,3},
	{-1,0.1,3},
	{-1,0.1,5},
	{-3,0.1,5},
	{-1,0.1,3},
	{-3,0.1,5},
	{-3,0.1,3},
	{-3,0.1,5},
	{-3,2,5},
	{-3,2,3},
	{-3,0.1,5},
	{-3,2,3},
	{-3,0.1,3},
	{-1,0.1,3},
	{-1,2,3},
	{-1,0.1,5},
	{-1,2,3},
	{-1,2,5},
	{-1,0.1,5},
	{-1,0.1,5},
	{-1,2,5},
	{-3,0.1,5},
	{-1,2,5},
	{-3,2,5},
	{-3,0.1,5},
	{-1,2,3},
	{-3,2,3},
	{-1,2,5},
	{-3,2,3},
	{-3,2,5},
	{-3,2,5},
};

GLfloat yellowcube1x3[36][3] =
{
	{1,2,3},
	{1,0.1,3},
	{-1,0.1,3},
	{1,2,3},
	{-1,0.1,5},
	{-1,2,3},
	{1,0.1,3},
	{1,0.1,5},
	{-1,0.1,5},
	{1,0.1,3},
	{-1,0.1,5},
	{-1,0.1,3},
	{-1,0.1,5},
	{-1,2,5},
	{-1,2,3},
	{-1,0.1,5},
	{-1,2,3},
	{-1,0.1,3},
	{1,0.1,3},
	{1,2,3},
	{1,0.1,5},
	{1,2,3},
	{1,2,5},
	{1,0.1,5},
	{1,0.1,5},
	{1,2,5},
	{-1,0.1,5},
	{1,2,5},
	{-1,2,5},
	{-1,0.1,5},
	{1,2,3},
	{-1,2,3},
	{1,2,5},
	{-1,2,3},
	{-1,2,5},
	{-1,2,5},
};

GLfloat yellowcube1x4[36][3] =
{
	{3,2,3},
	{3,0.1,3},
	{1,0.1,3},
	{3,2,3},
	{1,0.1,5},
	{1,2,3},
	{3,0.1,3},
	{3,0.1,5},
	{1,0.1,5},
	{3,0.1,3},
	{1,0.1,5},
	{1,0.1,3},
	{1,0.1,5},
	{1,2,5},
	{1,2,3},
	{1,0.1,5},
	{1,2,3},
	{1,0.1,3},
	{3,0.1,3},
	{3,2,3},
	{3,0.1,5},
	{3,2,3},
	{3,2,5},
	{3,0.1,5},
	{3,0.1,5},
	{3,2,5},
	{1,0.1,5},
	{3,2,5},
	{1,2,5},
	{1,0.1,5},
	{3,2,3},
	{1,2,3},
	{3,2,5},
	{1,2,3},
	{1,2,5},
	{1,2,5},
};


GLfloat yellowcube1x5[36][3] =
{
	{5,2,3},
	{5,0.1,3},
	{3,0.1,3},
	{5,2,3},
	{3,0.1,5},
	{3,2,3},
	{5,0.1,3},
	{5,0.1,5},
	{3,0.1,5},
	{5,0.1,3},
	{3,0.1,5},
	{3,0.1,3},
	{3,0.1,5},
	{3,2,5},
	{3,2,3},
	{3,0.1,5},
	{3,2,3},
	{3,0.1,3},
	{5,0.1,3},
	{5,2,3},
	{5,0.1,5},
	{5,2,3},
	{5,2,5},
	{5,0.1,5},
	{5,0.1,5},
	{5,2,5},
	{3,0.1,5},
	{5,2,5},
	{3,2,5},
	{3,0.1,5},
	{5,2,3},
	{3,2,3},
	{5,2,5},
	{3,2,3},
	{3,2,5},
	{3,2,5},
};

GLfloat One_block_yellow3x3[36][3] = {
	{1,2,-1},
	{1,0.1,-1},
	{-1,0.1,-1},
	{1,2,-1},
	{-1,0.1,-1},
	{-1,2,-1},
	{1,0.1,-1},
	{1,0.1,1},
	{-1,0.1,1},
	{1,0.1,-1},
	{-1,0.1,1},
	{-1,0.1,-1},
	{-1,0.1,1},
	{-1,2,1},
	{-1,2,-1},
	{-1,0.1,1},
	{-1,2,-1},
	{-1,0.1,-1},
	{1,0.1,-1},
	{1,2,-1},
	{1,0.1,1},
	{1,2,-1},
	{1,2,1},
	{1,0.1,1},
	{1,0.1,1},
	{1,2,1},
	{-1,0.1,1},
	{1,2,1},
	{-1,2,1},
	{-1,0.1,1},
	{1,2,-1},
	{-1,2,-1},
	{1,2,1},
	{-1,2,-1},
	{-1,2,1},
	{1,2,1},
};

GLfloat Downcube5x1x3[36][3] =
{
	{1,6,-5},
	{1,4,-5},
	{-5,4,-5},
	{1,6,-5},
	{-5,4,-5},
	{-5,6,-5},
	{1,4,-5},
	{1,4,-3},
	{-5,4,-3},
	{1,4,-5},
	{-5,4,-3},
	{-5,4,-5},
	{-5,4,-3},
	{-5,6,-3},
	{-5,6,-5},
	{-5,4,-3},
	{-5,6,-5},
	{-5,4,-5},
	{1,4,-5},
	{1,6,-5},
	{1,4,-3},
	{1,6,-5},
	{1,6,-3},
	{1,4,-3},
	{1,4,-3},
	{1,6,-3},
	{-5,4,-3},
	{1,6,-3},
	{-5,6,-3},
	{-5,4,-3},
	{1,6,-5},
	{-5,6,-5},
	{1,6,-3},
	{-5,6,-5},
	{-5,6,-3},
	{1,6,-3},
};
GLfloat Downcube5x1x45[36][3] =
{
	{5,6,-5},
	{5,4,-5},
	{1,4,-5},
	{5,6,-5},
	{1,4,-5},
	{1,6,-5},
	{5,4,-5},
	{5,4,-3},
	{1,4,-3},
	{5,4,-5},
	{1,4,-3},
	{1,4,-5},
	{1,4,-3},
	{1,6,-3},
	{1,6,-5},
	{1,4,-3},
	{1,6,-5},
	{1,4,-5},
	{5,4,-5},
	{5,6,-5},
	{5,4,-3},
	{5,6,-5},
	{5,6,-3},
	{5,4,-3},
	{5,4,-3},
	{5,6,-3},
	{1,4,-3},
	{5,6,-3},
	{1,6,-3},
	{1,4,-3},
	{5,6,-5},
	{1,6,-5},
	{5,6,-3},
	{1,6,-5},
	{1,6,-3},
	{5,6,-3},
};
GLfloat Downcube5x2x3[36][3] =
{
	{1,6,-3},
	{1,4,-3},
	{-5,4,-3},
	{1,6,-3},
	{-5,4,-3},
	{-5,6,-3},
	{1,4,-3},
	{1,4,-1},
	{-5,4,-1},
	{1,4,-3},
	{-5,4,-1},
	{-5,4,-3},
	{-5,4,-1},
	{-5,6,-1},
	{-5,6,-3},
	{-5,4,-1},
	{-5,6,-3},
	{-5,4,-3},
	{1,4,-3},
	{1,6,-3},
	{1,4,-1},
	{1,6,-3},
	{1,6,-1},
	{1,4,-1},
	{1,4,-1},
	{1,6,-1},
	{-5,4,-1},
	{1,6,-1},
	{-5,6,-1},
	{-5,4,-1},
	{1,6,-3},
	{-5,6,-3},
	{1,6,-1},
	{-5,6,-3},
	{-5,6,-1},
	{1,6,-1},
};
GLfloat Downcube5x2x45[36][3] =
{
	{5,6,-3},
	{5,4,-3},
	{1,4,-3},
	{5,6,-3},
	{1,4,-3},
	{1,6,-3},
	{5,4,-3},
	{5,4,-1},
	{1,4,-1},
	{5,4,-3},
	{1,4,-1},
	{1,4,-3},
	{1,4,-1},
	{1,6,-1},
	{1,6,-3},
	{1,4,-1},
	{1,6,-3},
	{1,4,-3},
	{5,4,-3},
	{5,6,-3},
	{5,4,-1},
	{5,6,-3},
	{5,6,-1},
	{5,4,-1},
	{5,4,-1},
	{5,6,-1},
	{1,4,-1},
	{5,6,-1},
	{1,6,-1},
	{1,4,-1},
	{5,6,-3},
	{1,6,-3},
	{5,6,-1},
	{1,6,-3},
	{1,6,-1},
	{5,6,-1},
};

GLfloat Downcube5x3x3[36][3] =
{
	{1,6,-1},
	{1,4,-1},
	{-5,4,-1},
	{1,6,-1},
	{-5,4,-1},
	{-5,6,-1},
	{1,4,-1},
	{1,4,1},
	{-5,4,1},
	{1,4,-1},
	{-5,4,1},
	{-5,4,-1},
	{-5,4,1},
	{-5,6,1},
	{-5,6,-1},
	{-5,4,1},
	{-5,6,-1},
	{-5,4,-1},
	{1,4,-1},
	{1,6,-1},
	{1,4,1},
	{1,6,-1},
	{1,6,1},
	{1,4,1},
	{1,4,1},
	{1,6,1},
	{-5,4,1},
	{1,6,1},
	{-5,6,1},
	{-5,4,1},
	{1,6,-1},
	{-5,6,-1},
	{1,6,1},
	{-5,6,-1},
	{-5,6,1},
	{1,6,1},
};

GLfloat Downcube5x3x45[36][3] =
{
	{5,6,-1},
	{5,4,-1},
	{1,4,-1},
	{5,6,-1},
	{1,4,-1},
	{1,6,-1},
	{5,4,-1},
	{5,4,1},
	{1,4,1},
	{5,4,-1},
	{1,4,1},
	{1,4,-1},
	{1,4,1},
	{1,6,1},
	{1,6,-1},
	{1,4,1},
	{1,6,-1},
	{1,4,-1},
	{5,4,-1},
	{5,6,-1},
	{5,4,1},
	{5,6,-1},
	{5,6,1},
	{5,4,1},
	{5,4,1},
	{5,6,1},
	{1,4,1},
	{5,6,1},
	{1,6,1},
	{1,4,1},
	{5,6,-1},
	{1,6,-1},
	{5,6,1},
	{1,6,-1},
	{1,6,1},
	{5,6,1},
};
GLfloat Downcube5x4x3[36][3] =
{
	{1,6,1},
	{1,4,1},
	{-5,4,1},
	{1,6,1},
	{-5,4,1},
	{-5,6,1},
	{1,4,1},
	{1,4,3},
	{-5,4,3},
	{1,4,1},
	{-5,4,3},
	{-5,4,1},
	{-5,4,3},
	{-5,6,3},
	{-5,6,1},
	{-5,4,3},
	{-5,6,1},
	{-5,4,1},
	{1,4,1},
	{1,6,1},
	{1,4,3},
	{1,6,1},
	{1,6,3},
	{1,4,3},
	{1,4,3},
	{1,6,3},
	{-5,4,3},
	{1,6,3},
	{-5,6,3},
	{-5,4,3},
	{1,6,1},
	{-5,6,1},
	{1,6,3},
	{-5,6,1},
	{-5,6,3},
	{1,6,3},
};
GLfloat Downcube5x4x45[36][3] =
{
	{5,6,1},
	{5,4,1},
	{1,4,1},
	{5,6,1},
	{1,4,1},
	{1,6,1},
	{5,4,1},
	{5,4,3},
	{1,4,3},
	{5,4,1},
	{1,4,3},
	{1,4,1},
	{1,4,3},
	{1,6,3},
	{1,6,1},
	{1,4,3},
	{1,6,1},
	{1,4,1},
	{5,4,1},
	{5,6,1},
	{5,4,3},
	{5,6,1},
	{5,6,3},
	{5,4,3},
	{5,4,3},
	{5,6,3},
	{1,4,3},
	{5,6,3},
	{1,6,3},
	{1,4,3},
	{5,6,1},
	{1,6,1},
	{5,6,3},
	{1,6,1},
	{1,6,3},
	{5,6,3},
};

GLfloat Downcube5x5x3[36][3] =
{
	{1,6,3},
	{1,4,3},
	{-5,4,3},
	{1,6,3},
	{-5,4,3},
	{-5,6,3},
	{1,4,3},
	{1,4,5},
	{-5,4,5},
	{1,4,3},
	{-5,4,5},
	{-5,4,3},
	{-5,4,5},
	{-5,6,5},
	{-5,6,3},
	{-5,4,5},
	{-5,6,3},
	{-5,4,3},
	{1,4,3},
	{1,6,3},
	{1,4,5},
	{1,6,3},
	{1,6,5},
	{1,4,5},
	{1,4,5},
	{1,6,5},
	{-5,4,5},
	{1,6,5},
	{-5,6,5},
	{-5,4,5},
	{1,6,3},
	{-5,6,3},
	{1,6,5},
	{-5,6,3},
	{-5,6,5},
	{1,6,5},
};

GLfloat Downcube5x5x45[36][3] =
{
	{5,6,3},
	{5,4,3},
	{1,4,3},
	{5,6,3},
	{1,4,3},
	{1,6,3},
	{5,4,3},
	{5,4,5},
	{1,4,5},
	{5,4,3},
	{1,4,5},
	{1,4,3},
	{1,4,5},
	{1,6,5},
	{1,6,3},
	{1,4,5},
	{1,6,3},
	{1,4,3},
	{5,4,3},
	{5,6,3},
	{5,4,5},
	{5,6,3},
	{5,6,5},
	{5,4,5},
	{5,4,5},
	{5,6,5},
	{1,4,5},
	{5,6,5},
	{1,6,5},
	{1,4,5},
	{5,6,3},
	{1,6,3},
	{5,6,5},
	{1,6,3},
	{1,6,5},
	{5,6,5},
};

GLfloat side_left43s[36][3] =
{
	{5,2,-5},
	{5,0.1,-5},
	{-5,0.1,-5},
	{5,2,-5},
	{-5,0.1,-5},
	{-5,2,-5},
	{5,0.1,-5},
	{5,0.1,3},
	{-5,0.1,3},
	{5,0.1,-5},
	{-5,0.1,3},
	{-5,0.1,-5},
	{-5,0.1,3},
	{-5,2,3},
	{-5,2,-5},
	{-5,0.1,3},
	{-5,2,-5},
	{-5,0.1,-5},
	{5,0.1,-5},
	{5,2,-5},
	{5,0.1,3},
	{5,2,-5},
	{5,2,3},
	{5,0.1,3},
	{5,0.1,3},
	{5,2,3},
	{-5,0.1,3},
	{5,2,3},
	{-5,2,3},
	{-5,0.1,3},
	{5,2,-5},
	{-5,2,-5},
	{5,2,3},
	{-5,2,-5},
	{-5,2,3},
	{5,2,3},
};

GLfloat side_up44s[36][3] =
{
	{3,2,-5},
	{3,0.1,-5},
	{-5,0.1,-5},
	{3,2,-5},
	{-5,0.1,-5},
	{-5,2,-5},
	{3,0.1,-5},
	{3,0.1,5},
	{-5,0.1,5},
	{3,0.1,-5},
	{-5,0.1,5},
	{-5,0.1,-5},
	{-5,0.1,5},
	{-5,2,5},
	{-5,2,-5},
	{-5,0.1,5},
	{-5,2,-5},
	{-5,0.1,-5},
	{3,0.1,-5},
	{3,2,-5},
	{3,0.1,5},
	{3,2,-5},
	{3,2,5},
	{3,0.1,5},
	{3,0.1,5},
	{3,2,5},
	{-5,0.1,5},
	{3,2,5},
	{-5,2,5},
	{-5,0.1,5},
	{3,2,-5},
	{-5,2,-5},
	{3,2,5},
	{-5,2,-5},
	{-5,2,5},
	{3,2,5},
};

GLfloat side_left45s[36][3] =
{
	{5,2,-3},
	{5,0.1,-3},
	{-5,0.1,-3},
	{5,2,-3},
	{-5,0.1,-3},
	{-5,2,-3},
	{5,0.1,-3},
	{5,0.1,5},
	{-5,0.1,5},
	{5,0.1,-3},
	{-5,0.1,5},
	{-5,0.1,-3},
	{-5,0.1,5},
	{-5,2,5},
	{-5,2,-3},
	{-5,0.1,5},
	{-5,2,-3},
	{-5,0.1,-3},
	{5,0.1,-3},
	{5,2,-3},
	{5,0.1,5},
	{5,2,-3},
	{5,2,5},
	{5,0.1,3},
	{5,0.1,5},
	{5,2,5},
	{-5,0.1,5},
	{5,2,5},
	{-5,2,5},
	{-5,0.1,5},
	{5,2,-3},
	{-5,2,-3},
	{5,2,5},
	{-5,2,-3},
	{-5,2,5},
	{5,2,5},
};

GLfloat side_up46s[36][3] =
{
	{5,2,-5},
	{5,0.1,-5},
	{-3,0.1,-5},
	{5,2,-5},
	{-3,0.1,-5},
	{-3,2,-5},
	{5,0.1,-5},
	{5,0.1,5},
	{-3,0.1,5},
	{5,0.1,-5},
	{-3,0.1,5},
	{-3,0.1,-5},
	{-3,0.1,5},
	{-3,2,5},
	{-3,2,-5},
	{-3,0.1,5},
	{-3,2,-5},
	{-3,0.1,-5},
	{5,0.1,-5},
	{5,2,-5},
	{5,0.1,5},
	{5,2,-5},
	{5,2,5},
	{5,0.1,5},
	{5,0.1,5},
	{5,2,5},
	{-3,0.1,5},
	{5,2,5},
	{-3,2,5},
	{-3,0.1,5},
	{5,2,-5},
	{-3,2,-5},
	{5,2,5},
	{-3,2,-5},
	{-3,2,5},
	{5,2,5},
};

GLfloat Left5x3[36][3] = {
	{5,6,-1},
	{5,4,-1},
	{-5,4,-1},
	{5,6,-1},
	{-5,4,-1},
	{-5,6,-1},
	{5,4,-1},
	{5,4,1},
	{-5,4,1},
	{5,4,-1},
	{-5,4,1},
	{-5,4,-1},
	{-5,4,1},
	{-5,6,1},
	{-5,6,-1},
	{-5,4,1},
	{-5,6,-1},
	{-5,4,-1},
	{5,4,-1},
	{5,6,-1},
	{5,4,1},
	{5,6,-1},
	{5,6,1},
	{5,4,1},
	{5,4,1},
	{5,6,1},
	{-5,4,1},
	{5,6,1},
	{-5,6,1},
	{-5,4,1},
	{5,6,-1},
	{-5,6,-1},
	{5,6,1},
	{-5,6,-1},
	{-5,6,1},
	{5,6,1},
};

GLfloat One_block2x1[36][3] = {
	{-3,6,-3},
	{-3,4,-3},
	{-5,4,-3},
	{-3,6,-3},
	{-5,4,-3},
	{-5,6,-3},
	{-3,4,-3},
	{-3,4,-1},
	{-5,4,-1},
	{-3,4,-3},
	{-5,4,-1},
	{-5,4,-3},
	{-5,4,-1},
	{-5,6,-1},
	{-5,6,-3},
	{-5,4,-1},
	{-5,6,-3},
	{-5,4,-3},
	{-3,4,-3},
	{-3,6,-3},
	{-3,4,-1},
	{-3,6,-3},
	{-3,6,-1},
	{-3,4,-1},
	{-3,4,-1},
	{-3,6,-1},
	{-5,4,-1},
	{-3,6,-1},
	{-5,6,-1},
	{-5,4,-1},
	{-3,6,-3},
	{-5,6,-3},
	{-3,6,-1},
	{-5,6,-3},
	{-5,6,-1},
	{-3,6,-1},
};
GLfloat One_block4x5[36][3] = {
	{5,6,1},
	{5,4,1},
	{3,4,1},
	{5,6,1},
	{3,4,1},
	{3,6,1},
	{5,4,1},
	{5,4,3},
	{3,4,3},
	{5,4,1},
	{3,4,3},
	{3,4,1},
	{3,4,3},
	{3,6,3},
	{3,6,1},
	{3,4,3},
	{3,6,1},
	{3,4,1},
	{5,4,1},
	{5,6,1},
	{5,4,3},
	{5,6,1},
	{5,6,3},
	{5,4,3},
	{5,4,3},
	{5,6,3},
	{3,4,3},
	{5,6,3},
	{3,6,3},
	{3,4,3},
	{5,6,1},
	{3,6,1},
	{5,6,3},
	{3,6,1},
	{3,6,3},
	{5,6,3},
};
//------------------------------------------------------------------------------

// 22/11/28 바닥, 음악 넣기 <- 음악 넣는데 3시간 ㅠㅠ 파일 이름만 바꾸면 되는줄 알았지..
// 22/12/04 양 옆 큐브 생성 <- 텍스쳐 넣는데 한세월 모르겠어..
// 22/12/07 블럭들 VAO,VBO 다 만들고 Crono 적용해 드디어 떨어지는 블럭 생성 <- 힘내자 힘 




objRead objReader;
GLint Object = objReader.loadObj_normalize_center("test.obj");
std::vector< glm::vec3 > Rect1 = objReader.outvertex;
std::vector< glm::vec3 > Rect2 = objReader.outvertex;
std::vector< glm::vec3 > Rect3 = objReader.outvertex;
std::vector< glm::vec3 > Rect4 = objReader.outvertex;
std::vector< glm::vec3 > Rect5 = objReader.outvertex;
std::vector< glm::vec3 > Rect6 = objReader.outvertex;
std::vector< glm::vec3 > Rect7 = objReader.outvertex;
std::vector< glm::vec3 > Rect8 = objReader.outvertex;
std::vector< glm::vec3 > Rect9 = objReader.outvertex;
std::vector< glm::vec3 > Rect10 = objReader.outvertex;
std::vector< glm::vec3 > Rect11 = objReader.outvertex;
std::vector< glm::vec3 > Rect12 = objReader.outvertex;
std::vector< glm::vec3 > Rect13 = objReader.outvertex;
std::vector< glm::vec3 > Rect14 = objReader.outvertex;
std::vector< glm::vec3 > Rect15 = objReader.outvertex;
std::vector< glm::vec3 > Rect16 = objReader.outvertex;
std::vector< glm::vec3 > Rect17 = objReader.outvertex;
std::vector< glm::vec3 > Rect18 = objReader.outvertex;
std::vector< glm::vec3 > Rect19 = objReader.outvertex;
std::vector< glm::vec3 > Rect20 = objReader.outvertex;
std::vector< glm::vec3 > Rect21 = objReader.outvertex;
std::vector< glm::vec3 > Rect22 = objReader.outvertex;
std::vector< glm::vec3 > Rect23 = objReader.outvertex;
std::vector< glm::vec3 > Rect24 = objReader.outvertex;
std::vector< glm::vec3 > Rect25 = objReader.outvertex;
GLfloat cmpx = 0;
GLfloat cmpy = 0;
GLfloat cmpz = 0;
GLfloat cmpx1 = 0;
GLfloat cmpy1 = 0;
GLfloat cmpz1 = 0;

std::chrono::system_clock::time_point start;

int main(int argc, char** argv)
{
	//PlaySound(TEXT("sans.wav"), NULL, SND_FILENAME | SND_ASYNC);
	//_getch(); //이거 없으면 재생 안 됨, 물론 이 코드 한정

	mciOpen.lpstrElementName = TEXT("sans.mp3"); // 파일 경로 입력
	mciOpen.lpstrDeviceType = TEXT("mpegvideo");

	mciSendCommand(NULL, MCI_OPEN, MCI_OPEN_ELEMENT | MCI_OPEN_TYPE,
		(DWORD)(LPVOID)&mciOpen);
	dwID = mciOpen.wDeviceID;
	mciSendCommand(dwID, MCI_PLAY, NULL, // play & repeat
		(DWORD)(LPVOID)&m_mciPlayParms);






	// create window using freeglut
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGBA | GLUT_DEPTH);
	glutInitWindowSize(g_window_w, g_window_h);
	glutInitWindowPosition(0, 0);




	glutCreateWindow("Computer Graphics");
	//////////////////////////////////////////////////////////////////////////////////////
	//// initialize GLEW
	//////////////////////////////////////////////////////////////////////////////////////
	glewExperimental = GL_TRUE;
	if (glewInit() != GLEW_OK)
	{
		std::cerr << "Unable to initialize GLEW ... exiting" << std::endl;
		exit(EXIT_FAILURE);
	}
	else
	{
		std::cout << "GLEW OK\n";
	}

	//////////////////////////////////////////////////////////////////////////////////////
	//// Create shader program an register the shader
	//////////////////////////////////////////////////////////////////////////////////////

	GLuint vShader[10];
	GLuint fShader[10];

	vShader[0] = MakeVertexShader("vertex.glsl", 0);			// Sun
	fShader[0] = MakeFragmentShader("fragment.glsl", 0);

	// shader Program
	s_program[0] = glCreateProgram();
	glAttachShader(s_program[0], vShader[0]);
	glAttachShader(s_program[0], fShader[0]);

	glLinkProgram(s_program[0]);
	checkCompileErrors(s_program[0], "PROGRAM");
	glm::mat4 T1 = glm::mat4(1.0f);
	glm::mat4 T2 = glm::mat4(1.0f);
	glm::mat4 T3 = glm::mat4(1.0f);
	glm::mat4 T4 = glm::mat4(1.0f);
	glm::mat4 T5 = glm::mat4(1.0f);
	glm::mat4 T6 = glm::mat4(1.0f);
	glm::mat4 T7 = glm::mat4(1.0f);
	glm::mat4 T8 = glm::mat4(1.0f);
	glm::mat4 T9 = glm::mat4(1.0f);
	glm::mat4 T10 = glm::mat4(1.0f);
	glm::mat4 T11 = glm::mat4(1.0f);
	glm::mat4 T12 = glm::mat4(1.0f);
	glm::mat4 T13 = glm::mat4(1.0f);
	glm::mat4 T14 = glm::mat4(1.0f);
	glm::mat4 T15 = glm::mat4(1.0f);
	glm::mat4 T16 = glm::mat4(1.0f);
	glm::mat4 T17 = glm::mat4(1.0f);
	glm::mat4 T18 = glm::mat4(1.0f);
	glm::mat4 T19 = glm::mat4(1.0f);
	glm::mat4 T20 = glm::mat4(1.0f);
	glm::mat4 T21 = glm::mat4(1.0f);
	glm::mat4 T22 = glm::mat4(1.0f);
	glm::mat4 T23 = glm::mat4(1.0f);
	glm::mat4 T24 = glm::mat4(1.0f);
	glm::mat4 T25 = glm::mat4(1.0f);

	T1 = glm::translate(T1, glm::vec3(-7, 1, -4));
	T2 = glm::translate(T2, glm::vec3(-7, 1, -2));
	T3 = glm::translate(T3, glm::vec3(-7, 1, -0));
	T4 = glm::translate(T4, glm::vec3(-7, 1, 2));
	T5 = glm::translate(T5, glm::vec3(-7, 1, 4));

	T6 = glm::translate(T6, glm::vec3(7, 1, -4));
	T7 = glm::translate(T7, glm::vec3(7, 1, -2));
	T8 = glm::translate(T8, glm::vec3(7, 1, 0));
	T9 = glm::translate(T9, glm::vec3(7, 1, 2));
	T10 = glm::translate(T10, glm::vec3(7, 1, 4));


	T11 = glm::translate(T11, glm::vec3(-4.0, 1, -7));
	T12 = glm::translate(T12, glm::vec3(-2.0, 1, -7));
	T13 = glm::translate(T13, glm::vec3(-0.0, 1, -7));
	T14 = glm::translate(T14, glm::vec3(2.0, 1, -7));
	T15 = glm::translate(T15, glm::vec3(4.0, 1, -7));

	T16 = glm::translate(T16, glm::vec3(-4, 1, 7));
	T17 = glm::translate(T17, glm::vec3(-2, 1, 7));
	T18 = glm::translate(T18, glm::vec3(-0, 1, 7));
	T19 = glm::translate(T19, glm::vec3(2, 1, 7));
	T20 = glm::translate(T20, glm::vec3(4, 1, 7));
	
	glm::vec3 a(cmpx, cmpy, cmpz);
	glm::vec4 b(cmpx1, cmpy1, cmpz1, 1.0f);


	for (int i = 0; i < 36; i++)
	{
		a = Rect1[i];
		b = T1 * glm::vec4(a, 1.0f);
		a.x = b.x;
		a.y = b.y;
		a.z = b.z;

		Rect1[i] = a;

		//-----------------------------

		a = Rect2[i];
		b = T2 * glm::vec4(a, 1.0f);
		a.x = b.x;
		a.y = b.y;
		a.z = b.z;

		Rect2[i] = a;

		//-----------------------------

		a = Rect3[i];
		b = T3 * glm::vec4(a, 1.0f);
		a.x = b.x;
		a.y = b.y;
		a.z = b.z;

		Rect3[i] = a;

		//-----------------------------

		a = Rect4[i];
		b = T4 * glm::vec4(a, 1.0f);
		a.x = b.x;
		a.y = b.y;
		a.z = b.z;

		Rect4[i] = a;
		//-----------------------------

		a = Rect5[i];
		b = T5 * glm::vec4(a, 1.0f);
		a.x = b.x;
		a.y = b.y;
		a.z = b.z;

		Rect5[i] = a;

		//-----------------------------


		a = Rect6[i];
		b = T6 * glm::vec4(a, 1.0f);
		a.x = b.x;
		a.y = b.y;
		a.z = b.z;

		Rect6[i] = a;

		//-----------------------------


		a = Rect7[i];
		b = T7 * glm::vec4(a, 1.0f);
		a.x = b.x;
		a.y = b.y;
		a.z = b.z;

		Rect7[i] = a;

		//-----------------------------


		a = Rect8[i];
		b = T8 * glm::vec4(a, 1.0f);
		a.x = b.x;
		a.y = b.y;
		a.z = b.z;

		Rect8[i] = a;

		//-----------------------------


		a = Rect9[i];
		b = T9 * glm::vec4(a, 1.0f);
		a.x = b.x;
		a.y = b.y;
		a.z = b.z;

		Rect9[i] = a;

		//-----------------------------

		a = Rect10[i];
		b = T10 * glm::vec4(a, 1.0f);
		a.x = b.x;
		a.y = b.y;
		a.z = b.z;

		Rect10[i] = a;

		//-----------------------------

		a = Rect11[i];
		b = T11 * glm::vec4(a, 1.0f);
		a.x = b.x;
		a.y = b.y;
		a.z = b.z;

		Rect11[i] = a;

		//-----------------------------

		a = Rect12[i];
		b = T12 * glm::vec4(a, 1.0f);
		a.x = b.x;
		a.y = b.y;
		a.z = b.z;

		Rect12[i] = a;

		//-----------------------------

		a = Rect13[i];
		b = T13 * glm::vec4(a, 1.0f);
		a.x = b.x;
		a.y = b.y;
		a.z = b.z;

		Rect13[i] = a;

		//-----------------------------

		a = Rect14[i];
		b = T14 * glm::vec4(a, 1.0f);
		a.x = b.x;
		a.y = b.y;
		a.z = b.z;

		Rect14[i] = a;

		//-----------------------------

		a = Rect15[i];
		b = T15 * glm::vec4(a, 1.0f);
		a.x = b.x;
		a.y = b.y;
		a.z = b.z;

		Rect15[i] = a;

		//-----------------------------

		a = Rect16[i];
		b = T16 * glm::vec4(a, 1.0f);
		a.x = b.x;
		a.y = b.y;
		a.z = b.z;

		Rect16[i] = a;

		//-----------------------------

		a = Rect17[i];
		b = T17 * glm::vec4(a, 1.0f);
		a.x = b.x;
		a.y = b.y;
		a.z = b.z;

		Rect17[i] = a;

		//-----------------------------

		a = Rect18[i];
		b = T18 * glm::vec4(a, 1.0f);
		a.x = b.x;
		a.y = b.y;
		a.z = b.z;

		Rect18[i] = a;

		//-----------------------------

		a = Rect19[i];
		b = T19 * glm::vec4(a, 1.0f);
		a.x = b.x;
		a.y = b.y;
		a.z = b.z;

		Rect19[i] = a;

		//-----------------------------

		a = Rect20[i];
		b = T20 * glm::vec4(a, 1.0f);
		a.x = b.x;
		a.y = b.y;
		a.z = b.z;

		Rect20[i] = a;

		//-----------------------------

	}

	if (timer_flag == 0)
	{
		start = std::chrono::system_clock::now();
		timer_flag = 1;
	}
	
	auto end = std::chrono::system_clock::now();
	auto sec = std::chrono::duration_cast<std::chrono::seconds>(end - start);

	//std::cout << "Test() 함수를 수행하는 걸린 시간(초) : " << sec.count() << " seconds" << std::endl;
	InitBuffer();
	InitTexture();

	// callback functions
	glutTimerFunc(100, timer_repeat, 1);
	glutTimerFunc(100, Play_game, 1);
	glutDisplayFunc(Display);
	glutReshapeFunc(Reshape);
	glutKeyboardFunc(Keyboard);


	//glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);

	// freeglut 윈도우 이벤트 처리 시작. 윈도우가 닫힐때까지 후한루프 실행.
	glutMainLoop();

	return 0;
}

void timer_repeat(int value)
{
	auto end = std::chrono::system_clock::now();
	auto sec = std::chrono::duration_cast<std::chrono::seconds>(end - start);

	Second = sec.count();
	//std::cout << "Test() 함수를 수행하는 걸린 시간(초) : " << Second << " seconds" << std::endl;
	glutPostRedisplay();
	glutTimerFunc(100, timer_repeat, 1);

}

void depeat()
{
	printf("----------------------------------------------------\n");
	printf("\t\t실패!\n");
	printf("\t원래 맞으면서 패턴 파악하는거죠.\n");
	printf("----------------------------------------------------\n");
}

void collision_Updown1()
{
	if (UpdownCUBE1[0][0] == 20)
	{
		return;
	}

	if (UpdownCUBE1[1][1] < 1)
	{
		if (UpdownCUBE1[0][0] > playerCUBE[0][0] && UpdownCUBE1[2][0] < playerCUBE[0][0]
			&& UpdownCUBE1[7][2] > playerCUBE[7][2] && UpdownCUBE1[0][2] < playerCUBE[0][2])
		{
			depeat();
			glutLeaveMainLoop();
		}
	}
	
}

void collision_Updown2()
{
	if (UpdownCUBE2[0][0] == 20)
	{
		return;
	}

	if (UpdownCUBE2[1][1] < 1)
	{
		if (UpdownCUBE2[0][0] > playerCUBE[0][0] && UpdownCUBE2[2][0] < playerCUBE[0][0]
			&& UpdownCUBE2[7][2] > playerCUBE[7][2] && UpdownCUBE2[0][2] < playerCUBE[0][2])
		{
			depeat();
			glutLeaveMainLoop();
		}
	}

}

void collision_Updown3()
{
	if (UpdownCUBE3[0][0] == 20)
	{
		return;
	}

	if (UpdownCUBE3[1][1] < 1)
	{
		if (UpdownCUBE3[0][0] > playerCUBE[0][0] && UpdownCUBE3[2][0] < playerCUBE[0][0]
			&& UpdownCUBE3[7][2] > playerCUBE[7][2] && UpdownCUBE3[0][2] < playerCUBE[0][2])
		{
			depeat();
			glutLeaveMainLoop();
		}
	}

}

void collision_Updown4()
{
	if (UpdownCUBE4[0][0] == 20)
	{
		return;
	}

	if (UpdownCUBE4[1][1] < 1)
	{
		if (UpdownCUBE4[0][0] > playerCUBE[0][0] && UpdownCUBE4[2][0] < playerCUBE[0][0]
			&& UpdownCUBE4[7][2] > playerCUBE[7][2] && UpdownCUBE4[0][2] < playerCUBE[0][2])
		{
			depeat();
			glutLeaveMainLoop();
		}
	}

}

void collision_Updown5()
{
	if (UpdownCUBE5[0][0] == 20)
	{
		return;
	}

	if (UpdownCUBE5[1][1] < 1)
	{
		if (UpdownCUBE5[0][0] > playerCUBE[0][0] && UpdownCUBE5[2][0] < playerCUBE[0][0]
			&& UpdownCUBE5[7][2] > playerCUBE[7][2] && UpdownCUBE5[0][2] < playerCUBE[0][2])
		{
			depeat();
			glutLeaveMainLoop();
		}
	}

}


void collision_sideleft1()
{
	if (sideleftCUBE1[0][0] == 20)
	{
		return;
	}
	if (sideleftCUBE1[0][0] > playerCUBE[0][0] && sideleftCUBE1[2][0] < playerCUBE[0][0]
		&& sideleftCUBE1[7][2] > playerCUBE[7][2] && sideleftCUBE1[0][2] < playerCUBE[0][2])
	{
		depeat();
		glutLeaveMainLoop();
	}
}

void collision_sideleft2()
{
	if (sideleftCUBE2[0][0] == 20)
	{
		return;
	}
	if (sideleftCUBE2[0][0] > playerCUBE[0][0] && sideleftCUBE2[2][0] < playerCUBE[0][0]
		&& sideleftCUBE2[7][2] > playerCUBE[7][2] && sideleftCUBE2[0][2] < playerCUBE[0][2])
	{
		depeat();
		glutLeaveMainLoop();
	}
}

void collision_sideup1()
{
	if (sideupCUBE1[0][0] == 20)
	{
		return;
	}
	if (sideupCUBE1[0][0] > playerCUBE[0][0] && sideupCUBE1[2][0] < playerCUBE[0][0]
		&& sideupCUBE1[7][2] > playerCUBE[7][2] && sideupCUBE1[0][2] < playerCUBE[0][2])
	{
		depeat();
		glutLeaveMainLoop();
	}
}

void collision_sideup2()
{
	if (sideupCUBE2[0][0] == 20)
	{
		return;
	}
	if (sideupCUBE2[0][0] > playerCUBE[0][0] && sideupCUBE2[2][0] < playerCUBE[0][0]
		&& sideupCUBE2[7][2] > playerCUBE[7][2] && sideupCUBE2[0][2] < playerCUBE[0][2])
	{
		depeat();
		glutLeaveMainLoop();
	}
}
void collision_yellow1()
{
	if (yellowCUBE1[0][0] == 20)
	{
		return;
	}
	if (yellowCUBE1[0][0] > playerCUBE[0][0] && yellowCUBE1[2][0] < playerCUBE[0][0]
		&& yellowCUBE1[7][2] > playerCUBE[7][2] && yellowCUBE1[0][2] < playerCUBE[0][2])
	{
		depeat();
		glutLeaveMainLoop();
	}
}
void collision_yellow2()
{
	if (yellowCUBE2[0][0] == 20)
	{
		return;
	}
	if (yellowCUBE2[0][0] > playerCUBE[0][0] && yellowCUBE2[2][0] < playerCUBE[0][0]
		&& yellowCUBE2[7][2] > playerCUBE[7][2] && yellowCUBE2[0][2] < playerCUBE[0][2])
	{
		depeat();
		glutLeaveMainLoop();
	}
}

void collision_yellow3()
{
	if (yellowCUBE3[0][0] == 20)
	{
		return;
	}
	if (yellowCUBE3[0][0] > playerCUBE[0][0] && yellowCUBE3[2][0] < playerCUBE[0][0]
		&& yellowCUBE3[7][2] > playerCUBE[7][2] && yellowCUBE3[0][2] < playerCUBE[0][2])
	{
		depeat();
		glutLeaveMainLoop();
	}
}

void collision_yellow4()
{
	if (yellowCUBE4[0][0] == 20)
	{
		return;
	}
	if (yellowCUBE4[0][0] > playerCUBE[0][0] && yellowCUBE4[2][0] < playerCUBE[0][0]
		&& yellowCUBE4[7][2] > playerCUBE[7][2] && yellowCUBE4[0][2] < playerCUBE[0][2])
	{
		depeat();
		glutLeaveMainLoop();
	}
}

void collision_yellow5()
{
	if (yellowCUBE1[0][0] == 20)
	{
		return;
	}
	if (yellowCUBE5[0][0] > playerCUBE[0][0] && yellowCUBE5[2][0] < playerCUBE[0][0]
		&& yellowCUBE5[7][2] > playerCUBE[7][2] && yellowCUBE5[0][2] < playerCUBE[0][2])
	{
		depeat();
		glutLeaveMainLoop();
	}
}

void collision_yellow6()
{
	if (yellowCUBE6[0][0] == 20)
	{
		return;
	}
	if (yellowCUBE6[0][0] > playerCUBE[0][0] && yellowCUBE6[2][0] < playerCUBE[0][0]
		&& yellowCUBE6[7][2] > playerCUBE[7][2] && yellowCUBE6[0][2] < playerCUBE[0][2])
	{
		depeat();
		glutLeaveMainLoop();
	}
}

int play_time_flag = 1;
void Play_game(int value)
{
	if (Second == 1 && play_time_flag == 1)
	{

		for (int i = 0; i < 150; i += 30)
		{
			for (int j = 0; j < 6; j++)
			{
				Floor_Color[i+j][0] = 1.0f;
				Floor_Color[i+j][1] = 0.0f;
				Floor_Color[i+j][2] = 0.0f;
			}
			

			
		}
		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);




		play_time_flag += 1;
	}
	if (Second == 2 && play_time_flag == 2)
	{

		for (int i = 0; i < 5; i ++)
		{
			if (i % 2 == 0)
			{
				for (int j = 0; j < 6; j++)
				{
					Floor_Color[30 * i + j][0] = 1.0f;
					Floor_Color[30 * i + j][1] = 0.98f;
					Floor_Color[30 * i + j][2] = 0.98f;

					Floor_Color[30 * i + j + 6][0] = 1.0f;
					Floor_Color[30 * i + j + 6][1] = 0.0f;
					Floor_Color[30 * i + j + 6][2] = 0.0f;
				}
			}
			else
			{
				for (int j = 0; j < 6; j++)
				{
					Floor_Color[30 * i + j][0] = 0.82f;
					Floor_Color[30 * i + j][1] = 0.82f;
					Floor_Color[30 * i + j][2] = 0.82f;

					Floor_Color[30 * i + j + 6][0] = 1.0f;
					Floor_Color[30 * i + j + 6][1] = 0.0f;
					Floor_Color[30 * i + j + 6][2] = 0.0f;
				}
			}


		}
		for (int i = 0; i < 36; i++)
		{
			UpdownCUBE1[i][0] = array5x1[i][0];
			UpdownCUBE1[i][1] = array5x1[i][1];
			UpdownCUBE1[i][2] = array5x1[i][2];
		}

		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		play_time_flag += 1;
		glutTimerFunc(100, Down_block, 1);
	}
	if (Second == 3 && play_time_flag == 3)
	{
		for (int i = 0; i < 5; i++)
		{
			if (i % 2 == 0)
			{
				for (int j = 0; j < 6; j++)
				{
					Floor_Color[30 * i + j + 6][0] = 0.82f;
					Floor_Color[30 * i + j + 6][1] = 0.82f;
					Floor_Color[30 * i + j + 6][2] = 0.82f;

					Floor_Color[30 * i + j + 12][0] = 1.0f;
					Floor_Color[30 * i + j + 12][1] = 0.0f;
					Floor_Color[30 * i + j + 12][2] = 0.0f;
				}
			}
			else
			{
				for (int j = 0; j < 6; j++)
				{
					Floor_Color[30 * i + j + 6][0] = 1.0f;
					Floor_Color[30 * i + j + 6][1] = 0.98f;
					Floor_Color[30 * i + j + 6][2] = 0.98f;

					Floor_Color[30 * i + j + 12][0] = 1.0f;
					Floor_Color[30 * i + j + 12][1] = 0.0f;
					Floor_Color[30 * i + j + 12][2] = 0.0f;
				}
			}


		}
		for (int i = 0; i < 36; i++)
		{
			UpdownCUBE2[i][0] = array5x2[i][0];
			UpdownCUBE2[i][1] = array5x2[i][1];
			UpdownCUBE2[i][2] = array5x2[i][2];
		}

		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		play_time_flag += 1;
	}
	if (Second == 4 && play_time_flag == 4)
	{
		for (int i = 0; i < 5; i++)
		{
			if (i % 2 == 0)
			{
				for (int j = 0; j < 6; j++)
				{
					Floor_Color[30 * i + j + 12][0] = 1.0f;
					Floor_Color[30 * i + j + 12][1] = 0.98f;
					Floor_Color[30 * i + j + 12][2] = 0.98f;

					Floor_Color[30 * i + j + 18][0] = 1.0f;
					Floor_Color[30 * i + j + 18][1] = 0.0f;
					Floor_Color[30 * i + j + 18][2] = 0.0f;
				}
			}
			else
			{
				for (int j = 0; j < 6; j++)
				{
					Floor_Color[30 * i + j + 12][0] = 0.82f;
					Floor_Color[30 * i + j + 12][1] = 0.82f;
					Floor_Color[30 * i + j + 12][2] = 0.82f;

					Floor_Color[30 * i + j + 18][0] = 1.0f;
					Floor_Color[30 * i + j + 18][1] = 0.0f;
					Floor_Color[30 * i + j + 18][2] = 0.0f;
				}
			}


		}
		for (int i = 0; i < 36; i++)
		{
			UpdownCUBE3[i][0] = array5x3[i][0];
			UpdownCUBE3[i][1] = array5x3[i][1];
			UpdownCUBE3[i][2] = array5x3[i][2];
		}

		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		play_time_flag += 1;
	}
	if (Second == 5 && play_time_flag == 5)
	{
		for (int i = 0; i < 5; i++)
		{
			if (i % 2 == 0)
			{
				for (int j = 0; j < 6; j++)
				{
					Floor_Color[30 * i + j + 18][0] = 0.82f;
					Floor_Color[30 * i + j + 18][1] = 0.82f;
					Floor_Color[30 * i + j + 18][2] = 0.82f;

					Floor_Color[30 * i + j + 24][0] = 1.0f;
					Floor_Color[30 * i + j + 24][1] = 0.0f;
					Floor_Color[30 * i + j + 24][2] = 0.0f;
				}
			}
			else
			{
				for (int j = 0; j < 6; j++)
				{
					Floor_Color[30 * i + j + 18][0] = 1.0f;
					Floor_Color[30 * i + j + 18][1] = 0.98f;
					Floor_Color[30 * i + j + 18][2] = 0.98f;

					Floor_Color[30 * i + j + 24][0] = 1.0f;
					Floor_Color[30 * i + j + 24][1] = 0.0f;
					Floor_Color[30 * i + j + 24][2] = 0.0f;
				}
			}


		}
		for (int i = 0; i < 36; i++)
		{
			UpdownCUBE4[i][0] = array5x4[i][0];
			UpdownCUBE4[i][1] = array5x4[i][1];
			UpdownCUBE4[i][2] = array5x4[i][2];
		}

		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		play_time_flag += 1;
	}
	if (Second == 6 && play_time_flag == 6)
	{
		for (int i = 0; i < 5; i++)
		{
			if (i % 2 == 0)
			{
				for (int j = 0; j < 6; j++)
				{
					Floor_Color[30 * i + j + 24][0] = 1.0f;
					Floor_Color[30 * i + j + 24][1] = 0.98f;
					Floor_Color[30 * i + j + 24][2] = 0.98f;



				}
			}
			else
			{
				for (int j = 0; j < 6; j++)
				{
					Floor_Color[30 * i + j + 24][0] = 0.82f;
					Floor_Color[30 * i + j + 24][1] = 0.82f;
					Floor_Color[30 * i + j + 24][2] = 0.82f;


				}
			}


		}
		for (int i = 0; i < 36; i++)
		{
			UpdownCUBE5[i][0] = array5x5[i][0];
			UpdownCUBE5[i][1] = array5x5[i][1];
			UpdownCUBE5[i][2] = array5x5[i][2];
		}

		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		play_time_flag += 1;
	}
	if (Second == 7 && play_time_flag == 7)
	{
		for (int i = 0; i < 150; i += 30)
		{
			for (int j = 0; j < 6; j++)
			{
				Floor_Color[i + j + 24][0] = 1.0f;
				Floor_Color[i + j + 24][1] = 0.0f;
				Floor_Color[i + j + 24][2] = 0.0f;
			}



		}
		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);



		play_time_flag += 1;
	}
	if (Second == 8 && play_time_flag == 8)
	{
		for (int i = 0; i < 5; i++)
		{
			if (i % 2 == 0)
			{
				for (int j = 0; j < 6; j++)
				{
					Floor_Color[30 * i + j + 24][0] = 1.0f;
					Floor_Color[30 * i + j + 24][1] = 0.98f;
					Floor_Color[30 * i + j + 24][2] = 0.98f;
					Floor_Color[30 * i + j + 18][0] = 1.0f;
					Floor_Color[30 * i + j + 18][1] = 0.0f;
					Floor_Color[30 * i + j + 18][2] = 0.0f;


				}
			}
			else
			{
				for (int j = 0; j < 6; j++)
				{
					Floor_Color[30 * i + j + 24][0] = 0.82f;
					Floor_Color[30 * i + j + 24][1] = 0.82f;
					Floor_Color[30 * i + j + 24][2] = 0.82f;
					Floor_Color[30 * i + j + 18][0] = 1.0f;
					Floor_Color[30 * i + j + 18][1] = 0.0f;
					Floor_Color[30 * i + j + 18][2] = 0.0f;


				}
			}


		}
		for (int i = 0; i < 36; i++)
		{
			UpdownCUBE5[i][0] = array5x5[i][0];
			UpdownCUBE5[i][1] = array5x5[i][1];
			UpdownCUBE5[i][2] = array5x5[i][2];
		}

		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		play_time_flag += 1;
	}
	if (Second == 9 && play_time_flag == 9)
	{
		for (int i = 0; i < 5; i++)
		{
			if (i % 2 == 0)
			{
				for (int j = 0; j < 6; j++)
				{
					Floor_Color[30 * i + j + 18][0] = 0.82f;
					Floor_Color[30 * i + j + 18][1] = 0.82f;
					Floor_Color[30 * i + j + 18][2] = 0.82f;
					Floor_Color[30 * i + j + 12][0] = 1.0f;
					Floor_Color[30 * i + j + 12][1] = 0.0f;
					Floor_Color[30 * i + j + 12][2] = 0.0f;


				}
			}
			else
			{
				for (int j = 0; j < 6; j++)
				{
					Floor_Color[30 * i + j + 18][0] = 1.0f;
					Floor_Color[30 * i + j + 18][1] = 0.98f;
					Floor_Color[30 * i + j + 18][2] = 0.98f;
					Floor_Color[30 * i + j + 12][0] = 1.0f;
					Floor_Color[30 * i + j + 12][1] = 0.0f;
					Floor_Color[30 * i + j + 12][2] = 0.0f;


				}
			}


		}
		for (int i = 0; i < 36; i++)
		{
			UpdownCUBE4[i][0] = array5x4[i][0];
			UpdownCUBE4[i][1] = array5x4[i][1];
			UpdownCUBE4[i][2] = array5x4[i][2];
		}

		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		play_time_flag += 1;
	}
	if (Second == 10 && play_time_flag == 10)
	{
		for (int i = 0; i < 5; i++)
		{
			if (i % 2 == 0)
			{
				for (int j = 0; j < 6; j++)
				{
					Floor_Color[30 * i + j + 12][0] = 1.0f;
					Floor_Color[30 * i + j + 12][1] = 0.98f;
					Floor_Color[30 * i + j + 12][2] = 0.98f;
					Floor_Color[30 * i + j + 6][0] = 1.0f;
					Floor_Color[30 * i + j + 6][1] = 0.0f;
					Floor_Color[30 * i + j + 6][2] = 0.0f;


				}
			}
			else
			{
				for (int j = 0; j < 6; j++)
				{
					Floor_Color[30 * i + j + 12][0] = 0.82f;
					Floor_Color[30 * i + j + 12][1] = 0.82f;
					Floor_Color[30 * i + j + 12][2] = 0.82f;
					Floor_Color[30 * i + j + 6][0] = 1.0f;
					Floor_Color[30 * i + j + 6][1] = 0.0f;
					Floor_Color[30 * i + j + 6][2] = 0.0f;


				}
			}


		}
		for (int i = 0; i < 36; i++)
		{
			UpdownCUBE3[i][0] = array5x3[i][0];
			UpdownCUBE3[i][1] = array5x3[i][1];
			UpdownCUBE3[i][2] = array5x3[i][2];
		}

		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		play_time_flag += 1;
	}
	if (Second == 11 && play_time_flag == 11)
	{
		for (int i = 0; i < 5; i++)
		{
			if (i % 2 == 0)
			{
				for (int j = 0; j < 6; j++)
				{
					Floor_Color[30 * i + j + 6][0] = 0.82f;
					Floor_Color[30 * i + j + 6][1] = 0.82f;
					Floor_Color[30 * i + j + 6][2] = 0.82f;
					Floor_Color[30 * i + j ][0] = 1.0f;
					Floor_Color[30 * i + j ][1] = 0.0f;
					Floor_Color[30 * i + j ][2] = 0.0f;


				}
			}
			else
			{
				for (int j = 0; j < 6; j++)
				{
					Floor_Color[30 * i + j + 6][0] = 1.0f;
					Floor_Color[30 * i + j + 6][1] = 0.98f;
					Floor_Color[30 * i + j + 6][2] = 0.98f;
					Floor_Color[30 * i + j ][0] = 1.0f;
					Floor_Color[30 * i + j ][1] = 0.0f;
					Floor_Color[30 * i + j ][2] = 0.0f;


				}
			}


		}
		for (int i = 0; i < 36; i++)
		{
			UpdownCUBE2[i][0] = array5x2[i][0];
			UpdownCUBE2[i][1] = array5x2[i][1];
			UpdownCUBE2[i][2] = array5x2[i][2];
		}

		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		play_time_flag += 1;
	}
	if (Second == 12 && play_time_flag == 12)
	{
		for (int i = 0; i < 5; i++)
		{
			if (i % 2 == 0)
			{
				for (int j = 0; j < 6; j++)
				{
					Floor_Color[30 * i + j][0] = 1.0f;
					Floor_Color[30 * i + j][1] = 0.98f;
					Floor_Color[30 * i + j][2] = 0.98f;



				}
			}
			else
			{
				for (int j = 0; j < 6; j++)
				{
					Floor_Color[30 * i + j][0] = 0.82f;
					Floor_Color[30 * i + j][1] = 0.82f;
					Floor_Color[30 * i + j][2] = 0.82f;



				}
			}


		}
		for (int i = 0; i < 36; i++)
		{
			UpdownCUBE1[i][0] = array5x1[i][0];
			UpdownCUBE1[i][1] = array5x1[i][1];
			UpdownCUBE1[i][2] = array5x1[i][2];
		}

		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		play_time_flag += 1;
	}
	if (Second == 13 && play_time_flag == 13)
	{

		for (int i = 0; i < 36; i++)
		{
			UpdownCUBE1[i][0] = Go1[i][0];
			UpdownCUBE1[i][1] = Go1[i][1];
			UpdownCUBE1[i][2] = Go1[i][2];

			UpdownCUBE2[i][0] = array5x1[i][0]; // == Go2
			UpdownCUBE2[i][1] = array5x1[i][1];
			UpdownCUBE2[i][2] = array5x1[i][2];

			UpdownCUBE3[i][0] = Go3[i][0];
			UpdownCUBE3[i][1] = Go3[i][1];
			UpdownCUBE3[i][2] = Go3[i][2];

			UpdownCUBE4[i][0] = Go4[i][0];
			UpdownCUBE4[i][1] = Go4[i][1];
			UpdownCUBE4[i][2] = Go4[i][2];

			UpdownCUBE5[i][0] = Go5[i][0];
			UpdownCUBE5[i][1] = Go5[i][1];
			UpdownCUBE5[i][2] = Go5[i][2];
		}

		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		play_time_flag += 2;
	}
	if (Second == 15 && play_time_flag == 15)
	{
		for (int i = 0; i < 36; i++)
		{
			UpdownCUBE1[i][0] = Go1[i][0];
			UpdownCUBE1[i][1] = Go1[i][1];
			UpdownCUBE1[i][2] = Go1[i][2];

			UpdownCUBE2[i][0] = array5x1[i][0]; // == Go2
			UpdownCUBE2[i][1] = array5x1[i][1];
			UpdownCUBE2[i][2] = array5x1[i][2];

			UpdownCUBE3[i][0] = Go3[i][0];
			UpdownCUBE3[i][1] = Go3[i][1];
			UpdownCUBE3[i][2] = Go3[i][2];

			UpdownCUBE4[i][0] = array5x5[i][0];
			UpdownCUBE4[i][1] = array5x5[i][1];
			UpdownCUBE4[i][2] = array5x5[i][2];
		}
		for (int i = 0; i < 30; i++)
		{

			Floor_Color[i][0] = 0.0f;
			Floor_Color[i][1] = 1.0f;
			Floor_Color[i][2] = 1.0f;
			Floor_Color[i + 30][0] = 0.0f;
			Floor_Color[i + 30][1] = 1.0f;
			Floor_Color[i + 30][2] = 1.0f;

			Floor_Color[i + 90][0] = 0.0f;
			Floor_Color[i + 90][1] = 1.0f;
			Floor_Color[i + 90][2] = 1.0f;
			Floor_Color[i + 120][0] = 0.0f;
			Floor_Color[i + 120][1] = 1.0f;
			Floor_Color[i + 120][2] = 1.0f;

		}


		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		play_time_flag += 1;
	}
	if (Second == 16 && play_time_flag == 16) // 16
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}
		for (int i = 0; i < 5; i++) //색깔 바꾸기
		{

				for (int j = 0; j < 6; j++)
				{
					Floor_Color[30 * i + j ][0] = 0.0f;
					Floor_Color[30 * i + j ][1] = 1.0f;
					Floor_Color[30 * i + j ][2] = 1.0f;
					Floor_Color[30 * i + j+6][0] = 0.0f;
					Floor_Color[30 * i + j+6][1] = 1.0f;
					Floor_Color[30 * i + j+6][2] = 1.0f;
					Floor_Color[30 * i + j + 18][0] = 0.0f;
					Floor_Color[30 * i + j + 18][1] = 1.0f;
					Floor_Color[30 * i + j + 18][2] = 1.0f;
					Floor_Color[30 * i + j + 24][0] = 0.0f;
					Floor_Color[30 * i + j + 24][1] = 1.0f;
					Floor_Color[30 * i + j + 24][2] = 1.0f;
				}



		}
		for (int i = 0; i < 36; i++) // 적 블럭 생성
		{

			sideleftCUBE1[i][0] = side_left5x1x2[i][0];
			sideleftCUBE1[i][1] = side_left5x1x2[i][1];
			sideleftCUBE1[i][2] = side_left5x1x2[i][2];

			sideleftCUBE2[i][0] = side_left5x4x5[i][0];
			sideleftCUBE2[i][1] = side_left5x4x5[i][1];
			sideleftCUBE2[i][2] = side_left5x4x5[i][2];
		}



		//-------------------- Gaster Sound -----------------------------
		PlaySound(TEXT("gaster_blaster.wav"), NULL, SND_FILENAME | SND_ASYNC);
		//---------------------------------------------------------------
		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);



		play_time_flag += 1;
	}
	if (Second == 17 && play_time_flag == 17)  // 17 완
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}
		for (int i = 0; i < 5; i++) //색깔 바꾸기
		{

			for (int j = 0; j < 6; j++) // 세로 색깔
			{


				Floor_Color[30 * i + j +6][0] = 0.0f;
				Floor_Color[30 * i + j +6][1] = 1.0f;
				Floor_Color[30 * i + j +6][2] = 1.0f;


				Floor_Color[30 * i + j + 18][0] = 0.0f;
				Floor_Color[30 * i + j + 18][1] = 1.0f;
				Floor_Color[30 * i + j + 18][2] = 1.0f;

			}



		}
		for (int i = 0; i < 30; i++) //가로 색깔
		{


			Floor_Color[i + 30][0] = 0.0f;
			Floor_Color[i + 30][1] = 1.0f;
			Floor_Color[i + 30][2] = 1.0f;

			Floor_Color[i + 120][0] = 0.0f;
			Floor_Color[i + 120][1] = 1.0f;
			Floor_Color[i + 120][2] = 1.0f;

		}

		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화
		{
			sideleftCUBE1[i][0] = sideset[i][0];
			sideleftCUBE1[i][1] = sideset[i][1];
			sideleftCUBE1[i][2] = sideset[i][2];

			sideleftCUBE2[i][0] = sideset[i][0];
			sideleftCUBE2[i][1] = sideset[i][1];
			sideleftCUBE2[i][2] = sideset[i][2];


			sideupCUBE1[i][0] = side_up5x1x2[i][0];
			sideupCUBE1[i][1] = side_up5x1x2[i][1];
			sideupCUBE1[i][2] = side_up5x1x2[i][2];

			sideupCUBE2[i][0] = side_up5x4x5[i][0];
			sideupCUBE2[i][1] = side_up5x4x5[i][1];
			sideupCUBE2[i][2] = side_up5x4x5[i][2];
		}



		//-------------------- Gaster Sound -----------------------------
		PlaySound(TEXT("gaster_blaster.wav"), NULL, SND_FILENAME | SND_ASYNC);
		//---------------------------------------------------------------
		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);
		play_time_flag += 1;
	}
	if (Second == 18 && play_time_flag == 18)  // 18 
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}
		for (int i = 0; i < 5; i++) //색깔 바꾸기
		{

			for (int j = 0; j < 6; j++) // 세로 색깔
			{


				Floor_Color[30 * i + j + 6][0] = 0.0f;
				Floor_Color[30 * i + j + 6][1] = 1.0f;
				Floor_Color[30 * i + j + 6][2] = 1.0f;


				Floor_Color[30 * i + j + 18][0] = 0.0f;
				Floor_Color[30 * i + j + 18][1] = 1.0f;
				Floor_Color[30 * i + j + 18][2] = 1.0f;

			}



		}
		for (int i = 0; i < 30; i++) // 가로 색깔 
		{

			Floor_Color[i][0] = 0.0f;
			Floor_Color[i][1] = 1.0f;
			Floor_Color[i][2] = 1.0f;

			Floor_Color[i + 90][0] = 0.0f;
			Floor_Color[i + 90][1] = 1.0f;
			Floor_Color[i + 90][2] = 1.0f;

		}
		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화
		{

			sideleftCUBE1[i][0] = side_left5x2[i][0];
			sideleftCUBE1[i][1] = side_left5x2[i][1];
			sideleftCUBE1[i][2] = side_left5x2[i][2];
		
			sideleftCUBE2[i][0] = side_left5x5[i][0];
			sideleftCUBE2[i][1] = side_left5x5[i][1];
			sideleftCUBE2[i][2] = side_left5x5[i][2];


			sideupCUBE1[i][0] = side_up5x2[i][0];
			sideupCUBE1[i][1] = side_up5x2[i][1];
			sideupCUBE1[i][2] = side_up5x2[i][2];

			sideupCUBE2[i][0] = side_up5x4[i][0];
			sideupCUBE2[i][1] = side_up5x4[i][1];
			sideupCUBE2[i][2] = side_up5x4[i][2];
		}



		//-------------------- Gaster Sound -----------------------------
		PlaySound(TEXT("gaster_blaster.wav"), NULL, SND_FILENAME | SND_ASYNC);
		//---------------------------------------------------------------
		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);
		play_time_flag += 1;
	}
	if (Second == 19 && play_time_flag == 19)  // 19 완
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}
		for (int i = 0; i < 5; i++) //색깔 바꾸기
		{

			for (int j = 0; j < 6; j++) // 세로 색깔  ------->1초뒤 역할
			{


				Floor_Color[30 * i + j + 6][0] = 0.0f;
				Floor_Color[30 * i + j + 6][1] = 1.0f;
				Floor_Color[30 * i + j + 6][2] = 1.0f;


				Floor_Color[30 * i + j + 24][0] = 0.0f;
				Floor_Color[30 * i + j + 24][1] = 1.0f;
				Floor_Color[30 * i + j + 24][2] = 1.0f;

			}



		}
		for (int i = 0; i < 30; i++) // 가로 색깔  ------->1초뒤 역할
		{


			Floor_Color[i + 60][0] = 0.0f;
			Floor_Color[i + 60][1] = 1.0f;
			Floor_Color[i + 60][2] = 1.0f;

		}
		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{

			sideleftCUBE1[i][0] = side_left5x1[i][0];
			sideleftCUBE1[i][1] = side_left5x1[i][1];
			sideleftCUBE1[i][2] = side_left5x1[i][2];

			sideleftCUBE2[i][0] = side_left5x4[i][0];
			sideleftCUBE2[i][1] = side_left5x4[i][1];
			sideleftCUBE2[i][2] = side_left5x4[i][2];


			sideupCUBE1[i][0] = side_up5x2[i][0];
			sideupCUBE1[i][1] = side_up5x2[i][1];
			sideupCUBE1[i][2] = side_up5x2[i][2];

			sideupCUBE2[i][0] = side_up5x4[i][0];
			sideupCUBE2[i][1] = side_up5x4[i][1];
			sideupCUBE2[i][2] = side_up5x4[i][2];
		}



		//-------------------- Gaster Sound -----------------------------
		PlaySound(TEXT("gaster_blaster.wav"), NULL, SND_FILENAME | SND_ASYNC);
		//---------------------------------------------------------------
		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);
		play_time_flag += 1;
	}

	if (Second == 20 && play_time_flag == 20)  // 20 완
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}
		for (int i = 0; i < 5; i++) //색깔 바꾸기
		{

			for (int j = 0; j < 6; j++) // 세로 색깔  ------->1초뒤 역할
			{


				Floor_Color[30 * i + j + 12][0] = 0.0f;
				Floor_Color[30 * i + j + 12][1] = 1.0f;
				Floor_Color[30 * i + j + 12][2] = 1.0f;



			}



		}
		for (int i = 0; i < 30; i++) // 가로 색깔  ------->1초뒤 역할
		{


			Floor_Color[i + 30][0] = 0.0f;
			Floor_Color[i + 30][1] = 1.0f;
			Floor_Color[i + 30][2] = 1.0f;

		}
		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{
			// 가로
			sideleftCUBE1[i][0] = sideset[i][0];
			sideleftCUBE1[i][1] = sideset[i][1];
			sideleftCUBE1[i][2] = sideset[i][2];

			sideleftCUBE2[i][0] = side_left5x3[i][0];
			sideleftCUBE2[i][1] = side_left5x3[i][1];
			sideleftCUBE2[i][2] = side_left5x3[i][2];

			// 세로
			sideupCUBE1[i][0] = side_up5x2[i][0];
			sideupCUBE1[i][1] = side_up5x2[i][1];
			sideupCUBE1[i][2] = side_up5x2[i][2];

			sideupCUBE2[i][0] = side_up5x5[i][0];
			sideupCUBE2[i][1] = side_up5x5[i][1];
			sideupCUBE2[i][2] = side_up5x5[i][2];
		}



		//-------------------- Gaster Sound -----------------------------
		PlaySound(TEXT("gaster_blaster.wav"), NULL, SND_FILENAME | SND_ASYNC);
		//---------------------------------------------------------------
		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);
		play_time_flag += 1;
	}

	if (Second == 21 && play_time_flag == 21)  // 21
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}
		for (int i = 0; i < 5; i++) //색깔 바꾸기
		{

			for (int j = 0; j < 6; j++) // 세로 색깔  ------->1초뒤 역할
			{


				Floor_Color[30 * i + j + 18][0] = 0.0f;
				Floor_Color[30 * i + j + 18][1] = 1.0f;
				Floor_Color[30 * i + j + 18][2] = 1.0f;



			}



		}
		for (int i = 0; i < 30; i++) // 가로 색깔  ------->1초뒤 역할
		{


			Floor_Color[i + 60][0] = 0.0f;
			Floor_Color[i + 60][1] = 1.0f;
			Floor_Color[i + 60][2] = 1.0f;

		}
		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{
			// 가로
			sideleftCUBE2[i][0] = side_left5x2[i][0];
			sideleftCUBE2[i][1] = side_left5x2[i][1];
			sideleftCUBE2[i][2] = side_left5x2[i][2];

			// 세로
			sideupCUBE1[i][0] = side_up5x3[i][0];
			sideupCUBE1[i][1] = side_up5x3[i][1];
			sideupCUBE1[i][2] = side_up5x3[i][2];
			sideupCUBE2[i][0] = sideset[i][0];
			sideupCUBE2[i][1] = sideset[i][0];
			sideupCUBE2[i][2] = sideset[i][0];
		}



		//-------------------- Gaster Sound -----------------------------
		PlaySound(TEXT("gaster_blaster.wav"), NULL, SND_FILENAME | SND_ASYNC);
		//---------------------------------------------------------------
		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);
		play_time_flag += 1;
	}
	if (Second == 22 && play_time_flag == 22)  // 22완
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}
		for (int i = 0; i < 5; i++) //색깔 바꾸기
		{

			for (int j = 0; j < 6; j++) // 세로 색깔  ------->1초뒤 역할
			{


				Floor_Color[30 * i + j + 18][0] = 0.0f;
				Floor_Color[30 * i + j + 18][1] = 1.0f;
				Floor_Color[30 * i + j + 18][2] = 1.0f;



			}



		}
		for (int i = 0; i < 30; i++) // 가로 색깔  ------->1초뒤 역할
		{

			Floor_Color[i][0] = 0.0f;
			Floor_Color[i][1] = 1.0f;
			Floor_Color[i][2] = 1.0f;
			Floor_Color[i + 90][0] = 0.0f;
			Floor_Color[i + 90][1] = 1.0f;
			Floor_Color[i + 90][2] = 1.0f;

		}
		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{
			// 가로
			sideleftCUBE2[i][0] = side_left5x3[i][0];
			sideleftCUBE2[i][1] = side_left5x3[i][1];
			sideleftCUBE2[i][2] = side_left5x3[i][2];

			// 세로
			sideupCUBE1[i][0] = side_up5x4[i][0];
			sideupCUBE1[i][1] = side_up5x4[i][1];
			sideupCUBE1[i][2] = side_up5x4[i][2];
		}



		//-------------------- Gaster Sound -----------------------------
		PlaySound(TEXT("gaster_blaster.wav"), NULL, SND_FILENAME | SND_ASYNC);
		//---------------------------------------------------------------
		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);
		play_time_flag += 1;
	}

	if (Second == 23 && play_time_flag == 23)  // 23
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}
		for (int i = 0; i < 5; i++) //색깔 바꾸기
		{

			for (int j = 0; j < 6; j++) // 세로 색깔  ------->1초뒤 역할
			{


				Floor_Color[30 * i + j + 18][0] = 0.0f;
				Floor_Color[30 * i + j + 18][1] = 1.0f;
				Floor_Color[30 * i + j + 18][2] = 1.0f;



			}



		}
		for (int i = 0; i < 30; i++) // 가로 색깔  ------->1초뒤 역할
		{

			Floor_Color[i + 30][0] = 0.0f;
			Floor_Color[i + 30][1] = 1.0f;
			Floor_Color[i + 30][2] = 1.0f;

			Floor_Color[i + 120][0] = 0.0f;
			Floor_Color[i + 120][1] = 1.0f;
			Floor_Color[i + 120][2] = 1.0f;

		}
		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{
			// 가로
			sideleftCUBE1[i][0] = side_left5x1[i][0];
			sideleftCUBE1[i][1] = side_left5x1[i][1];
			sideleftCUBE1[i][2] = side_left5x1[i][2];

			sideleftCUBE2[i][0] = side_left5x4[i][0];
			sideleftCUBE2[i][1] = side_left5x4[i][1];
			sideleftCUBE2[i][2] = side_left5x4[i][2];

			// 세로
			sideupCUBE1[i][0] = side_up5x4[i][0];
			sideupCUBE1[i][1] = side_up5x4[i][1];
			sideupCUBE1[i][2] = side_up5x4[i][2];
		}



		//-------------------- Gaster Sound -----------------------------
		PlaySound(TEXT("gaster_blaster.wav"), NULL, SND_FILENAME | SND_ASYNC);
		//---------------------------------------------------------------
		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);
		play_time_flag += 1;
	}
	if (Second == 24 && play_time_flag == 24)  // 24
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}
		for (int i = 0; i < 5; i++) //색깔 바꾸기
		{

			for (int j = 0; j < 6; j++) // 세로 색깔  ------->1초뒤 역할
			{


				Floor_Color[30 * i + j + 18][0] = 0.0f;
				Floor_Color[30 * i + j + 18][1] = 1.0f;
				Floor_Color[30 * i + j + 18][2] = 1.0f;



			}



		}
		for (int i = 0; i < 30; i++) // 가로 색깔  ------->1초뒤 역할
		{

			Floor_Color[i + 60][0] = 0.0f;
			Floor_Color[i + 60][1] = 1.0f;
			Floor_Color[i + 60][2] = 1.0f;



		}
		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{
			// 가로
			sideleftCUBE1[i][0] = side_left5x2[i][0];
			sideleftCUBE1[i][1] = side_left5x2[i][1];
			sideleftCUBE1[i][2] = side_left5x2[i][2];

			sideleftCUBE2[i][0] = side_left5x5[i][0];
			sideleftCUBE2[i][1] = side_left5x5[i][1];
			sideleftCUBE2[i][2] = side_left5x5[i][2];

			// 세로
			sideupCUBE1[i][0] = side_up5x4[i][0];
			sideupCUBE1[i][1] = side_up5x4[i][1];
			sideupCUBE1[i][2] = side_up5x4[i][2];
		}



		//-------------------- Gaster Sound -----------------------------
		PlaySound(TEXT("gaster_blaster.wav"), NULL, SND_FILENAME | SND_ASYNC);
		//---------------------------------------------------------------
		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);
		play_time_flag += 1;
	}

	if (Second == 25 && play_time_flag == 25)  // 25
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}
		for (int i = 0; i < 5; i++) //색깔 바꾸기
		{

			for (int j = 0; j < 6; j++) // 세로 색깔  ------->1초뒤 역할
			{


				Floor_Color[30 * i + j + 12][0] = 0.0f;
				Floor_Color[30 * i + j + 12][1] = 1.0f;
				Floor_Color[30 * i + j + 12][2] = 1.0f;



			}



		}
		for (int i = 0; i < 30; i++) // 가로 색깔  ------->1초뒤 역할
		{

			Floor_Color[i + 90][0] = 0.0f;
			Floor_Color[i + 90][1] = 1.0f;
			Floor_Color[i + 90][2] = 1.0f;



		}
		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{
			// 가로
			sideleftCUBE1[i][0] = side_left5x3[i][0];
			sideleftCUBE1[i][1] = side_left5x3[i][1];
			sideleftCUBE1[i][2] = side_left5x3[i][2];

			sideleftCUBE2[i][0] = sideset[i][0];
			sideleftCUBE2[i][1] = sideset[i][1];
			sideleftCUBE2[i][2] = sideset[i][2];

			// 세로
			sideupCUBE1[i][0] = side_up5x4[i][0];
			sideupCUBE1[i][1] = side_up5x4[i][1];
			sideupCUBE1[i][2] = side_up5x4[i][2];
		}



		//-------------------- Gaster Sound -----------------------------
		PlaySound(TEXT("gaster_blaster.wav"), NULL, SND_FILENAME | SND_ASYNC);
		//---------------------------------------------------------------
		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);
		play_time_flag += 1;
	}

	if (Second == 26 && play_time_flag == 26)  // 26완
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}
		for (int i = 0; i < 5; i++) //색깔 바꾸기
		{

			for (int j = 0; j < 6; j++) // 세로 색깔  ------->1초뒤 역할
			{


				Floor_Color[30 * i + j + 6][0] = 0.0f;
				Floor_Color[30 * i + j + 6][1] = 1.0f;
				Floor_Color[30 * i + j + 6][2] = 1.0f;


				Floor_Color[30 * i + j + 24][0] = 0.0f;
				Floor_Color[30 * i + j + 24][1] = 1.0f;
				Floor_Color[30 * i + j + 24][2] = 1.0f;



			}



		}
		for (int i = 0; i < 30; i++) // 가로 색깔  ------->1초뒤 역할
		{

			Floor_Color[i + 90][0] = 0.0f;
			Floor_Color[i + 90][1] = 1.0f;
			Floor_Color[i + 90][2] = 1.0f;



		}
		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{
			// 가로
			sideleftCUBE1[i][0] = side_left5x4[i][0];
			sideleftCUBE1[i][1] = side_left5x4[i][1];
			sideleftCUBE1[i][2] = side_left5x4[i][2];


			// 세로
			sideupCUBE1[i][0] = side_up5x3[i][0];
			sideupCUBE1[i][1] = side_up5x3[i][1];
			sideupCUBE1[i][2] = side_up5x3[i][2];
		}



		//-------------------- Gaster Sound -----------------------------
		PlaySound(TEXT("gaster_blaster.wav"), NULL, SND_FILENAME | SND_ASYNC);
		//---------------------------------------------------------------
		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);
		play_time_flag += 1;
	}

	if (Second == 27 && play_time_flag == 27)  // 27
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}
		for (int i = 0; i < 5; i++) //색깔 바꾸기
		{

			for (int j = 0; j < 6; j++) // 세로 색깔  ------->1초뒤 역할
			{


				Floor_Color[30 * i + j][0] = 0.0f;
				Floor_Color[30 * i + j][1] = 1.0f;
				Floor_Color[30 * i + j][2] = 1.0f;


				Floor_Color[30 * i + j + 18][0] = 0.0f;
				Floor_Color[30 * i + j + 18][1] = 1.0f;
				Floor_Color[30 * i + j + 18][2] = 1.0f;



			}



		}
		for (int i = 0; i < 30; i++) // 가로 색깔  ------->1초뒤 역할
		{

			Floor_Color[i + 90][0] = 0.0f;
			Floor_Color[i + 90][1] = 1.0f;
			Floor_Color[i + 90][2] = 1.0f;



		}
		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{
			// 가로
			sideleftCUBE1[i][0] = side_left5x4[i][0];
			sideleftCUBE1[i][1] = side_left5x4[i][1];
			sideleftCUBE1[i][2] = side_left5x4[i][2];


			// 세로
			sideupCUBE1[i][0] = side_up5x2[i][0];
			sideupCUBE1[i][1] = side_up5x2[i][1];
			sideupCUBE1[i][2] = side_up5x2[i][2];

			sideupCUBE2[i][0] = side_up5x5[i][0];
			sideupCUBE2[i][1] = side_up5x5[i][1];
			sideupCUBE2[i][2] = side_up5x5[i][2];
		}



		//-------------------- Gaster Sound -----------------------------
		PlaySound(TEXT("gaster_blaster.wav"), NULL, SND_FILENAME | SND_ASYNC);
		//---------------------------------------------------------------
		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);
		play_time_flag += 1;
	}

	if (Second == 28 && play_time_flag == 28)  // 28
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}
		for (int i = 0; i < 5; i++) //색깔 바꾸기
		{

			for (int j = 0; j < 6; j++) // 세로 색깔  ------->1초뒤 역할
			{


				Floor_Color[30 * i + j + 12][0] = 0.0f;
				Floor_Color[30 * i + j + 12][1] = 1.0f;
				Floor_Color[30 * i + j + 12][2] = 1.0f;



			}



		}
		for (int i = 0; i < 30; i++) // 가로 색깔  ------->1초뒤 역할
		{

			Floor_Color[i + 90][0] = 0.0f;
			Floor_Color[i + 90][1] = 1.0f;
			Floor_Color[i + 90][2] = 1.0f;



		}
		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{
			// 가로
			sideleftCUBE1[i][0] = side_left5x4[i][0];
			sideleftCUBE1[i][1] = side_left5x4[i][1];
			sideleftCUBE1[i][2] = side_left5x4[i][2];


			// 세로
			sideupCUBE1[i][0] = side_up5x1[i][0];
			sideupCUBE1[i][1] = side_up5x1[i][1];
			sideupCUBE1[i][2] = side_up5x1[i][2];

			sideupCUBE2[i][0] = side_up5x4[i][0];
			sideupCUBE2[i][1] = side_up5x4[i][1];
			sideupCUBE2[i][2] = side_up5x4[i][2];
		}



		//-------------------- Gaster Sound -----------------------------
		PlaySound(TEXT("gaster_blaster.wav"), NULL, SND_FILENAME | SND_ASYNC);
		//---------------------------------------------------------------
		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);
		play_time_flag += 1;
	}

	if (Second == 29 && play_time_flag == 29)  // 29
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}
		for (int i = 0; i < 5; i++) //색깔 바꾸기
		{

			for (int j = 0; j < 6; j++) // 세로 색깔  ------->1초뒤 역할
			{


				Floor_Color[30 * i + j + 6][0] = 0.0f;
				Floor_Color[30 * i + j + 6][1] = 1.0f;
				Floor_Color[30 * i + j + 6][2] = 1.0f;



			}



		}
		for (int i = 0; i < 30; i++) // 가로 색깔  ------->1초뒤 역할
		{

			Floor_Color[i + 60][0] = 0.0f;
			Floor_Color[i + 60][1] = 1.0f;
			Floor_Color[i + 60][2] = 1.0f;



		}
		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{
			// 가로
			sideleftCUBE1[i][0] = side_left5x4[i][0];
			sideleftCUBE1[i][1] = side_left5x4[i][1];
			sideleftCUBE1[i][2] = side_left5x4[i][2];


			// 세로
			sideupCUBE1[i][0] = sideset[i][0];
			sideupCUBE1[i][1] = sideset[i][1];
			sideupCUBE1[i][2] = sideset[i][2];

			sideupCUBE2[i][0] = side_up5x3[i][0];
			sideupCUBE2[i][1] = side_up5x3[i][1];
			sideupCUBE2[i][2] = side_up5x3[i][2];
		}



		//-------------------- Gaster Sound -----------------------------
		PlaySound(TEXT("gaster_blaster.wav"), NULL, SND_FILENAME | SND_ASYNC);
		//---------------------------------------------------------------
		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);
		play_time_flag += 1;
	}

	if (Second == 30 && play_time_flag == 30)  // 30
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}

		for (int i = 0; i < 30; i++) // 가로 색깔  ------->1초뒤 역할
		{

			Floor_Color[i + 120][0] = 1.0f;
			Floor_Color[i + 120][1] = 1.0f;
			Floor_Color[i + 120][2] = 0.0f;



		}
		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{
			// 가로
			sideleftCUBE1[i][0] = side_left5x3[i][0];
			sideleftCUBE1[i][1] = side_left5x3[i][1];
			sideleftCUBE1[i][2] = side_left5x3[i][2];




			sideupCUBE2[i][0] = side_up5x2[i][0];
			sideupCUBE2[i][1] = side_up5x2[i][1];
			sideupCUBE2[i][2] = side_up5x2[i][2];

		}
		


		//-------------------- Gaster Sound -----------------------------
		PlaySound(TEXT("gaster_blaster.wav"), NULL, SND_FILENAME | SND_ASYNC);
		//---------------------------------------------------------------
		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[4]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);



		glBindBuffer(GL_ARRAY_BUFFER, VBO4[1]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		play_time_flag += 1;
	}
	if (Second == 31 && play_time_flag == 31)  // 31  -- 새로운 파트 
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}

		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{
			// 가로
			sideleftCUBE1[i][0] = sideset[i][0];
			sideleftCUBE1[i][1] = sideset[i][1];
			sideleftCUBE1[i][2] = sideset[i][2];




			sideupCUBE2[i][0] = sideset[i][0];
			sideupCUBE2[i][1] = sideset[i][1];
			sideupCUBE2[i][2] = sideset[i][2];

			yellowCUBE1[i][0] = yellowcube1x1[i][0];
			yellowCUBE1[i][1] = yellowcube1x1[i][1];
			yellowCUBE1[i][2] = yellowcube1x1[i][2];
		}



		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[4]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);



		glBindBuffer(GL_ARRAY_BUFFER, VBO4[1]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		play_time_flag += 1;
	}
	if (Second == 32 && play_time_flag == 32)  // 32  
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}


		for (int i = 0; i < 6; i++) // 가로 색깔  ------->1초뒤 역할
		{
			if (i % 2 == 0)
			{
				for (int j = 0; j < 18; ++j)
				{
					Floor_Color[30 * i + j][0] = 1.0f;
					Floor_Color[30 * i + j][1] = 0.0f;
					Floor_Color[30 * i + j][2] = 0.0f;
				}
			}
			else
			{
				for (int j = 18; j < 30; ++j)
				{
					Floor_Color[30 * i + j][0] = 1.0f;
					Floor_Color[30 * i + j][1] = 0.0f;
					Floor_Color[30 * i + j][2] = 0.0f;
				}
			}





		}
		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{

			yellowCUBE1[i][2] -= 2.0f;

			yellowCUBE2[i][0] = yellowcube1x5[i][0];
			yellowCUBE2[i][1] = yellowcube1x5[i][1];
			yellowCUBE2[i][2] = yellowcube1x5[i][2];
		}


		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[4]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);



		glBindBuffer(GL_ARRAY_BUFFER, VBO4[1]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		play_time_flag += 1;
	}

	if (Second == 33 && play_time_flag == 33)  // 33
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];

			
		}
		for (int i = 0; i < 6; i++) // 가로 색깔  ------->1초뒤 역할
		{
			if (i % 2 == 0)
			{
				for (int j = 18; j < 30; ++j)
				{
					Floor_Color[30 * i + j][0] = 1.0f;
					Floor_Color[30 * i + j][1] = 0.0f;
					Floor_Color[30 * i + j][2] = 0.0f;
				}
			}
			else
			{
				for (int j = 0; j < 18; ++j)
				{
					Floor_Color[30 * i + j][0] = 1.0f;
					Floor_Color[30 * i + j][1] = 0.0f;
					Floor_Color[30 * i + j][2] = 0.0f;
				}
			}

		}
		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{
			UpdownCUBE1[i][0] = Downcube5x1x3[i][0];
			UpdownCUBE1[i][1] = Downcube5x1x3[i][1];
			UpdownCUBE1[i][2] = Downcube5x1x3[i][2];

			UpdownCUBE2[i][0] = Downcube5x2x45[i][0];
			UpdownCUBE2[i][1] = Downcube5x2x45[i][1];
			UpdownCUBE2[i][2] = Downcube5x2x45[i][2];


			UpdownCUBE3[i][0] = Downcube5x3x3[i][0];
			UpdownCUBE3[i][1] = Downcube5x3x3[i][1];
			UpdownCUBE3[i][2] = Downcube5x3x3[i][2];

			UpdownCUBE4[i][0] = Downcube5x4x45[i][0];
			UpdownCUBE4[i][1] = Downcube5x4x45[i][1];
			UpdownCUBE4[i][2] = Downcube5x4x45[i][2];


			UpdownCUBE5[i][0] = Downcube5x5x3[i][0];
			UpdownCUBE5[i][1] = Downcube5x5x3[i][1];
			UpdownCUBE5[i][2] = Downcube5x5x3[i][2];


			yellowCUBE1[i][2] -= 2.0f;


			yellowCUBE2[i][2] -= 2.0f;

			yellowCUBE3[i][0] = yellowcube1x3[i][0];
			yellowCUBE3[i][1] = yellowcube1x3[i][1];
			yellowCUBE3[i][2] = yellowcube1x3[i][2];
		}



		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[4]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);



		glBindBuffer(GL_ARRAY_BUFFER, VBO4[1]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color_Copy[i][0] = Floor_Color_Copy2[i][0];
			Floor_Color_Copy[i][1] = Floor_Color_Copy2[i][1];
			Floor_Color_Copy[i][2] = Floor_Color_Copy2[i][2];


		}

		play_time_flag += 1;
	}

	if (Second == 34 && play_time_flag == 34)  // 34
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{

			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}


		for (int i = 0; i < 6; i++) // 가로 색깔  ------->1초뒤 역할
		{
			if (i % 2 == 0)
			{
				for (int j = 0; j < 18; ++j)
				{
					Floor_Color[30 * i + j][0] = 1.0f;
					Floor_Color[30 * i + j][1] = 0.0f;
					Floor_Color[30 * i + j][2] = 0.0f;
				}
			}
			else
			{
				for (int j = 18; j < 30; ++j)
				{
					Floor_Color[30 * i + j][0] = 1.0f;
					Floor_Color[30 * i + j][1] = 0.0f;
					Floor_Color[30 * i + j][2] = 0.0f;
				}
			}
		}
		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{

			UpdownCUBE1[i][0] = Downcube5x1x45[i][0];
			UpdownCUBE1[i][1] = Downcube5x1x45[i][1];
			UpdownCUBE1[i][2] = Downcube5x1x45[i][2];

			UpdownCUBE2[i][0] = Downcube5x2x3[i][0];
			UpdownCUBE2[i][1] = Downcube5x2x3[i][1];
			UpdownCUBE2[i][2] = Downcube5x2x3[i][2];


			UpdownCUBE3[i][0] = Downcube5x3x45[i][0];
			UpdownCUBE3[i][1] = Downcube5x3x45[i][1];
			UpdownCUBE3[i][2] = Downcube5x3x45[i][2];

			UpdownCUBE4[i][0] = Downcube5x4x3[i][0];
			UpdownCUBE4[i][1] = Downcube5x4x3[i][1];
			UpdownCUBE4[i][2] = Downcube5x4x3[i][2];


			UpdownCUBE5[i][0] = Downcube5x5x45[i][0];
			UpdownCUBE5[i][1] = Downcube5x5x45[i][1];
			UpdownCUBE5[i][2] = Downcube5x5x45[i][2];
			yellowCUBE1[i][2] -= 2.0f;


			yellowCUBE2[i][2] -= 2.0f;


			yellowCUBE3[i][2] -= 2.0f;

			yellowCUBE4[i][0] = yellowcube1x2[i][0];
			yellowCUBE4[i][1] = yellowcube1x2[i][1];
			yellowCUBE4[i][2] = yellowcube1x2[i][2];
		}



		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);
		glBindVertexArray(VAO[4]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);



		glBindBuffer(GL_ARRAY_BUFFER, VBO4[1]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		play_time_flag += 1;
	}
	if (Second == 35 && play_time_flag == 35)  // 35
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}

		for (int i = 0; i < 6; i++) // 가로 색깔  ------->1초뒤 역할
		{
			if (i % 2 == 0)
			{
				for (int j = 18; j < 30; ++j)
				{
					Floor_Color[30 * i + j][0] = 1.0f;
					Floor_Color[30 * i + j][1] = 0.0f;
					Floor_Color[30 * i + j][2] = 0.0f;
				}
			}
			else
			{
				for (int j = 0; j < 18; ++j)
				{
					Floor_Color[30 * i + j][0] = 1.0f;
					Floor_Color[30 * i + j][1] = 0.0f;
					Floor_Color[30 * i + j][2] = 0.0f;
				}
			}

		}
		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{

			UpdownCUBE1[i][0] = Downcube5x1x3[i][0];
			UpdownCUBE1[i][1] = Downcube5x1x3[i][1];
			UpdownCUBE1[i][2] = Downcube5x1x3[i][2];

			UpdownCUBE2[i][0] = Downcube5x2x45[i][0];
			UpdownCUBE2[i][1] = Downcube5x2x45[i][1];
			UpdownCUBE2[i][2] = Downcube5x2x45[i][2];


			UpdownCUBE3[i][0] = Downcube5x3x3[i][0];
			UpdownCUBE3[i][1] = Downcube5x3x3[i][1];
			UpdownCUBE3[i][2] = Downcube5x3x3[i][2];

			UpdownCUBE4[i][0] = Downcube5x4x45[i][0];
			UpdownCUBE4[i][1] = Downcube5x4x45[i][1];
			UpdownCUBE4[i][2] = Downcube5x4x45[i][2];


			UpdownCUBE5[i][0] = Downcube5x5x3[i][0];
			UpdownCUBE5[i][1] = Downcube5x5x3[i][1];
			UpdownCUBE5[i][2] = Downcube5x5x3[i][2];

			yellowCUBE1[i][2] -= 2.0f;


			yellowCUBE2[i][2] -= 2.0f;


			yellowCUBE3[i][2] -= 2.0f;


			yellowCUBE4[i][2] -= 2.0f;



			yellowCUBE5[i][0] = yellowcube1x4[i][0];
			yellowCUBE5[i][1] = yellowcube1x4[i][1];
			yellowCUBE5[i][2] = yellowcube1x4[i][2];
		}


		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[4]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);



		glBindBuffer(GL_ARRAY_BUFFER, VBO4[1]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);



		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color_Copy[i][0] = Floor_Color_Copy2[i][0];
			Floor_Color_Copy[i][1] = Floor_Color_Copy2[i][1];
			Floor_Color_Copy[i][2] = Floor_Color_Copy2[i][2];


		}
		play_time_flag += 1;
	}
	if (Second == 36 && play_time_flag == 36)  // 36
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}

		for (int i = 0; i < 6; i++) // 가로 색깔  ------->1초뒤 역할
		{
			if (i % 2 == 0)
			{
				for (int j = 0; j < 18; ++j)
				{
					Floor_Color[30 * i + j][0] = 1.0f;
					Floor_Color[30 * i + j][1] = 0.0f;
					Floor_Color[30 * i + j][2] = 0.0f;
				}
			}
			else
			{
				for (int j = 18; j < 30; ++j)
				{
					Floor_Color[30 * i + j][0] = 1.0f;
					Floor_Color[30 * i + j][1] = 0.0f;
					Floor_Color[30 * i + j][2] = 0.0f;
				}
			}

		}
		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{

			UpdownCUBE1[i][0] = Downcube5x1x45[i][0];
			UpdownCUBE1[i][1] = Downcube5x1x45[i][1];
			UpdownCUBE1[i][2] = Downcube5x1x45[i][2];

			UpdownCUBE2[i][0] = Downcube5x2x3[i][0];
			UpdownCUBE2[i][1] = Downcube5x2x3[i][1];
			UpdownCUBE2[i][2] = Downcube5x2x3[i][2];


			UpdownCUBE3[i][0] = Downcube5x3x45[i][0];
			UpdownCUBE3[i][1] = Downcube5x3x45[i][1];
			UpdownCUBE3[i][2] = Downcube5x3x45[i][2];

			UpdownCUBE4[i][0] = Downcube5x4x3[i][0];
			UpdownCUBE4[i][1] = Downcube5x4x3[i][1];
			UpdownCUBE4[i][2] = Downcube5x4x3[i][2];


			UpdownCUBE5[i][0] = Downcube5x5x45[i][0];
			UpdownCUBE5[i][1] = Downcube5x5x45[i][1];
			UpdownCUBE5[i][2] = Downcube5x5x45[i][2];

			yellowCUBE1[i][2] += 8.0f;


			yellowCUBE2[i][2] -= 2.0f;


			yellowCUBE3[i][2] -= 2.0f;


			yellowCUBE4[i][2] -= 2.0f;

			yellowCUBE5[i][2] -= 2.0f;

		}


		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[4]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO4[1]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		play_time_flag += 1;
	}

	if (Second == 37 && play_time_flag == 37)  // 37
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}

		for (int i = 0; i < 6; i++) // 가로 색깔  ------->1초뒤 역할
		{
			if (i % 2 == 0)
			{
				for (int j = 18; j < 30; ++j)
				{
					Floor_Color[30 * i + j][0] = 1.0f;
					Floor_Color[30 * i + j][1] = 0.0f;
					Floor_Color[30 * i + j][2] = 0.0f;
				}
			}
			else
			{
				for (int j = 0; j < 18; ++j)
				{
					Floor_Color[30 * i + j][0] = 1.0f;
					Floor_Color[30 * i + j][1] = 0.0f;
					Floor_Color[30 * i + j][2] = 0.0f;
				}
			}

		}
		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{

			UpdownCUBE1[i][0] = Downcube5x1x3[i][0];
			UpdownCUBE1[i][1] = Downcube5x1x3[i][1];
			UpdownCUBE1[i][2] = Downcube5x1x3[i][2];

			UpdownCUBE2[i][0] = Downcube5x2x45[i][0];
			UpdownCUBE2[i][1] = Downcube5x2x45[i][1];
			UpdownCUBE2[i][2] = Downcube5x2x45[i][2];


			UpdownCUBE3[i][0] = Downcube5x3x3[i][0];
			UpdownCUBE3[i][1] = Downcube5x3x3[i][1];
			UpdownCUBE3[i][2] = Downcube5x3x3[i][2];

			UpdownCUBE4[i][0] = Downcube5x4x45[i][0];
			UpdownCUBE4[i][1] = Downcube5x4x45[i][1];
			UpdownCUBE4[i][2] = Downcube5x4x45[i][2];


			UpdownCUBE5[i][0] = Downcube5x5x3[i][0];
			UpdownCUBE5[i][1] = Downcube5x5x3[i][1];
			UpdownCUBE5[i][2] = Downcube5x5x3[i][2];

			yellowCUBE1[i][2] -= 2.0f;


			yellowCUBE2[i][2] += 8.0f;


			yellowCUBE3[i][2] -= 2.0f;


			yellowCUBE4[i][2] -= 2.0f;

			yellowCUBE5[i][2] -= 2.0f;

		}


		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[4]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);



		glBindBuffer(GL_ARRAY_BUFFER, VBO4[1]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);



		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color_Copy[i][0] = Floor_Color_Copy2[i][0];
			Floor_Color_Copy[i][1] = Floor_Color_Copy2[i][1];
			Floor_Color_Copy[i][2] = Floor_Color_Copy2[i][2];


		}
		play_time_flag += 1;
	}
	if (Second == 38 && play_time_flag == 38)  // 38
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}

		for (int i = 0; i < 6; i++) // 가로 색깔  ------->1초뒤 역할
		{
			if (i % 2 == 0)
			{
				for (int j = 0; j < 18; ++j)
				{
					Floor_Color[30 * i + j][0] = 1.0f;
					Floor_Color[30 * i + j][1] = 0.0f;
					Floor_Color[30 * i + j][2] = 0.0f;
				}
			}
			else
			{
				for (int j = 18; j < 30; ++j)
				{
					Floor_Color[30 * i + j][0] = 1.0f;
					Floor_Color[30 * i + j][1] = 0.0f;
					Floor_Color[30 * i + j][2] = 0.0f;
				}
			}

		}
		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{

			UpdownCUBE1[i][0] = Downcube5x1x45[i][0];
			UpdownCUBE1[i][1] = Downcube5x1x45[i][1];
			UpdownCUBE1[i][2] = Downcube5x1x45[i][2];

			UpdownCUBE2[i][0] = Downcube5x2x3[i][0];
			UpdownCUBE2[i][1] = Downcube5x2x3[i][1];
			UpdownCUBE2[i][2] = Downcube5x2x3[i][2];


			UpdownCUBE3[i][0] = Downcube5x3x45[i][0];
			UpdownCUBE3[i][1] = Downcube5x3x45[i][1];
			UpdownCUBE3[i][2] = Downcube5x3x45[i][2];

			UpdownCUBE4[i][0] = Downcube5x4x3[i][0];
			UpdownCUBE4[i][1] = Downcube5x4x3[i][1];
			UpdownCUBE4[i][2] = Downcube5x4x3[i][2];


			UpdownCUBE5[i][0] = Downcube5x5x45[i][0];
			UpdownCUBE5[i][1] = Downcube5x5x45[i][1];
			UpdownCUBE5[i][2] = Downcube5x5x45[i][2];

			yellowCUBE1[i][2] -= 2.0f;


			yellowCUBE2[i][2] -= 2.0f;


			yellowCUBE3[i][2] += 8.0f;


			yellowCUBE4[i][2] -= 2.0f;

			yellowCUBE5[i][2] -= 2.0f;

		}


		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[4]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);



		glBindBuffer(GL_ARRAY_BUFFER, VBO4[1]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		play_time_flag += 1;
	}

	if (Second == 39 && play_time_flag == 39)  // 39
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}

		for (int i = 0; i < 6; i++) // 가로 색깔  ------->1초뒤 역할
		{
			if (i % 2 == 0 )
			{
				for (int j = 18; j < 30; ++j)
				{
					Floor_Color[30 * i + j][0] = 1.0f;
					Floor_Color[30 * i + j][1] = 0.0f;
					Floor_Color[30 * i + j][2] = 0.0f;
				}
			}
			else
			{
				for (int j = 0; j < 18; ++j)
				{
					Floor_Color[30 * i + j][0] = 1.0f;
					Floor_Color[30 * i + j][1] = 0.0f;
					Floor_Color[30 * i + j][2] = 0.0f;
				}
			}

		}
		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{

			UpdownCUBE1[i][0] = Downcube5x1x3[i][0];
			UpdownCUBE1[i][1] = Downcube5x1x3[i][1];
			UpdownCUBE1[i][2] = Downcube5x1x3[i][2];

			UpdownCUBE2[i][0] = Downcube5x2x45[i][0];
			UpdownCUBE2[i][1] = Downcube5x2x45[i][1];
			UpdownCUBE2[i][2] = Downcube5x2x45[i][2];


			UpdownCUBE3[i][0] = Downcube5x3x3[i][0];
			UpdownCUBE3[i][1] = Downcube5x3x3[i][1];
			UpdownCUBE3[i][2] = Downcube5x3x3[i][2];

			UpdownCUBE4[i][0] = Downcube5x4x45[i][0];
			UpdownCUBE4[i][1] = Downcube5x4x45[i][1];
			UpdownCUBE4[i][2] = Downcube5x4x45[i][2];


			UpdownCUBE5[i][0] = Downcube5x5x3[i][0];
			UpdownCUBE5[i][1] = Downcube5x5x3[i][1];
			UpdownCUBE5[i][2] = Downcube5x5x3[i][2];

			yellowCUBE1[i][2] -= 2.0f;


			yellowCUBE2[i][2] -= 2.0f;


			yellowCUBE3[i][2] -= 2.0f;


			yellowCUBE4[i][2] += 8.0f;

			yellowCUBE5[i][2] -= 2.0f;

		}


		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);
		glBindVertexArray(VAO[4]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO4[1]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);



		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color_Copy[i][0] = Floor_Color_Copy2[i][0];
			Floor_Color_Copy[i][1] = Floor_Color_Copy2[i][1];
			Floor_Color_Copy[i][2] = Floor_Color_Copy2[i][2];


		}
		play_time_flag += 1;
	}
	if (Second == 40 && play_time_flag == 40)  // 40 // 여기까지 했는데 Realse 모드가 많이 이상함..?
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}

		for (int i = 0; i < 6; i++) // 가로 색깔  ------->1초뒤 역할
		{
			Floor_Color[72 + i][0] = 1.0f;
			Floor_Color[72 + i][1] = 1.0f;
			Floor_Color[72 + i][2] = 0.0f;

		}
		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{

			UpdownCUBE1[i][0] = Downcube5x1x45[i][0];
			UpdownCUBE1[i][1] = Downcube5x1x45[i][1];
			UpdownCUBE1[i][2] = Downcube5x1x45[i][2];

			UpdownCUBE2[i][0] = Downcube5x2x3[i][0];
			UpdownCUBE2[i][1] = Downcube5x2x3[i][1];
			UpdownCUBE2[i][2] = Downcube5x2x3[i][2];


			UpdownCUBE3[i][0] = Downcube5x3x45[i][0];
			UpdownCUBE3[i][1] = Downcube5x3x45[i][1];
			UpdownCUBE3[i][2] = Downcube5x3x45[i][2];

			UpdownCUBE4[i][0] = Downcube5x4x3[i][0];
			UpdownCUBE4[i][1] = Downcube5x4x3[i][1];
			UpdownCUBE4[i][2] = Downcube5x4x3[i][2];


			UpdownCUBE5[i][0] = Downcube5x5x45[i][0];
			UpdownCUBE5[i][1] = Downcube5x5x45[i][1];
			UpdownCUBE5[i][2] = Downcube5x5x45[i][2];

			yellowCUBE1[i][2] -= 2.0f;


			yellowCUBE2[i][2] -= 2.0f;


			yellowCUBE3[i][2] -= 2.0f;


			yellowCUBE4[i][2] -= 2.0f;

			yellowCUBE5[i][2] += 8.0f;

		}


		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);
		glBindVertexArray(VAO[4]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		play_time_flag += 1;
	}

	if (Second == 41 && play_time_flag == 41)  // 41
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}

		for (int i = 0; i < 6; i++) // 가로 색깔  ------->1초뒤 역할
		{
			Floor_Color[72 + i][0] = 1.0f;
			Floor_Color[72 + i][1] = 1.0f;
			Floor_Color[72 + i][2] = 0.0f;

		}
		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{

			yellowCUBE1[i][0] = sideset[i][0];
			yellowCUBE1[i][1] = sideset[i][1];
			yellowCUBE1[i][2] = sideset[i][2];


			yellowCUBE2[i][2] -= 2.0f;


			yellowCUBE3[i][2] -= 2.0f;


			yellowCUBE4[i][2] -= 2.0f;

			yellowCUBE5[i][2] -= 2.0f;

		}


		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);
		glBindVertexArray(VAO[4]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		play_time_flag += 1;
	}

	if (Second == 42 && play_time_flag == 42)  // 42
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}

		for (int i = 0; i < 4; i++) // 가로 색깔  ------->1초뒤 역할
		{
			for (int j = 0; j < 30; j++)
			{
				Floor_Color[30 * i + j][0] = 0.0f;
				Floor_Color[30 * i + j][1] = 1.0f;
				Floor_Color[30 * i + j][2] = 1.0f;
			}

		}
		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{


			yellowCUBE2[i][0] = sideset[i][0];
			yellowCUBE2[i][1] = sideset[i][1];
			yellowCUBE2[i][2] = sideset[i][2];

			yellowCUBE3[i][2] -= 2.0f;

			yellowCUBE4[i][2] -= 2.0f;

			yellowCUBE5[i][2] -= 2.0f;

			yellowCUBE6[i][0] = One_block_yellow3x3[i][0];
			yellowCUBE6[i][1] = One_block_yellow3x3[i][1];
			yellowCUBE6[i][2] = One_block_yellow3x3[i][2];


		}


		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);
		glBindVertexArray(VAO[4]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		play_time_flag += 1;
	}

	if (Second == 43 && play_time_flag == 43)  // 43
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}

		for (int i = 0; i < 5; i++) // 가로 색깔  ------->1초뒤 역할
		{
			for (int j = 0; j < 24; j++)
			{
				Floor_Color[30 * i + j][0] = 0.0f;
				Floor_Color[30 * i + j][1] = 1.0f;
				Floor_Color[30 * i + j][2] = 1.0f;
			}

		}
		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{

			sideleftCUBE1[i][0] = side_left43s[i][0];
			sideleftCUBE1[i][1] = side_left43s[i][1];
			sideleftCUBE1[i][2] = side_left43s[i][2];



			yellowCUBE3[i][0] = sideset[i][0];
			yellowCUBE3[i][1] = sideset[i][1];
			yellowCUBE3[i][2] = sideset[i][2];

			yellowCUBE4[i][2] -= 2.0f;

			yellowCUBE5[i][2] -= 2.0f;


			// 회오리모양으로 움직이는 블럭
			yellowCUBE6[i][0] -= 2.0f;



		}



		//-------------------- Gaster Sound -----------------------------
		PlaySound(TEXT("gaster_blaster.wav"), NULL, SND_FILENAME | SND_ASYNC);
		//---------------------------------------------------------------

		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);
		glBindVertexArray(VAO[4]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		play_time_flag += 1;
	}

	if (Second == 44 && play_time_flag == 44)  // 44
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}

		for (int i = 1; i < 5; i++) // 가로 색깔  ------->1초뒤 역할
		{
			for (int j = 0; j < 30; j++)
			{
				Floor_Color[30 * i + j][0] = 0.0f;
				Floor_Color[30 * i + j][1] = 1.0f;
				Floor_Color[30 * i + j][2] = 1.0f;
			}

		}
		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{

			sideleftCUBE1[i][0] = sideset[i][0];
			sideleftCUBE1[i][1] = sideset[i][1];
			sideleftCUBE1[i][2] = sideset[i][2];

			sideupCUBE1[i][0] = side_up44s[i][0];
			sideupCUBE1[i][1] = side_up44s[i][1];
			sideupCUBE1[i][2] = side_up44s[i][2];

			yellowCUBE4[i][0] = sideset[i][0];
			yellowCUBE4[i][1] = sideset[i][1];
			yellowCUBE4[i][2] = sideset[i][2];

			yellowCUBE5[i][2] -= 2.0f;


			// 회오리모양으로 움직이는 블럭 
			yellowCUBE6[i][2] += 2.0f;



		}


		//-------------------- Gaster Sound -----------------------------
		PlaySound(TEXT("gaster_blaster.wav"), NULL, SND_FILENAME | SND_ASYNC);
		//---------------------------------------------------------------

		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[4]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		play_time_flag += 1;
	}

	if (Second == 45 && play_time_flag == 45)  // 45
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}

		for (int i = 0; i < 5; i++) // 가로 색깔  ------->1초뒤 역할
		{
			for (int j = 6; j < 30; j++)
			{
				Floor_Color[30 * i + j][0] = 0.0f;
				Floor_Color[30 * i + j][1] = 1.0f;
				Floor_Color[30 * i + j][2] = 1.0f;
			}

		}
		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{

			sideleftCUBE1[i][0] = side_left45s[i][0];
			sideleftCUBE1[i][1] = side_left45s[i][1];
			sideleftCUBE1[i][2] = side_left45s[i][2];

			sideupCUBE1[i][0] = sideset[i][0];
			sideupCUBE1[i][1] = sideset[i][1];
			sideupCUBE1[i][2] = sideset[i][2];

			yellowCUBE5[i][0] = sideset[i][0];
			yellowCUBE5[i][1] = sideset[i][1];
			yellowCUBE5[i][2] = sideset[i][2];

			// 회오리모양으로 움직이는 블럭 
			yellowCUBE6[i][0] += 2.0f;



		}


		//-------------------- Gaster Sound -----------------------------
		PlaySound(TEXT("gaster_blaster.wav"), NULL, SND_FILENAME | SND_ASYNC);
		//---------------------------------------------------------------

		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);
		glBindVertexArray(VAO[4]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		play_time_flag += 1;
	}

	if (Second == 46 && play_time_flag == 46)  // 46
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}

		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{

			sideleftCUBE1[i][0] = sideset[i][0];
			sideleftCUBE1[i][1] = sideset[i][0];
			sideleftCUBE1[i][2] = sideset[i][0];

			sideupCUBE1[i][0] = side_up46s[i][0];
			sideupCUBE1[i][1] = side_up46s[i][1];
			sideupCUBE1[i][2] = side_up46s[i][2];


			// 회오리모양으로 움직이는 블럭 
			yellowCUBE6[i][0] += 2.0f;



		}


		//-------------------- Gaster Sound -----------------------------
		PlaySound(TEXT("gaster_blaster.wav"), NULL, SND_FILENAME | SND_ASYNC);
		//---------------------------------------------------------------

		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[4]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		play_time_flag += 1;
	}

	if (Second == 47 && play_time_flag == 47)  // 47
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}

		for (int i = 0; i < 5; i++) // 가로 색깔  ------->1초뒤 역할
		{
			for (int j = 0; j < 6; j++) //1 3 5 색깔
			{
				Floor_Color[30 * i + j][0] = 1.0f;
				Floor_Color[30 * i + j][1] = 0.0f;
				Floor_Color[30 * i + j][2] = 0.0f;

				Floor_Color[30 * i + j + 12][0] = 1.0f;
				Floor_Color[30 * i + j + 12][1] = 0.0f;
				Floor_Color[30 * i + j + 12][2] = 0.0f;

				Floor_Color[30 * i + j + 24][0] = 1.0f;
				Floor_Color[30 * i + j + 24][1] = 0.0f;
				Floor_Color[30 * i + j + 24][2] = 0.0f;
			}

		}

		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{

			sideupCUBE1[i][0] = sideset[i][0];
			sideupCUBE1[i][1] = sideset[i][1];
			sideupCUBE1[i][2] = sideset[i][2];


			// 회오리모양으로 움직이는 블럭 
			yellowCUBE6[i][2] -= 2.0f;



		}

		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);
		glBindVertexArray(VAO[4]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		play_time_flag += 1;
	}

	if (Second == 48 && play_time_flag == 48)  // 48
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}

		for (int i = 0; i < 5; i++) // 가로 색깔  ------->1초뒤 역할
		{
			for (int j = 0; j < 6; j++) //1 3 5 색깔
			{
				Floor_Color[30 * i + j + 6][0] = 1.0f;
				Floor_Color[30 * i + j + 6][1] = 0.0f;
				Floor_Color[30 * i + j + 6][2] = 0.0f;

				Floor_Color[30 * i + j + 18][0] = 1.0f;
				Floor_Color[30 * i + j + 18][1] = 0.0f;
				Floor_Color[30 * i + j + 18][2] = 0.0f;
			}

		}

		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{

			UpdownCUBE1[i][0] = array5x1[i][0];
			UpdownCUBE1[i][1] = array5x1[i][1];
			UpdownCUBE1[i][2] = array5x1[i][2];

			UpdownCUBE3[i][0] = array5x3[i][0];
			UpdownCUBE3[i][1] = array5x3[i][1];
			UpdownCUBE3[i][2] = array5x3[i][2];

			UpdownCUBE5[i][0] = array5x5[i][0];
			UpdownCUBE5[i][1] = array5x5[i][1];
			UpdownCUBE5[i][2] = array5x5[i][2];


			// 회오리모양으로 움직이는 블럭 
			yellowCUBE6[i][2] -= 2.0f;



		}


		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);
		glBindVertexArray(VAO[4]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		play_time_flag += 1;
	}

	if (Second == 49 && play_time_flag == 49)  // 49
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}

		for (int i = 0; i < 5; i++) // 가로 색깔  ------->1초뒤 역할
		{
			for (int j = 0; j < 6; j++) //1 3 5 색깔
			{
				Floor_Color[30 * i + j][0] = 1.0f;
				Floor_Color[30 * i + j][1] = 0.0f;
				Floor_Color[30 * i + j][2] = 0.0f;

				Floor_Color[30 * i + j + 12][0] = 1.0f;
				Floor_Color[30 * i + j + 12][1] = 0.0f;
				Floor_Color[30 * i + j + 12][2] = 0.0f;

				Floor_Color[30 * i + j + 24][0] = 1.0f;
				Floor_Color[30 * i + j + 24][1] = 0.0f;
				Floor_Color[30 * i + j + 24][2] = 0.0f;
			}

		}

		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{

			UpdownCUBE2[i][0] = array5x2[i][0];
			UpdownCUBE2[i][1] = array5x2[i][1];
			UpdownCUBE2[i][2] = array5x2[i][2];

			UpdownCUBE4[i][0] = array5x4[i][0];
			UpdownCUBE4[i][1] = array5x4[i][1];
			UpdownCUBE4[i][2] = array5x4[i][2];


			// 회오리모양으로 움직이는 블럭 
			yellowCUBE6[i][0] -= 2.0f;



		}

		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[4]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		play_time_flag += 1;
	}

	if (Second == 50 && play_time_flag == 50)  // 50
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}

		for (int i = 0; i < 5; i++) // 가로 색깔  ------->1초뒤 역할
		{
			for (int j = 0; j < 6; j++) //1 3 5 색깔
			{
				Floor_Color[30 * i + j + 6][0] = 1.0f;
				Floor_Color[30 * i + j + 6][1] = 0.0f;
				Floor_Color[30 * i + j + 6][2] = 0.0f;

				Floor_Color[30 * i + j + 18][0] = 1.0f;
				Floor_Color[30 * i + j + 18][1] = 0.0f;
				Floor_Color[30 * i + j + 18][2] = 0.0f;
			}

		}

		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{

			UpdownCUBE1[i][0] = array5x1[i][0];
			UpdownCUBE1[i][1] = array5x1[i][1];
			UpdownCUBE1[i][2] = array5x1[i][2];

			UpdownCUBE3[i][0] = array5x3[i][0];
			UpdownCUBE3[i][1] = array5x3[i][1];
			UpdownCUBE3[i][2] = array5x3[i][2];

			UpdownCUBE5[i][0] = array5x5[i][0];
			UpdownCUBE5[i][1] = array5x5[i][1];
			UpdownCUBE5[i][2] = array5x5[i][2];



			// 회오리모양으로 움직이는 블럭 
			yellowCUBE6[i][0] -= 2.0f;



		}


		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);
		glBindVertexArray(VAO[4]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		play_time_flag += 1;
	}

	if (Second == 51 && play_time_flag == 51)  // 51
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}

		for (int i = 0; i < 30; i++) // 가로 색깔  ------->1초뒤 역할
		{
			Floor_Color[120 + i][0] = 1.0f;
			Floor_Color[120 + i][1] = 1.0f;
			Floor_Color[120 + i][2] = 0.0f;
		}

		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{

			UpdownCUBE2[i][0] = array5x2[i][0];
			UpdownCUBE2[i][1] = array5x2[i][1];
			UpdownCUBE2[i][2] = array5x2[i][2];

			UpdownCUBE4[i][0] = array5x4[i][0];
			UpdownCUBE4[i][1] = array5x4[i][1];
			UpdownCUBE4[i][2] = array5x4[i][2];



			// 회오리모양으로 움직이는 블럭 
			yellowCUBE6[i][0] -= 2.0f;



		}

		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);
		glBindVertexArray(VAO[4]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		play_time_flag += 1;
	}

	if (Second == 52 && play_time_flag == 52)  // 52
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}


		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{

			yellowCUBE1[i][0] = yellowcube1x1[i][0];
			yellowCUBE1[i][1] = yellowcube1x1[i][1];
			yellowCUBE1[i][2] = yellowcube1x1[i][2];


			// 회오리모양으로 움직이는 블럭 
			yellowCUBE6[i][2] += 2.0f;



		}

		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);
		glBindVertexArray(VAO[4]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		play_time_flag += 1;
	}

	if (Second == 53 && play_time_flag == 53)  // 53
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}


		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{

			yellowCUBE1[i][2] -= 2.0f;

			yellowCUBE2[i][0] = yellowcube1x5[i][0];
			yellowCUBE2[i][1] = yellowcube1x5[i][1];
			yellowCUBE2[i][2] = yellowcube1x5[i][2];

			// 회오리모양으로 움직이는 블럭 
			yellowCUBE6[i][2] += 2.0f;



		}

		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);
		glBindVertexArray(VAO[4]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		play_time_flag += 1;
	}

	if (Second == 54 && play_time_flag == 54)  // 54
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}


		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{

			yellowCUBE1[i][2] -= 2.0f;

			yellowCUBE2[i][2] -= 2.0f;

			yellowCUBE3[i][0] = yellowcube1x3[i][0];
			yellowCUBE3[i][1] = yellowcube1x3[i][1];
			yellowCUBE3[i][2] = yellowcube1x3[i][2];

			// 회오리모양으로 움직이는 블럭 
			yellowCUBE6[i][2] += 2.0f;



		}

		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);
		glBindVertexArray(VAO[4]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		play_time_flag += 1;
	}


	if (Second == 55 && play_time_flag == 55)  // 55
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}


		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{

			yellowCUBE1[i][2] -= 2.0f;

			yellowCUBE2[i][2] -= 2.0f;

			yellowCUBE3[i][2] -= 2.0f;

			yellowCUBE4[i][0] = yellowcube1x2[i][0];
			yellowCUBE4[i][1] = yellowcube1x2[i][1];
			yellowCUBE4[i][2] = yellowcube1x2[i][2];

			// 회오리모양으로 움직이는 블럭 
			yellowCUBE6[i][0] += 2.0f;



		}

		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);
		glBindVertexArray(VAO[4]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		play_time_flag += 1;
	}

	if (Second == 56 && play_time_flag == 56)  // 56
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}


		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{

			yellowCUBE1[i][2] -= 2.0f;

			yellowCUBE2[i][2] -= 2.0f;

			yellowCUBE3[i][2] -= 2.0f;


			yellowCUBE4[i][2] -= 2.0f;


			yellowCUBE5[i][0] = yellowcube1x4[i][0];
			yellowCUBE5[i][1] = yellowcube1x4[i][1];
			yellowCUBE5[i][2] = yellowcube1x4[i][2];

			// 회오리모양으로 움직이는 블럭 
			yellowCUBE6[i][0] += 2.0f;



		}

		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);
		glBindVertexArray(VAO[4]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		play_time_flag += 1;
	}

	if (Second == 57 && play_time_flag == 57)  // 57
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}


		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{

			yellowCUBE1[i][2] += 8.0f;

			yellowCUBE2[i][2] -= 2.0f;

			yellowCUBE3[i][2] -= 2.0f;

			yellowCUBE4[i][2] -= 2.0f;

			yellowCUBE5[i][2] -= 2.0f;

			// 회오리모양으로 움직이는 블럭 
			yellowCUBE6[i][0] += 2.0f;



		}

		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[4]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		play_time_flag += 1;
	}

	if (Second == 58 && play_time_flag == 58)  // 58
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}


		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{

			yellowCUBE1[i][2] -= 2.0f;

			yellowCUBE2[i][2] += 8.0f;

			yellowCUBE3[i][2] -= 2.0f;

			yellowCUBE4[i][2] -= 2.0f;

			yellowCUBE5[i][2] -= 2.0f;

			// 회오리모양으로 움직이는 블럭 
			yellowCUBE6[i][0] += 2.0f;



		}

		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[4]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		play_time_flag += 1;
	}

	if (Second == 59 && play_time_flag == 59)  // 59
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}


		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{

			yellowCUBE1[i][2] -= 2.0f;

			yellowCUBE2[i][2] -= 2.0f;

			yellowCUBE3[i][2] += 8.0f;

			yellowCUBE4[i][2] -= 2.0f;

			yellowCUBE5[i][2] -= 2.0f;

			// 회오리모양으로 움직이는 블럭 
			yellowCUBE6[i][2] -= 2.0f;



		}

		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[4]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		play_time_flag += 1;
	}

	if (Second == 60 && play_time_flag == 60)  // 60
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}


		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{

			yellowCUBE1[i][2] -= 2.0f;

			yellowCUBE2[i][2] -= 2.0f;

			yellowCUBE3[i][2] -= 2.0f;

			yellowCUBE4[i][2] += 8.0f;

			yellowCUBE5[i][2] -= 2.0f;

			// 회오리모양으로 움직이는 블럭 
			yellowCUBE6[i][2] -= 2.0f;



		}

		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);
		glBindVertexArray(VAO[4]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		play_time_flag += 1;
	}

	if (Second == 61 && play_time_flag == 61)  // 61
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}


		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{

			yellowCUBE1[i][2] -= 2.0f;

			yellowCUBE2[i][2] -= 2.0f;

			yellowCUBE3[i][2] -= 2.0f;

			yellowCUBE4[i][2] -= 2.0f;

			yellowCUBE5[i][2] += 8.0f;

			// 회오리모양으로 움직이는 블럭 
			yellowCUBE6[i][2] -= 2.0f;



		}

		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[4]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		play_time_flag += 1;
	}

	if (Second == 62 && play_time_flag == 62)  // 62
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}


		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{

			yellowCUBE1[i][2] += 8.0f;

			yellowCUBE2[i][2] -= 2.0f;

			yellowCUBE3[i][2] -= 2.0f;

			yellowCUBE4[i][2] -= 2.0f;

			yellowCUBE5[i][2] -= 2.0f;

			// 회오리모양으로 움직이는 블럭 
			yellowCUBE6[i][2] -= 2.0f;



		}

		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[4]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		play_time_flag += 1;
	}

	if (Second == 63 && play_time_flag == 63)  // 63
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}


		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{

			yellowCUBE1[i][2] -= 2.0f;

			yellowCUBE2[i][2] += 8.0f;

			yellowCUBE3[i][2] -= 2.0f;

			yellowCUBE4[i][2] -= 2.0f;

			yellowCUBE5[i][2] -= 2.0f;

			// 회오리모양으로 움직이는 블럭 
			yellowCUBE6[i][0] -= 2.0f;



		}

		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[4]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		play_time_flag += 1;
	}

	if (Second == 64 && play_time_flag == 64)  // 64
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}


		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{

			yellowCUBE1[i][2] -= 2.0f;

			yellowCUBE2[i][2] -= 2.0f;

			yellowCUBE3[i][2] += 8.0f;

			yellowCUBE4[i][2] -= 2.0f;

			yellowCUBE5[i][2] -= 2.0f;

			// 회오리모양으로 움직이는 블럭 
			yellowCUBE6[i][0] -= 2.0f;



		}

		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[4]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		play_time_flag += 1;
	}

	if (Second == 65 && play_time_flag == 65)  // 65
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}


		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{

			yellowCUBE1[i][2] -= 2.0f;

			yellowCUBE2[i][2] -= 2.0f;

			yellowCUBE3[i][2] -= 2.0f;

			yellowCUBE4[i][2] += 8.0f;

			yellowCUBE5[i][2] -= 2.0f;

			// 회오리모양으로 움직이는 블럭 
			yellowCUBE6[i][0] -= 2.0f;



		}

		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[4]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		play_time_flag += 1;
	}

	if (Second == 66 && play_time_flag == 66)  // 66
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}


		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{

			yellowCUBE1[i][2] -= 2.0f;

			yellowCUBE2[i][2] -= 2.0f;

			yellowCUBE3[i][2] -= 2.0f;

			yellowCUBE4[i][2] -= 2.0f;

			yellowCUBE5[i][2] += 8.0f;

			// 회오리모양으로 움직이는 블럭 
			yellowCUBE6[i][0] -= 2.0f;



		}

		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[4]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		play_time_flag += 1;
	}

	if (Second == 67 && play_time_flag == 67)  // 67
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}


		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{

			yellowCUBE1[i][2] += 8.0f;

			yellowCUBE2[i][2] -= 2.0f;

			yellowCUBE3[i][2] -= 2.0f;

			yellowCUBE4[i][2] -= 2.0f;

			yellowCUBE5[i][2] -= 2.0f;

			// 회오리모양으로 움직이는 블럭 
			yellowCUBE6[i][0] = sideset[i][0];
			yellowCUBE6[i][1] = sideset[i][1];
			yellowCUBE6[i][2] = sideset[i][2];




		}

		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[4]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		play_time_flag += 1;
	}


	if (Second == 68 && play_time_flag == 68)  // 68
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}
		for (int i = 0; i < 36; i++)
		{
			UpdownCUBE1[i][0] = Go1[i][0];
			UpdownCUBE1[i][1] = Go1[i][1];
			UpdownCUBE1[i][2] = Go1[i][2];

			UpdownCUBE2[i][0] = array5x1[i][0]; // == Go2
			UpdownCUBE2[i][1] = array5x1[i][1];
			UpdownCUBE2[i][2] = array5x1[i][2];

			UpdownCUBE3[i][0] = Go3[i][0];
			UpdownCUBE3[i][1] = Go3[i][1];
			UpdownCUBE3[i][2] = Go3[i][2];

			UpdownCUBE4[i][0] = Go4[i][0];
			UpdownCUBE4[i][1] = Go4[i][1];
			UpdownCUBE4[i][2] = Go4[i][2];

			UpdownCUBE5[i][0] = Go5[i][0];
			UpdownCUBE5[i][1] = Go5[i][1];
			UpdownCUBE5[i][2] = Go5[i][2];
		}

		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{

			yellowCUBE1[i][2] -= 2.0f;

			yellowCUBE2[i][2] += 8.0f;

			yellowCUBE3[i][2] -= 2.0f;

			yellowCUBE4[i][2] -= 2.0f;

			yellowCUBE5[i][2] -= 2.0f;


		}

		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);
		glBindVertexArray(VAO[4]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		play_time_flag += 1;
	}

	if (Second == 69 && play_time_flag == 69)  // 69
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}

		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{

			yellowCUBE1[i][2] -= 2.0f;

			yellowCUBE2[i][2] -= 2.0f;

			yellowCUBE3[i][2] += 8.0f;

			yellowCUBE4[i][2] -= 2.0f;

			yellowCUBE5[i][2] -= 2.0f;


		}

		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[4]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		play_time_flag += 1;
	}

	if (Second == 70 && play_time_flag == 70)  // 70
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}
		for (int i = 0; i < 36; i++)
		{
			UpdownCUBE1[i][0] = Go1[i][0];
			UpdownCUBE1[i][1] = Go1[i][1];
			UpdownCUBE1[i][2] = Go1[i][2];

			UpdownCUBE2[i][0] = array5x1[i][0]; // == Go2
			UpdownCUBE2[i][1] = array5x1[i][1];
			UpdownCUBE2[i][2] = array5x1[i][2];

			UpdownCUBE3[i][0] = Go3[i][0];
			UpdownCUBE3[i][1] = Go3[i][1];
			UpdownCUBE3[i][2] = Go3[i][2];

			UpdownCUBE4[i][0] = array5x5[i][0];
			UpdownCUBE4[i][1] = array5x5[i][1];
			UpdownCUBE4[i][2] = array5x5[i][2];
		}

		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{

			yellowCUBE1[i][2] -= 2.0f;

			yellowCUBE2[i][2] -= 2.0f;

			yellowCUBE3[i][2] -= 2.0f;

			yellowCUBE4[i][2] += 8.0f;

			yellowCUBE5[i][2] -= 2.0f;


		}

		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[4]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		play_time_flag += 1;
	}

	if (Second == 71 && play_time_flag == 71)  // 71
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}



		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{

			yellowCUBE1[i][2] -= 2.0f;

			yellowCUBE2[i][2] -= 2.0f;

			yellowCUBE3[i][2] -= 2.0f;

			yellowCUBE4[i][2] -= 2.0f;

			yellowCUBE5[i][2] += 8.0f;


		}

		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);
		glBindVertexArray(VAO[4]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		play_time_flag += 1;
	}

	if (Second == 72 && play_time_flag == 72)  // 72
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}

		for (int i = 0; i < 36; i++)
		{
			UpdownCUBE1[i][0] = Go1[i][0];
			UpdownCUBE1[i][1] = Go1[i][1];
			UpdownCUBE1[i][2] = Go1[i][2];

			UpdownCUBE2[i][0] = array5x1[i][0]; // == Go2
			UpdownCUBE2[i][1] = array5x1[i][1];
			UpdownCUBE2[i][2] = array5x1[i][2];

			UpdownCUBE3[i][0] = Go3[i][0];
			UpdownCUBE3[i][1] = Go3[i][1];
			UpdownCUBE3[i][2] = Go3[i][2];

			UpdownCUBE4[i][0] = array5x5[i][0];
			UpdownCUBE4[i][1] = array5x5[i][1];
			UpdownCUBE4[i][2] = array5x5[i][2];
		}

		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{

			yellowCUBE1[i][2] += 8.0f;

			yellowCUBE2[i][2] -= 2.0f;

			yellowCUBE3[i][2] -= 2.0f;

			yellowCUBE4[i][2] -= 2.0f;

			yellowCUBE5[i][2] -= 2.0f;


		}

		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[4]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		play_time_flag += 1;
	}

	if (Second == 73 && play_time_flag == 73)  // 73
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}


		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{

			yellowCUBE1[i][2] -= 2.0f;

			yellowCUBE2[i][2] += 8.0f;

			yellowCUBE3[i][2] -= 2.0f;

			yellowCUBE4[i][2] -= 2.0f;

			yellowCUBE5[i][2] -= 2.0f;


		}

		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);
		glBindVertexArray(VAO[4]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		play_time_flag += 1;
	}

	if (Second == 74 && play_time_flag == 74)  // 74
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}

		for (int i = 0; i < 36; i++)
		{
			UpdownCUBE1[i][0] = Good_D1[i][0];
			UpdownCUBE1[i][1] = Good_D1[i][1];
			UpdownCUBE1[i][2] = Good_D1[i][2];

			UpdownCUBE2[i][0] = array5x1[i][0]; // == Go2
			UpdownCUBE2[i][1] = array5x1[i][1];
			UpdownCUBE2[i][2] = array5x1[i][2];

			UpdownCUBE3[i][0] = Good_D3[i][0];
			UpdownCUBE3[i][1] = Good_D3[i][1];
			UpdownCUBE3[i][2] = Good_D3[i][2];

			UpdownCUBE4[i][0] = Good_D4[i][0];
			UpdownCUBE4[i][1] = Good_D4[i][1];
			UpdownCUBE4[i][2] = Good_D4[i][2];
		}
		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{

			yellowCUBE1[i][2] -= 2.0f;

			yellowCUBE2[i][2] -= 2.0f;

			yellowCUBE3[i][2] += 8.0f;

			yellowCUBE4[i][2] -= 2.0f;

			yellowCUBE5[i][2] -= 2.0f;


		}

		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);
		glBindVertexArray(VAO[4]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		play_time_flag += 1;
	}

	if (Second == 75 && play_time_flag == 75)  // 75
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}


		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{

			yellowCUBE1[i][2] -= 2.0f;

			yellowCUBE2[i][2] -= 2.0f;

			yellowCUBE3[i][2] -= 2.0f;

			yellowCUBE4[i][2] += 8.0f;

			yellowCUBE5[i][2] -= 2.0f;


		}


		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);
		glBindVertexArray(VAO[4]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		play_time_flag += 1;
	}

	if (Second == 76 && play_time_flag == 76)  // 76
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}

		for (int i = 0; i < 36; i++)
		{
			UpdownCUBE1[i][0] = One_block5x13[i][0];
			UpdownCUBE1[i][1] = One_block5x13[i][1];
			UpdownCUBE1[i][2] = One_block5x13[i][2];

			UpdownCUBE2[i][0] = One_block5x3[i][0]; // == Go2
			UpdownCUBE2[i][1] = One_block5x3[i][1];
			UpdownCUBE2[i][2] = One_block5x3[i][2];

		}

		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{

			yellowCUBE1[i][2] -= 2.0f;

			yellowCUBE2[i][2] -= 2.0f;

			yellowCUBE3[i][2] -= 2.0f;

			yellowCUBE4[i][2] -= 2.0f;

			yellowCUBE5[i][2] += 8.0f;


		}

		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[4]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		play_time_flag += 1;
	}

	if (Second == 77 && play_time_flag == 77)  // 77
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}

		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{

			yellowCUBE1[i][2] += 8.0f;

			yellowCUBE2[i][2] -= 2.0f;

			yellowCUBE3[i][2] -= 2.0f;

			yellowCUBE4[i][2] -= 2.0f;

			yellowCUBE5[i][2] -= 2.0f;


		}

		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[4]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		play_time_flag += 1;
	}

	if (Second == 78 && play_time_flag == 78)  // 78
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}

		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{

			yellowCUBE1[i][2] -= 2.0f;

			yellowCUBE2[i][2] += 8.0f;

			yellowCUBE3[i][2] -= 2.0f;

			yellowCUBE4[i][2] -= 2.0f;

			yellowCUBE5[i][2] -= 2.0f;


		}

		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[4]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		play_time_flag += 1;
	}
	if (Second == 79 && play_time_flag == 79)  // 79
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}

		for (int i = 0; i < 5; i ++)
		{
			for (int j = 0; j < 6; j++)
			{
				Floor_Color[30 * i + j][0] = 1.0f;
				Floor_Color[30 * i + j][1] = 0.0f;
				Floor_Color[30 * i + j][2] = 0.0f;
			}
		}

		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{

			yellowCUBE1[i][2] -= 2.0f;

			yellowCUBE2[i][2] -= 2.0f;

			yellowCUBE3[i][2] += 8.0f;

			yellowCUBE4[i][2] -= 2.0f;

			yellowCUBE5[i][2] -= 2.0f;


		}

		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);
		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[4]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		play_time_flag += 1;
	}

	if (Second == 80 && play_time_flag == 80)  // 80
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}

		for (int i = 0; i < 5; i++)
		{
			for (int j = 0; j < 6; j++)
			{
				Floor_Color[30 * i + j + 6][0] = 1.0f;
				Floor_Color[30 * i + j + 6][1] = 0.0f;
				Floor_Color[30 * i + j + 6][2] = 0.0f;
			}
		}

		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{
			UpdownCUBE1[i][0] = array5x1[i][0];
			UpdownCUBE1[i][1] = array5x1[i][1];
			UpdownCUBE1[i][2] = array5x1[i][2];

			yellowCUBE1[i][2] -= 2.0f;

			yellowCUBE2[i][2] -= 2.0f;

			yellowCUBE3[i][2] -= 2.0f;

			yellowCUBE4[i][2] += 8.0f;

			yellowCUBE5[i][2] -= 2.0f;

		}

		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[4]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		play_time_flag += 1;
	}

	if (Second == 81 && play_time_flag == 81)  // 81
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}

		for (int i = 0; i < 5; i++)
		{
			for (int j = 0; j < 6; j++)
			{
				Floor_Color[30 * i + j + 12][0] = 1.0f;
				Floor_Color[30 * i + j + 12][1] = 0.0f;
				Floor_Color[30 * i + j + 12][2] = 0.0f;
			}
		}

		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{
			UpdownCUBE2[i][0] = array5x2[i][0];
			UpdownCUBE2[i][1] = array5x2[i][1];
			UpdownCUBE2[i][2] = array5x2[i][2];

			yellowCUBE1[i][2] -= 2.0f;

			yellowCUBE2[i][2] -= 2.0f;

			yellowCUBE3[i][2] -= 2.0f;

			yellowCUBE4[i][2] -= 2.0f;

			yellowCUBE5[i][2] += 8.0f;

		}

		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[4]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		play_time_flag += 1;
	}

	if (Second == 82 && play_time_flag == 82)  // 82
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}

		for (int i = 0; i < 5; i++)
		{
			for (int j = 0; j < 6; j++)
			{
				Floor_Color[30 * i + j + 18][0] = 1.0f;
				Floor_Color[30 * i + j + 18][1] = 0.0f;
				Floor_Color[30 * i + j + 18][2] = 0.0f;
			}
		}

		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{
			UpdownCUBE3[i][0] = array5x3[i][0];
			UpdownCUBE3[i][1] = array5x3[i][1];
			UpdownCUBE3[i][2] = array5x3[i][2];

			yellowCUBE1[i][2] += 8.0f;

			yellowCUBE2[i][2] -= 2.0f;

			yellowCUBE3[i][2] -= 2.0f;

			yellowCUBE4[i][2] -= 2.0f;

			yellowCUBE5[i][2] -= 2.0f;

		}

		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[4]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		play_time_flag += 1;
	}

	if (Second == 83 && play_time_flag == 83)  // 83
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}

		for (int i = 0; i < 5; i++)
		{
			for (int j = 0; j < 6; j++)
			{
				Floor_Color[30 * i + j + 24][0] = 1.0f;
				Floor_Color[30 * i + j + 24][1] = 0.0f;
				Floor_Color[30 * i + j + 24][2] = 0.0f;
			}
		}

		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{
			UpdownCUBE4[i][0] = array5x4[i][0];
			UpdownCUBE4[i][1] = array5x4[i][1];
			UpdownCUBE4[i][2] = array5x4[i][2];

			yellowCUBE1[i][2] -= 2.0f;

			yellowCUBE2[i][2] += 8.0f;

			yellowCUBE3[i][2] -= 2.0f;

			yellowCUBE4[i][2] -= 2.0f;

			yellowCUBE5[i][2] -= 2.0f;

		}

		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[4]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		play_time_flag += 1;
	}

	if (Second == 84 && play_time_flag == 84)  // 84
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}

		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{
			UpdownCUBE5[i][0] = array5x5[i][0];
			UpdownCUBE5[i][1] = array5x5[i][1];
			UpdownCUBE5[i][2] = array5x5[i][2];

			yellowCUBE1[i][2] -= 2.0f;

			yellowCUBE2[i][2] -= 2.0f;

			yellowCUBE3[i][2] += 8.0f;

			yellowCUBE4[i][2] -= 2.0f;

			yellowCUBE5[i][2] -= 2.0f;

		}

		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[4]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		play_time_flag += 1;
	}

	if (Second == 85 && play_time_flag == 85)  // 85
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}


		for (int i = 0; i < 5; i++)
		{
			for (int j = 0; j < 6; j++)
			{
				Floor_Color[30 * i + j + 24][0] = 1.0f;
				Floor_Color[30 * i + j + 24][1] = 0.0f;
				Floor_Color[30 * i + j + 24][2] = 0.0f;
			}
		}


		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{

			yellowCUBE1[i][2] -= 2.0f;

			yellowCUBE2[i][2] -= 2.0f;

			yellowCUBE3[i][2] -= 2.0f;

			yellowCUBE4[i][2] += 8.0f;

			yellowCUBE5[i][2] -= 2.0f;

		}

		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);
		glBindVertexArray(VAO[4]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		play_time_flag += 1;
	}

	if (Second == 86 && play_time_flag == 86)  // 86
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}


		for (int i = 0; i < 5; i++)
		{
			for (int j = 0; j < 6; j++)
			{
				Floor_Color[30 * i + j + 18][0] = 1.0f;
				Floor_Color[30 * i + j + 18][1] = 0.0f;
				Floor_Color[30 * i + j + 18][2] = 0.0f;
			}
		}


		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{
			UpdownCUBE5[i][0] = array5x5[i][0];
			UpdownCUBE5[i][1] = array5x5[i][1];
			UpdownCUBE5[i][2] = array5x5[i][2];

			yellowCUBE1[i][2] -= 2.0f;

			yellowCUBE2[i][2] -= 2.0f;

			yellowCUBE3[i][2] -= 2.0f;

			yellowCUBE4[i][2] -= 2.0f;

			yellowCUBE5[i][2] += 8.0f;

		}

		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[4]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		play_time_flag += 1;
	}

	if (Second == 87 && play_time_flag == 87)  // 87
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}


		for (int i = 0; i < 5; i++)
		{
			for (int j = 0; j < 6; j++)
			{
				Floor_Color[30 * i + j + 12][0] = 1.0f;
				Floor_Color[30 * i + j + 12][1] = 0.0f;
				Floor_Color[30 * i + j + 12][2] = 0.0f;
			}
		}


		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{
			UpdownCUBE4[i][0] = array5x4[i][0];
			UpdownCUBE4[i][1] = array5x4[i][1];
			UpdownCUBE4[i][2] = array5x4[i][2];
			yellowCUBE1[i][2] += 8.0f;

			yellowCUBE2[i][2] -= 2.0f;

			yellowCUBE3[i][2] -= 2.0f;

			yellowCUBE4[i][2] -= 2.0f;

			yellowCUBE5[i][2] -= 2.0f;

		}

		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[4]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		play_time_flag += 1;
	}

	if (Second == 88 && play_time_flag == 88)  // 88
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}


		for (int i = 0; i < 5; i++)
		{
			for (int j = 0; j < 6; j++)
			{
				Floor_Color[30 * i + j + 6][0] = 1.0f;
				Floor_Color[30 * i + j + 6][1] = 0.0f;
				Floor_Color[30 * i + j + 6][2] = 0.0f;
			}
		}


		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{
			UpdownCUBE3[i][0] = array5x3[i][0];
			UpdownCUBE3[i][1] = array5x3[i][1];
			UpdownCUBE3[i][2] = array5x3[i][2];

			yellowCUBE1[i][2] -= 2.0f;

			yellowCUBE2[i][2] += 8.0f;

			yellowCUBE3[i][2] -= 2.0f;

			yellowCUBE4[i][2] -= 2.0f;

			yellowCUBE5[i][2] -= 2.0f;

		}

		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[4]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		play_time_flag += 1;
	}

	if (Second == 89 && play_time_flag == 89)  // 89
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}


		for (int i = 0; i < 5; i++)
		{
			for (int j = 0; j < 6; j++)
			{
				Floor_Color[30 * i + j][0] = 1.0f;
				Floor_Color[30 * i + j][1] = 0.0f;
				Floor_Color[30 * i + j][2] = 0.0f;
			}
		}


		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{
			UpdownCUBE2[i][0] = array5x2[i][0];
			UpdownCUBE2[i][1] = array5x2[i][1];
			UpdownCUBE2[i][2] = array5x2[i][2];

			yellowCUBE1[i][2] -= 2.0f;

			yellowCUBE2[i][2] -= 2.0f;

			yellowCUBE3[i][2] += 8.0f;

			yellowCUBE4[i][2] -= 2.0f;

			yellowCUBE5[i][2] -= 2.0f;

		}

		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[4]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		play_time_flag += 1;
	}

	if (Second == 90 && play_time_flag == 90)  // 90
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}


		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{
			UpdownCUBE1[i][0] = array5x1[i][0];
			UpdownCUBE1[i][1] = array5x1[i][1];
			UpdownCUBE1[i][2] = array5x1[i][2];

			yellowCUBE1[i][2] -= 2.0f;

			yellowCUBE2[i][2] -= 2.0f;

			yellowCUBE3[i][2] -= 2.0f;

			yellowCUBE4[i][2] += 8.0f;

			yellowCUBE5[i][2] -= 2.0f;

		}

		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[4]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		play_time_flag += 1;
	}

	if (Second == 91 && play_time_flag == 91)  // 91
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}

		for (int i = 0; i < 5; i++)
		{
			if (i <= 3)
			{
				for (int j = 0; j < 6; j++)
				{
					Floor_Color[30*i+j][0] = 1.0f;
					Floor_Color[30 * i+j][1] = 0.0f;
					Floor_Color[30 * i+j][2] = 0.0f;

					Floor_Color[30 * i + j + 12][0] = 1.0f;
					Floor_Color[30 * i + j + 12][1] = 0.0f;
					Floor_Color[30 * i + j + 12][2] = 0.0f;

					Floor_Color[30 * i + j + 24][0] = 1.0f;
					Floor_Color[30 * i + j + 24][1] = 0.0f;
					Floor_Color[30 * i + j + 24][2] = 0.0f;

				}

			}
			else
			{
				for (int j = 0; j < 30; j++)
				{
					Floor_Color[30 * i + j][0] = 1.0f;
					Floor_Color[30 * i + j][1] = 0.0f;
					Floor_Color[30 * i + j][2] = 0.0f;

				}
			}
		}

		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{

			yellowCUBE1[i][2] -= 2.0f;

			yellowCUBE2[i][2] -= 2.0f;

			yellowCUBE3[i][2] -= 2.0f;

			yellowCUBE4[i][2] -= 2.0f;

			yellowCUBE5[i][0] = sideset[i][0];
			yellowCUBE5[i][1] = sideset[i][1];
			yellowCUBE5[i][2] = sideset[i][2];

		}

		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[4]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		play_time_flag += 1;
	}

	if (Second == 92 && play_time_flag == 92)  // 92
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}

		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{
			UpdownCUBE1[i][0] = array5x1[i][0];
			UpdownCUBE1[i][1] = array5x1[i][1];
			UpdownCUBE1[i][2] = array5x1[i][2];

			UpdownCUBE2[i][0] = array5x3[i][0];
			UpdownCUBE2[i][1] = array5x3[i][1];
			UpdownCUBE2[i][2] = array5x3[i][2];

			UpdownCUBE3[i][0] = array5x5[i][0];
			UpdownCUBE3[i][1] = array5x5[i][1];
			UpdownCUBE3[i][2] = array5x5[i][2];

			UpdownCUBE4[i][0] = Go3[i][0];
			UpdownCUBE4[i][1] = Go3[i][1];
			UpdownCUBE4[i][2] = Go3[i][2];

			yellowCUBE1[i][0] = sideset[i][0];
			yellowCUBE1[i][1] = sideset[i][1];
			yellowCUBE1[i][2] = sideset[i][2];

			yellowCUBE2[i][2] -= 2.0f;

			yellowCUBE3[i][2] -= 2.0f;

			yellowCUBE4[i][2] -= 2.0f;

		}

		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[4]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		play_time_flag += 1;
	}

	if (Second == 93 && play_time_flag == 93)  // 93
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}

		for (int i = 0; i < 6; i++) // A
		{
			if (i == 0 || i == 2)
			{

				for (int j = 0; j < 30; j++)
				{
					Floor_Color[30 * i + j][0] = 1.0f;
					Floor_Color[30 * i + j][1] = 0.0f;
					Floor_Color[30 * i + j][2] = 0.0f;

				}
			}
			else
			{
				for (int j = 0; j < 6; j++)
				{
					Floor_Color[30 * i + j][0] = 1.0f;
					Floor_Color[30 * i + j][1] = 0.0f;
					Floor_Color[30 * i + j][2] = 0.0f;

					Floor_Color[30 * i + j + 24][0] = 1.0f;
					Floor_Color[30 * i + j + 24][1] = 0.0f;
					Floor_Color[30 * i + j + 24][2] = 0.0f;

				}
			}
		}

		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{

			yellowCUBE2[i][0] = sideset[i][0];
			yellowCUBE2[i][1] = sideset[i][1];
			yellowCUBE2[i][2] = sideset[i][2];

			yellowCUBE3[i][2] -= 2.0f;

			yellowCUBE4[i][2] -= 2.0f;

		}

		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[4]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color_Copy[i][0] = Floor_Color_Copy2[i][0];
			Floor_Color_Copy[i][1] = Floor_Color_Copy2[i][1];
			Floor_Color_Copy[i][2] = Floor_Color_Copy2[i][2];
		}
		play_time_flag += 1;
	}

	if (Second == 94 && play_time_flag == 94)  // 94
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}

		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{

			UpdownCUBE1[i][0] = array5x1[i][0];
			UpdownCUBE1[i][1] = array5x1[i][1];
			UpdownCUBE1[i][2] = array5x1[i][2];

			UpdownCUBE2[i][0] = array5x5[i][0];
			UpdownCUBE2[i][1] = array5x5[i][1];
			UpdownCUBE2[i][2] = array5x5[i][2];

			UpdownCUBE3[i][0] = Go1[i][0];
			UpdownCUBE3[i][1] = Go1[i][1];
			UpdownCUBE3[i][2] = Go1[i][2];

			UpdownCUBE4[i][0] = Left5x3[i][0];
			UpdownCUBE4[i][1] = Left5x3[i][1];
			UpdownCUBE4[i][2] = Left5x3[i][2];



			yellowCUBE3[i][0] = sideset[i][0];
			yellowCUBE3[i][1] = sideset[i][1];
			yellowCUBE3[i][2] = sideset[i][2];

			yellowCUBE4[i][2] -= 2.0f;

		}

		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[4]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);



		play_time_flag += 1;
	}

	if (Second == 95 && play_time_flag == 95)  // 95
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}



		for (int j = 0; j < 6; j++)
		{
			Floor_Color[j + 12][0] = 1.0f;
			Floor_Color[j + 12][1] = 0.0f;
			Floor_Color[j + 12][2] = 0.0f;
			Floor_Color[30 + j + 12][0] = 1.0f;
			Floor_Color[30 + j + 12][1] = 0.0f;
			Floor_Color[30 + j + 12][2] = 0.0f;
			Floor_Color[60 + j + 12][0] = 1.0f;
			Floor_Color[60 + j + 12][1] = 0.0f;
			Floor_Color[60 + j + 12][2] = 0.0f;
			Floor_Color[120 + j + 12][0] = 1.0f;
			Floor_Color[120 + j + 12][1] = 0.0f;
			Floor_Color[120 + j + 12][2] = 0.0f;

		}



		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{
			yellowCUBE4[i][0] = sideset[i][0];
			yellowCUBE4[i][1] = sideset[i][1];
			yellowCUBE4[i][2] = sideset[i][2];

		}

		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[4]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color_Copy[i][0] = Floor_Color_Copy2[i][0];
			Floor_Color_Copy[i][1] = Floor_Color_Copy2[i][1];
			Floor_Color_Copy[i][2] = Floor_Color_Copy2[i][2];
		}
		play_time_flag += 1;
	}

	if (Second == 96 && play_time_flag == 96)  // 96
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}


		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{
			UpdownCUBE1[i][0] = One_block5x13[i][0];
			UpdownCUBE1[i][1] = One_block5x13[i][1];
			UpdownCUBE1[i][2] = One_block5x13[i][2];

			UpdownCUBE2[i][0] = One_block5x3[i][0];
			UpdownCUBE2[i][1] = One_block5x3[i][1];
			UpdownCUBE2[i][2] = One_block5x3[i][2];

		}

		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[4]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		play_time_flag += 1;
	}

	if (Second == 97 && play_time_flag == 97)  // 97
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}


		for (int i = 0; i < 6; i++)  //S
		{
			if (i == 0 || i == 2 || i == 4)
			{

				for (int j = 0; j < 30; j++)
				{
					Floor_Color[30 * i + j][0] = 1.0f;
					Floor_Color[30 * i + j][1] = 0.0f;
					Floor_Color[30 * i + j][2] = 0.0f;

				}
			}
			else if(i == 1)
			{
				for (int j = 0; j < 6; j++)
				{
					Floor_Color[30 * i + j][0] = 1.0f;
					Floor_Color[30 * i + j][1] = 0.0f;
					Floor_Color[30 * i + j][2] = 0.0f;
				}
			}
			else if (i == 3)
			{
				for (int j = 24; j < 30; j++)
				{
					Floor_Color[30 * i + j][0] = 1.0f;
					Floor_Color[30 * i + j][1] = 0.0f;
					Floor_Color[30 * i + j][2] = 0.0f;
				}
			}
		}

		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[4]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color_Copy[i][0] = Floor_Color_Copy2[i][0];
			Floor_Color_Copy[i][1] = Floor_Color_Copy2[i][1];
			Floor_Color_Copy[i][2] = Floor_Color_Copy2[i][2];
		}
		play_time_flag += 1;
	}

	if (Second == 98 && play_time_flag == 98)  // 98
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}

		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{   //S
			UpdownCUBE1[i][0] = Go1[i][0];
			UpdownCUBE1[i][1] = Go1[i][1];
			UpdownCUBE1[i][2] = Go1[i][2];

			UpdownCUBE2[i][0] = Left5x3[i][0];
			UpdownCUBE2[i][1] = Left5x3[i][1];
			UpdownCUBE2[i][2] = Left5x3[i][2];

			UpdownCUBE3[i][0] = Go3[i][0];
			UpdownCUBE3[i][1] = Go3[i][1];
			UpdownCUBE3[i][2] = Go3[i][2];

			UpdownCUBE4[i][0] = One_block2x1[i][0];
			UpdownCUBE4[i][1] = One_block2x1[i][1];
			UpdownCUBE4[i][2] = One_block2x1[i][2];

			UpdownCUBE5[i][0] = One_block4x5[i][0];
			UpdownCUBE5[i][1] = One_block4x5[i][1];
			UpdownCUBE5[i][2] = One_block4x5[i][2];

		}

		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[4]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		play_time_flag += 1;
	}


	if (Second == 99 && play_time_flag == 99)  // 99
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}

		for (int i = 0; i < 6; i++) // A
		{
			if (i == 0 || i == 2)
			{

				for (int j = 0; j < 30; j++)
				{
					Floor_Color[30 * i + j][0] = 1.0f;
					Floor_Color[30 * i + j][1] = 0.0f;
					Floor_Color[30 * i + j][2] = 0.0f;

				}
			}
			else
			{
				for (int j = 0; j < 6; j++)
				{
					Floor_Color[30 * i + j][0] = 1.0f;
					Floor_Color[30 * i + j][1] = 0.0f;
					Floor_Color[30 * i + j][2] = 0.0f;

					Floor_Color[30 * i + j + 24][0] = 1.0f;
					Floor_Color[30 * i + j + 24][1] = 0.0f;
					Floor_Color[30 * i + j + 24][2] = 0.0f;

				}
			}
		}


		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[4]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color_Copy[i][0] = Floor_Color_Copy2[i][0];
			Floor_Color_Copy[i][1] = Floor_Color_Copy2[i][1];
			Floor_Color_Copy[i][2] = Floor_Color_Copy2[i][2];
		}

		play_time_flag += 1;
	}

	if (Second == 100 && play_time_flag == 100)  // 100
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}

		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{

			UpdownCUBE1[i][0] = array5x1[i][0];
			UpdownCUBE1[i][1] = array5x1[i][1];
			UpdownCUBE1[i][2] = array5x1[i][2];

			UpdownCUBE2[i][0] = array5x5[i][0];
			UpdownCUBE2[i][1] = array5x5[i][1];
			UpdownCUBE2[i][2] = array5x5[i][2];

			UpdownCUBE3[i][0] = Go1[i][0];
			UpdownCUBE3[i][1] = Go1[i][1];
			UpdownCUBE3[i][2] = Go1[i][2];

			UpdownCUBE4[i][0] = Left5x3[i][0];
			UpdownCUBE4[i][1] = Left5x3[i][1];
			UpdownCUBE4[i][2] = Left5x3[i][2];
		}


		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[4]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		play_time_flag += 1;
	}

	if (Second == 101 && play_time_flag == 101)  // 101
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}
		for (int i = 0; i < 5; i++) // N
		{
			if (i == 0)
			{

				for (int j = 0; j < 30; j++)
				{
					Floor_Color[30 * i + j][0] = 1.0f;
					Floor_Color[30 * i + j][1] = 0.0f;
					Floor_Color[30 * i + j][2] = 0.0f;

				}
			}
			else
			{
				for (int j = 0; j < 6; j++)
				{
					Floor_Color[30 * i + j][0] = 1.0f;
					Floor_Color[30 * i + j][1] = 0.0f;
					Floor_Color[30 * i + j][2] = 0.0f;

					Floor_Color[30 * i + j + 24][0] = 1.0f;
					Floor_Color[30 * i + j + 24][1] = 0.0f;
					Floor_Color[30 * i + j + 24][2] = 0.0f;

				}
			}
		}

		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[4]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		play_time_flag += 1;
	}

	if (Second == 102 && play_time_flag == 102)  // 102
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}

		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{

			UpdownCUBE1[i][0] = array5x1[i][0];
			UpdownCUBE1[i][1] = array5x1[i][1];
			UpdownCUBE1[i][2] = array5x1[i][2];

			UpdownCUBE2[i][0] = array5x5[i][0];
			UpdownCUBE2[i][1] = array5x5[i][1];
			UpdownCUBE2[i][2] = array5x5[i][2];

			UpdownCUBE3[i][0] = Go1[i][0];
			UpdownCUBE3[i][1] = Go1[i][1];
			UpdownCUBE3[i][2] = Go1[i][2];
		}

		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[4]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		play_time_flag += 1;
	}


	if (Second == 103 && play_time_flag == 103)  // 102
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}

		for (int i = 0; i < 6; i++)  //S
		{
			if (i == 0 || i == 2 || i == 4)
			{

				for (int j = 0; j < 30; j++)
				{
					Floor_Color[30 * i + j][0] = 1.0f;
					Floor_Color[30 * i + j][1] = 0.0f;
					Floor_Color[30 * i + j][2] = 0.0f;

				}
			}
			else if (i == 1)
			{
				for (int j = 0; j < 6; j++)
				{
					Floor_Color[30 * i + j][0] = 1.0f;
					Floor_Color[30 * i + j][1] = 0.0f;
					Floor_Color[30 * i + j][2] = 0.0f;
				}
			}
			else if (i == 3)
			{
				for (int j = 24; j < 30; j++)
				{
					Floor_Color[30 * i + j][0] = 1.0f;
					Floor_Color[30 * i + j][1] = 0.0f;
					Floor_Color[30 * i + j][2] = 0.0f;
				}
			}
		}

		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[4]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		play_time_flag += 1;
	}

	if (Second == 104 && play_time_flag == 104)  // 104
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}

		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{   //S
			UpdownCUBE1[i][0] = Go1[i][0];
			UpdownCUBE1[i][1] = Go1[i][1];
			UpdownCUBE1[i][2] = Go1[i][2];

			UpdownCUBE2[i][0] = Left5x3[i][0];
			UpdownCUBE2[i][1] = Left5x3[i][1];
			UpdownCUBE2[i][2] = Left5x3[i][2];

			UpdownCUBE3[i][0] = Go3[i][0];
			UpdownCUBE3[i][1] = Go3[i][1];
			UpdownCUBE3[i][2] = Go3[i][2];

			UpdownCUBE4[i][0] = One_block2x1[i][0];
			UpdownCUBE4[i][1] = One_block2x1[i][1];
			UpdownCUBE4[i][2] = One_block2x1[i][2];

			UpdownCUBE5[i][0] = One_block4x5[i][0];
			UpdownCUBE5[i][1] = One_block4x5[i][1];
			UpdownCUBE5[i][2] = One_block4x5[i][2];

		}

		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[4]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		play_time_flag += 1;
	}

	if (Second == 105 && play_time_flag == 105)  // 105
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}

		for (int j = 0; j < 6; j++)
		{
			Floor_Color[j + 12][0] = 1.0f;
			Floor_Color[j + 12][1] = 0.0f;
			Floor_Color[j + 12][2] = 0.0f;
			Floor_Color[30 + j + 12][0] = 1.0f;
			Floor_Color[30 + j + 12][1] = 0.0f;
			Floor_Color[30 + j + 12][2] = 0.0f;
			Floor_Color[60 + j + 12][0] = 1.0f;
			Floor_Color[60 + j + 12][1] = 0.0f;
			Floor_Color[60 + j + 12][2] = 0.0f;
			Floor_Color[120 + j + 12][0] = 1.0f;
			Floor_Color[120 + j + 12][1] = 0.0f;
			Floor_Color[120 + j + 12][2] = 0.0f;

		}

		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[4]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		play_time_flag += 1;
	}

	if (Second == 106 && play_time_flag == 106)  // 110
	{
		for (int i = 0; i < 150; i++) // 바닥 색깔 초기화
		{
			Floor_Color[i][0] = Floor_Color_Copy[i][0];
			Floor_Color[i][1] = Floor_Color_Copy[i][1];
			Floor_Color[i][2] = Floor_Color_Copy[i][2];
		}

		for (int i = 0; i < 36; i++) // 적 블럭 생성 / 초기화 ------->현재역할
		{
			UpdownCUBE1[i][0] = One_block5x13[i][0];
			UpdownCUBE1[i][1] = One_block5x13[i][1];
			UpdownCUBE1[i][2] = One_block5x13[i][2];

			UpdownCUBE2[i][0] = One_block5x3[i][0];
			UpdownCUBE2[i][1] = One_block5x3[i][1];
			UpdownCUBE2[i][2] = One_block5x3[i][2];

		}

		glBindVertexArray(VAO[0]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
		GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
		glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(pAttribute);

		glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
		glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);


		glBindVertexArray(VAO[2]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
		glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[3]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
		glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
		glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(3);

		glBindVertexArray(VAO[4]);
		glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
		glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);

		glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
		glEnableVertexAttribArray(0);


		play_time_flag += 1;
	}
	if (Second == 112 && play_time_flag == 107)  // 107
	{
		Stage_Clear();
		glutLeaveMainLoop();
	}




	collision_Updown1();
	collision_Updown2();
	collision_Updown3();
	collision_Updown4();
	collision_Updown5();
	collision_sideleft1();
	collision_sideleft2();
	collision_sideup1();
	collision_sideup2();
	collision_yellow1();
	collision_yellow2();
	collision_yellow3();
	collision_yellow4();
	collision_yellow5();
	collision_yellow6();


	glutPostRedisplay();
	glutTimerFunc(100, Play_game, 1);
}

void Stage_Clear()
{
	printf("----------------------------------------------------\n");
	printf("\t클리어 축하드립니다!\n");
	printf("\t플레이해주셔서 감사합니다.\n");
	printf("----------------------------------------------------\n");
}

int Down_block_flag = 1;
void Down_block(int Sec)
{
	if (UpdownCUBE1[1][1] >= 0.0f)
	{
		for (int i = 0; i < 36; i++)
		{
			UpdownCUBE1[i][1] -= 0.5f;
		}
		//Down_block_flag = 1;
	}
	else if (UpdownCUBE1[1][1] < 0.0f && UpdownCUBE1[1][1] > -2.0f)
	{
		for (int i = 0; i < 36; i++)
		{
			UpdownCUBE1[i][0] = -20.0f;
			UpdownCUBE1[i][1] = -20.0f;
			UpdownCUBE1[i][2] = -20.0f;
		}
		//Down_block_flag = 0;
	}

	if (UpdownCUBE2[1][1] >= 0.0f)
	{
		for (int i = 0; i < 36; i++)
		{
			UpdownCUBE2[i][1] -= 0.5f;
		}
		//Down_block_flag = 1;
	}
	else if (UpdownCUBE2[1][1] < 0.0f && UpdownCUBE2[1][1] > -2.0f)
	{
		for (int i = 0; i < 36; i++)
		{
			UpdownCUBE2[i][0] = -20.0f;
			UpdownCUBE2[i][1] = -20.0f;
			UpdownCUBE2[i][2] = -20.0f;
		}
		//Down_block_flag = 0;
	}

	if (UpdownCUBE3[1][1] >= 0.0f)
	{
		for (int i = 0; i < 36; i++)
		{
			UpdownCUBE3[i][1] -= 0.5f;
		}
		//Down_block_flag = 1;
	}
	else if (UpdownCUBE3[1][1] < 0.0f && UpdownCUBE3[1][1] > -2.0f)
	{
		for (int i = 0; i < 36; i++)
		{
			UpdownCUBE3[i][0] = -20.0f;
			UpdownCUBE3[i][1] = -20.0f;
			UpdownCUBE3[i][2] = -20.0f;
		}
		//Down_block_flag = 0;
	}

	if (UpdownCUBE4[1][1] >= 0.0f)
	{
		for (int i = 0; i < 36; i++)
		{
			UpdownCUBE4[i][1] -= 0.5f;
		}
		//Down_block_flag = 1;
	}
	else if (UpdownCUBE4[1][1] < 0.0f && UpdownCUBE4[1][1] > -2.0f)
	{
		for (int i = 0; i < 36; i++)
		{
			UpdownCUBE4[i][0] = -20.0f;
			UpdownCUBE4[i][1] = -20.0f;
			UpdownCUBE4[i][2] = -20.0f;
		}
		//Down_block_flag = 0;
	}

	if (UpdownCUBE5[1][1] >= 0.0f)
	{
		for (int i = 0; i < 36; i++)
		{
			UpdownCUBE5[i][1] -= 0.5f;
		}
		//Down_block_flag = 1;
	}
	else if (UpdownCUBE5[1][1] < 0.0f && UpdownCUBE5[1][1] > -2.0f)
	{
		for (int i = 0; i < 36; i++)
		{
			UpdownCUBE5[i][0] = -20.0f;
			UpdownCUBE5[i][1] = -20.0f;
			UpdownCUBE5[i][2] = -20.0f;
		}
		//Down_block_flag = 0;
	}



	glBindVertexArray(VAO[2]);
	glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
	glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
	glEnableVertexAttribArray(0);

	glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
	glEnableVertexAttribArray(0);

	glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
	glEnableVertexAttribArray(0);


	glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
	glEnableVertexAttribArray(0);


	glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
	glEnableVertexAttribArray(0);



	glutPostRedisplay();
	glutTimerFunc(100, Down_block, 1);
}


void InitBuffer()
{
	//// 5.1. VAO 객체 생성 및 바인딩
	glGenVertexArrays(10, VAO);
	glGenBuffers(4, VBO);
	glGenBuffers(4, VBO1);
	glGenBuffers(4, VBO2);
	glGenBuffers(4, VBO3);
	glGenBuffers(4, VBO4);
	glGenBuffers(4, VBO5);


	// 2 triangles for quad floor
	glUseProgram(s_program[0]);
	// 바닥!
	glBindVertexArray(VAO[0]);
	glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
	glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor, GL_STATIC_DRAW);
	GLint pAttribute = glGetAttribLocation(s_program[0], "aPos");
	glVertexAttribPointer(pAttribute, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
	glEnableVertexAttribArray(pAttribute);

	glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
	glBufferData(GL_ARRAY_BUFFER, 150 * 3 * sizeof(GLfloat), Floor_Color, GL_STATIC_DRAW);
	glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
	glEnableVertexAttribArray(3);


	glBindVertexArray(VAO[1]);
	glBindBuffer(GL_ARRAY_BUFFER, VBO1[0]);
	glBufferData(GL_ARRAY_BUFFER, 720 * sizeof(glm::vec3), &Rect1[0], GL_STATIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
	glEnableVertexAttribArray(0);



	glBufferSubData(GL_ARRAY_BUFFER, 36 * sizeof(glm::vec3) , 36 * sizeof(glm::vec3), &Rect2[0]);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
	glEnableVertexAttribArray(0);



	glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * sizeof(glm::vec3), 36 * sizeof(glm::vec3), &Rect3[0]);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
	glEnableVertexAttribArray(0);


	glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * sizeof(glm::vec3), 36 * sizeof(glm::vec3), &Rect4[0]);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
	glEnableVertexAttribArray(0);


	glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * sizeof(glm::vec3), 36 * sizeof(glm::vec3), &Rect5[0]);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
	glEnableVertexAttribArray(0);

	glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * sizeof(glm::vec3), 36 * sizeof(glm::vec3), &Rect6[0]);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
	glEnableVertexAttribArray(0);


	glBufferSubData(GL_ARRAY_BUFFER, 6 * 36 * sizeof(glm::vec3), 36 * sizeof(glm::vec3), &Rect7[0]);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
	glEnableVertexAttribArray(0);


	glBufferSubData(GL_ARRAY_BUFFER, 7 * 36 * sizeof(glm::vec3), 36 * sizeof(glm::vec3), &Rect8[0]);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
	glEnableVertexAttribArray(0);


	glBufferSubData(GL_ARRAY_BUFFER, 8 * 36 * sizeof(glm::vec3), 36 * sizeof(glm::vec3), &Rect9[0]);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
	glEnableVertexAttribArray(0);


	glBufferSubData(GL_ARRAY_BUFFER, 9 * 36 * sizeof(glm::vec3), 36 * sizeof(glm::vec3), &Rect10[0]);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
	glEnableVertexAttribArray(0);


	glBufferSubData(GL_ARRAY_BUFFER, 10 * 36 * sizeof(glm::vec3), 36 * sizeof(glm::vec3), &Rect11[0]);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
	glEnableVertexAttribArray(0);


	glBufferSubData(GL_ARRAY_BUFFER, 11 * 36 * sizeof(glm::vec3), 36 * sizeof(glm::vec3), &Rect12[0]);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
	glEnableVertexAttribArray(0);


	glBufferSubData(GL_ARRAY_BUFFER, 12 * 36 * sizeof(glm::vec3), 36 * sizeof(glm::vec3), &Rect13[0]);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
	glEnableVertexAttribArray(0);


	glBufferSubData(GL_ARRAY_BUFFER, 13 * 36 * sizeof(glm::vec3), 36 * sizeof(glm::vec3), &Rect14[0]);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
	glEnableVertexAttribArray(0);


	glBufferSubData(GL_ARRAY_BUFFER, 14 * 36 * sizeof(glm::vec3), 36 * sizeof(glm::vec3), &Rect15[0]);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
	glEnableVertexAttribArray(0);


	glBufferSubData(GL_ARRAY_BUFFER, 15 * 36 * sizeof(glm::vec3), 36 * sizeof(glm::vec3), &Rect16[0]);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
	glEnableVertexAttribArray(0);


	glBufferSubData(GL_ARRAY_BUFFER, 16 * 36 * sizeof(glm::vec3), 36 * sizeof(glm::vec3), &Rect17[0]);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
	glEnableVertexAttribArray(0);


	glBufferSubData(GL_ARRAY_BUFFER, 17 * 36 * sizeof(glm::vec3), 36 * sizeof(glm::vec3), &Rect18[0]);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
	glEnableVertexAttribArray(0);


	glBufferSubData(GL_ARRAY_BUFFER, 18 * 36 * sizeof(glm::vec3), 36 * sizeof(glm::vec3), &Rect19[0]);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
	glEnableVertexAttribArray(0);


	glBufferSubData(GL_ARRAY_BUFFER, 19 * 36 * sizeof(glm::vec3), 36 * sizeof(glm::vec3), &Rect20[0]);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
	glEnableVertexAttribArray(0);


	glBindBuffer(GL_ARRAY_BUFFER, VBO1[2]);
	glBufferData(GL_ARRAY_BUFFER, 20 * objReader.outnormal.size() * sizeof(glm::vec3), &objReader.outnormal[0], GL_STATIC_DRAW);
	glVertexAttribPointer(2, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
	glEnableVertexAttribArray(2);

	glBufferSubData(GL_ARRAY_BUFFER, objReader.outnormal.size() * sizeof(glm::vec3), 36 * sizeof(glm::vec3), &objReader.outnormal);
	glVertexAttribPointer(2, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
	glEnableVertexAttribArray(2);

	glBufferSubData(GL_ARRAY_BUFFER, 2 * objReader.outnormal.size() * sizeof(glm::vec3), 36 * sizeof(glm::vec3), &objReader.outnormal);
	glVertexAttribPointer(2, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
	glEnableVertexAttribArray(2);

	glBufferSubData(GL_ARRAY_BUFFER, 3 * objReader.outnormal.size() * sizeof(glm::vec3), 36 * sizeof(glm::vec3), &objReader.outnormal);
	glVertexAttribPointer(2, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
	glEnableVertexAttribArray(2);

	glBufferSubData(GL_ARRAY_BUFFER, 4 * objReader.outnormal.size() * sizeof(glm::vec3), 36 * sizeof(glm::vec3), &objReader.outnormal);
	glVertexAttribPointer(2, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
	glEnableVertexAttribArray(2);

	glBufferSubData(GL_ARRAY_BUFFER, 5 * objReader.outnormal.size() * sizeof(glm::vec3), 36 * sizeof(glm::vec3), &objReader.outnormal);
	glVertexAttribPointer(2, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
	glEnableVertexAttribArray(2);

	glBufferSubData(GL_ARRAY_BUFFER, 6 * objReader.outnormal.size() * sizeof(glm::vec3), 36 * sizeof(glm::vec3), &objReader.outnormal);
	glVertexAttribPointer(2, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
	glEnableVertexAttribArray(2);

	glBufferSubData(GL_ARRAY_BUFFER, 7 * objReader.outnormal.size() * sizeof(glm::vec3), 36 * sizeof(glm::vec3), &objReader.outnormal);
	glVertexAttribPointer(2, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
	glEnableVertexAttribArray(2);

	glBufferSubData(GL_ARRAY_BUFFER, 8 * objReader.outnormal.size() * sizeof(glm::vec3), 36 * sizeof(glm::vec3), &objReader.outnormal);
	glVertexAttribPointer(2, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
	glEnableVertexAttribArray(2);

	glBufferSubData(GL_ARRAY_BUFFER, 9 * objReader.outnormal.size() * sizeof(glm::vec3), 36 * sizeof(glm::vec3), &objReader.outnormal);
	glVertexAttribPointer(2, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
	glEnableVertexAttribArray(2);

	glBufferSubData(GL_ARRAY_BUFFER, 10 * objReader.outnormal.size() * sizeof(glm::vec3), 36 * sizeof(glm::vec3), &objReader.outnormal);
	glVertexAttribPointer(2, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
	glEnableVertexAttribArray(2);

	glBufferSubData(GL_ARRAY_BUFFER, 11 * objReader.outnormal.size() * sizeof(glm::vec3), 36 * sizeof(glm::vec3), &objReader.outnormal);
	glVertexAttribPointer(2, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
	glEnableVertexAttribArray(2);

	glBufferSubData(GL_ARRAY_BUFFER, 12 * objReader.outnormal.size() * sizeof(glm::vec3), 36 * sizeof(glm::vec3), &objReader.outnormal);
	glVertexAttribPointer(2, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
	glEnableVertexAttribArray(2);

	glBufferSubData(GL_ARRAY_BUFFER, 13 * objReader.outnormal.size() * sizeof(glm::vec3), 36 * sizeof(glm::vec3), &objReader.outnormal);
	glVertexAttribPointer(2, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
	glEnableVertexAttribArray(2);

	glBufferSubData(GL_ARRAY_BUFFER, 14 * objReader.outnormal.size() * sizeof(glm::vec3), 36 * sizeof(glm::vec3), &objReader.outnormal);
	glVertexAttribPointer(2, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
	glEnableVertexAttribArray(2);

	glBufferSubData(GL_ARRAY_BUFFER, 15 * objReader.outnormal.size() * sizeof(glm::vec3), 36 * sizeof(glm::vec3), &objReader.outnormal);
	glVertexAttribPointer(2, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
	glEnableVertexAttribArray(2);

	glBufferSubData(GL_ARRAY_BUFFER, 16 * objReader.outnormal.size() * sizeof(glm::vec3), 36 * sizeof(glm::vec3), &objReader.outnormal);
	glVertexAttribPointer(2, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
	glEnableVertexAttribArray(2);

	glBufferSubData(GL_ARRAY_BUFFER, 17 * objReader.outnormal.size() * sizeof(glm::vec3), 36 * sizeof(glm::vec3), &objReader.outnormal);
	glVertexAttribPointer(2, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
	glEnableVertexAttribArray(2);

	glBufferSubData(GL_ARRAY_BUFFER, 18 * objReader.outnormal.size() * sizeof(glm::vec3), 36 * sizeof(glm::vec3), &objReader.outnormal);
	glVertexAttribPointer(2, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
	glEnableVertexAttribArray(2);

	glBufferSubData(GL_ARRAY_BUFFER, 19 * objReader.outnormal.size() * sizeof(glm::vec3), 36 * sizeof(glm::vec3), &objReader.outnormal);
	glVertexAttribPointer(2, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
	glEnableVertexAttribArray(2);


	glBindBuffer(GL_ARRAY_BUFFER, VBO1[1]);
	glBufferData(GL_ARRAY_BUFFER, 720 * 2 * sizeof(float), RectUv, GL_STATIC_DRAW);
	glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, 2 * sizeof(float), 0);
	glEnableVertexAttribArray(1);

	glBindBuffer(GL_ARRAY_BUFFER, VBO1[3]);
	glBufferData(GL_ARRAY_BUFFER, 720 * 2 * sizeof(float), GasterColor, GL_STATIC_DRAW);
	glVertexAttribPointer(3, 2, GL_FLOAT, GL_FALSE, 2 * sizeof(float), 0);
	glEnableVertexAttribArray(3);

	//------------------------------ 위에서 떨어지는 블럭-------------------------------------------------
	glBindVertexArray(VAO[2]);
	glBindBuffer(GL_ARRAY_BUFFER, VBO2[0]);
	glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownCUBE1, GL_STATIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
	glEnableVertexAttribArray(0);

	glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE2);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
	glEnableVertexAttribArray(0);

	glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE3);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
	glEnableVertexAttribArray(0);


	glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE4);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
	glEnableVertexAttribArray(0);


	glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), UpdownCUBE5);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
	glEnableVertexAttribArray(0);


	glBindBuffer(GL_ARRAY_BUFFER, VBO2[1]);
	glBufferData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), UpdownColor1, GL_STATIC_DRAW);
	glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
	glEnableVertexAttribArray(3);

	//----------------------------- 상화좌우에서 오는 빔-------------------------------------------
	glBindVertexArray(VAO[3]);
	glBindBuffer(GL_ARRAY_BUFFER, VBO3[0]);
	glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideupCUBE1, GL_STATIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
	glEnableVertexAttribArray(0);



	glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideupCUBE2);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
	glEnableVertexAttribArray(0);

	glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE1);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
	glEnableVertexAttribArray(0);


	glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), sideleftCUBE2);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
	glEnableVertexAttribArray(0);


	glBindBuffer(GL_ARRAY_BUFFER, VBO3[1]);
	glBufferData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), sideColor1, GL_STATIC_DRAW);
	glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
	glEnableVertexAttribArray(3);


	//-------------------------------------------------------------------------------

	glBindVertexArray(VAO[4]);
	glBindBuffer(GL_ARRAY_BUFFER, VBO4[0]);
	glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE1, GL_STATIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
	glEnableVertexAttribArray(0);



	glBufferSubData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE2);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
	glEnableVertexAttribArray(0);

	glBufferSubData(GL_ARRAY_BUFFER, 2 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE3);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
	glEnableVertexAttribArray(0);


	glBufferSubData(GL_ARRAY_BUFFER, 3 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE4);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
	glEnableVertexAttribArray(0);

	glBufferSubData(GL_ARRAY_BUFFER, 4 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE5);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
	glEnableVertexAttribArray(0);

	glBufferSubData(GL_ARRAY_BUFFER, 5 * 36 * 3 * sizeof(GLfloat), 36 * 3 * sizeof(GLfloat), yellowCUBE6);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
	glEnableVertexAttribArray(0);


	glBindBuffer(GL_ARRAY_BUFFER, VBO4[1]);
	glBufferData(GL_ARRAY_BUFFER, 6 * 36 * 3 * sizeof(GLfloat), yellowCUBE_Color, GL_STATIC_DRAW);
	glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
	glEnableVertexAttribArray(3);

	//------------------------------------------------------------------------------
	glBindVertexArray(VAO[5]);
	glBindBuffer(GL_ARRAY_BUFFER, VBO5[0]);
	glBufferData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), playerCUBE, GL_STATIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
	glEnableVertexAttribArray(0);

	glBindBuffer(GL_ARRAY_BUFFER, VBO5[1]);
	glBufferData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), playerColor, GL_STATIC_DRAW);
	glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
	glEnableVertexAttribArray(3);









}
unsigned int texture;

void InitTexture()
{
	int widthImage, heightImage, numberOfChannel;
	//widthImage = 128;
	//heightImage = 128;
	numberOfChannel = 0;
	
	glGenTextures(1, &texture); //--- 텍스처 생성
	glBindTexture(GL_TEXTURE_2D, texture); //--- 텍스처 바인딩
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT); //--- 현재 바인딩된 텍스처의 파라미터 설정하기
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
	stbi_set_flip_vertically_on_load(true); //--- 이미지가 거꾸로 읽힌다면 추가
	unsigned char* data = stbi_load("pikachu.png", &widthImage, &heightImage, &numberOfChannel, 0);
	glTexImage2D(GL_TEXTURE_2D, 0, 4, widthImage, heightImage, 0, GL_RGBA, GL_UNSIGNED_BYTE, data); //---텍스처 이미지 정의
	stbi_image_free(data);
}

void Display()
{

	//auto end = std::chrono::system_clock::now();
	//auto sec = std::chrono::duration_cast<std::chrono::seconds>(end - start);
	//std::cout << "Test() 함수를 수행하는 걸린 시간(초) : " << sec.count() << " seconds" << std::endl;
	glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
	//glFrontFace(GL_CCW);
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);

	glEnable(GL_DEPTH_TEST);
	if (SH_COUNT == 1)
	{
		//glEnable(GL_CULL_FACE);
		glEnable(GL_DEPTH_TEST);

	}
	else if (SH_COUNT == 0)
	{
		//glDisable(GL_CULL_FACE);
		glDisable(GL_DEPTH_TEST);
	}


	if (polygon_mode == 1)
		glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);
	else if (polygon_mode == 2)
		glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);

	//*************************************************************************
	// Drawing CUBE


	glm::mat4 Rz = glm::mat4(1.0f);
	glm::mat4 Rz2 = glm::mat4(1.0f);
	glm::mat4 RR = glm::mat4(1.0f);
	glm::mat4 S = glm::mat4(1.0f);
	glm::mat4 model = glm::mat4(1.0f);
	S = glm::scale(S, glm::vec3(0.3, 0.3, 0.3));

	model = glm::translate(model, glm::vec3(TX, TY, TZ));

	Rz = glm::rotate(Rz, glm::radians(30.0f), glm::vec3(0.0, 1.0, 0.0));
	Rz2 = glm::rotate(Rz2, glm::radians(-30.0f), glm::vec3(0.0, 1.0, 0.0));

	RR = model * Rz2 * Rz * S;

	unsigned int modelLocation = glGetUniformLocation(s_program[0], "modelTransform");
	glUniformMatrix4fv(modelLocation, 1, GL_FALSE, glm::value_ptr(RR));




	Display_Camera();
	//glutSwapBuffers();

}

GLfloat pPro = -5;
GLfloat pPro1 = 5;
int PRO_Flag = 0;

GLfloat CxPos = 0.55f;
GLfloat CyPos = 0.1f;
GLfloat CzPos = 0.4f;

GLfloat CxVis = 0.5f;
GLfloat CyVis = 0.1f;
GLfloat CzVis = 0.0f;
void Display_Camera()
{

		glUseProgram(s_program[0]);
		glm::vec3 cameraPos = glm::vec3(xPos, yPos, zPos); //--- 카메라 위치
		glm::vec3 cameraDirection = glm::vec3(0.0f, 0.0f, 0.0f); //--- 카메라 바라보는 방향
		glm::vec3 cameraUp = glm::vec3(0.0f, 1.0f, 0.0f); //--- 카메라 위쪽 방향
		glm::mat4 view = glm::mat4(1.0f);

		view = glm::lookAt(cameraPos, cameraDirection, cameraUp);
		unsigned int viewLocation = glGetUniformLocation(s_program[0], "viewTransform"); //--- 뷰잉 변환 설정
		glUniformMatrix4fv(viewLocation, 1, GL_FALSE, &view[0][0]);
		glm::mat4 projection = glm::mat4(1.0f);
		if (PRO_Flag == 1)
		{
			projection = glm::ortho(pPro, pPro1, pPro, pPro1, pPro, pPro1);
		}
		else if (PRO_Flag == 0)
		{
			projection = glm::perspective(glm::radians(45.0f), 1.0f, 0.1f, 100.0f);
			projection = glm::translate(projection, glm::vec3(0.0, 0.0, -5.0));


		}


		unsigned int projectionLocation = glGetUniformLocation(s_program[0], "projectionTransform"); //--- 투영 변환 값 설정
		glUniformMatrix4fv(projectionLocation, 1, GL_FALSE, &projection[0][0]);

		glBindVertexArray(VAO[0]);
		glDrawArrays(GL_TRIANGLES, 0, 150);

		glBindVertexArray(VAO[1]);
		glBindTexture(GL_TEXTURE_2D, texture);
		glDrawArrays(GL_TRIANGLES, 0, 720);

		glBindVertexArray(VAO[2]);
		glDrawArrays(GL_TRIANGLES, 0, 180);

		glBindVertexArray(VAO[3]);
		glDrawArrays(GL_TRIANGLES, 0, 144);

		glBindVertexArray(VAO[4]);
		glDrawArrays(GL_TRIANGLES, 0, 216);

		glBindVertexArray(VAO[5]);
		glDrawArrays(GL_TRIANGLES, 0, 36);



	glutSwapBuffers();

}

void moveup()
{
	if (playerCUBE[0][2] <= -4.5)
	{
		return;
	}
	for (int i = 0; i < 36; i++)
	{
		playerCUBE[i][2] -= 2.0;
	}


	glBindVertexArray(VAO[5]);
	glBindBuffer(GL_ARRAY_BUFFER, VBO5[0]);
	glBufferData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), playerCUBE, GL_STATIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
	glEnableVertexAttribArray(0);
	glBindBuffer(GL_ARRAY_BUFFER, VBO5[1]);
	glBufferData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), playerColor, GL_STATIC_DRAW);
	glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
	glEnableVertexAttribArray(3);
}

void movedown()
{
	if (playerCUBE[8][2] >= 4.5)
	{
		return;
	}
	for (int i = 0; i < 36; i++)
	{
		playerCUBE[i][2] += 2.0;
	}

	glBindVertexArray(VAO[5]);
	glBindBuffer(GL_ARRAY_BUFFER, VBO5[0]);
	glBufferData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), playerCUBE, GL_STATIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
	glEnableVertexAttribArray(0);
	glBindBuffer(GL_ARRAY_BUFFER, VBO5[1]);
	glBufferData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), playerColor, GL_STATIC_DRAW);
	glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
	glEnableVertexAttribArray(3);

}

void moveleft()
{
	if (playerCUBE[2][0] <= -4.5)
	{
		return;
	}
	for (int i = 0; i < 36; i++)
	{
		playerCUBE[i][0] -= 2.0;
	}

	glBindVertexArray(VAO[5]);
	glBindBuffer(GL_ARRAY_BUFFER, VBO5[0]);
	glBufferData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), playerCUBE, GL_STATIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
	glEnableVertexAttribArray(0);
	glBindBuffer(GL_ARRAY_BUFFER, VBO5[1]);
	glBufferData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), playerColor, GL_STATIC_DRAW);
	glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
	glEnableVertexAttribArray(3);

}

void moveright()
{
	if (playerCUBE[0][0] >= 4.5)
	{
		return;
	}
	for (int i = 0; i < 36; i++)
	{
		playerCUBE[i][0] += 2.0;
	}


	glBindVertexArray(VAO[5]);
	glBindBuffer(GL_ARRAY_BUFFER, VBO5[0]);
	glBufferData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), playerCUBE, GL_STATIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
	glEnableVertexAttribArray(0);
	glBindBuffer(GL_ARRAY_BUFFER, VBO5[1]);
	glBufferData(GL_ARRAY_BUFFER, 36 * 3 * sizeof(GLfloat), playerColor, GL_STATIC_DRAW);
	glVertexAttribPointer(3, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), 0);
	glEnableVertexAttribArray(3);
}



void Reshape(int w, int h)
{
	g_window_w = w;
	g_window_h = h;
	glViewport(0, 0, w, h);
}
void Keyboard(unsigned char key, int x, int y)
{


	switch (key)
	{
	case'w':
		moveup();

		break;
	case'a':
		moveleft();
		break;
	case's':
		movedown();
		break;
	case'd':
		moveright();
		break;

	case'r':
		glutLeaveMainLoop();
		break;

	default:
		break;
	}

	glutPostRedisplay();
}






